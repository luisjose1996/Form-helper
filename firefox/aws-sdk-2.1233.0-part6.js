AWS.apiLoader.services["kafkaconnect"] = {};

AWS.KafkaConnect = AWS.Service.defineService("kafkaconnect", [ "2021-09-14" ]);

AWS.apiLoader.services["kafkaconnect"]["2021-09-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-14",
        endpointPrefix: "kafkaconnect",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Kafka Connect",
        serviceFullName: "Managed Streaming for Kafka Connect",
        serviceId: "KafkaConnect",
        signatureVersion: "v4",
        signingName: "kafkaconnect",
        uid: "kafkaconnect-2021-09-14"
    },
    operations: {
        CreateConnector: {
            http: {
                requestUri: "/v1/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "capacity", "connectorConfiguration", "connectorName", "kafkaCluster", "kafkaClusterClientAuthentication", "kafkaClusterEncryptionInTransit", "kafkaConnectVersion", "plugins", "serviceExecutionRoleArn" ],
                members: {
                    capacity: {
                        type: "structure",
                        members: {
                            autoScaling: {
                                type: "structure",
                                required: [ "maxWorkerCount", "mcuCount", "minWorkerCount" ],
                                members: {
                                    maxWorkerCount: {
                                        type: "integer"
                                    },
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    minWorkerCount: {
                                        type: "integer"
                                    },
                                    scaleInPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    scaleOutPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            },
                            provisionedCapacity: {
                                type: "structure",
                                required: [ "mcuCount", "workerCount" ],
                                members: {
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    workerCount: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    connectorConfiguration: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    connectorDescription: {},
                    connectorName: {},
                    kafkaCluster: {
                        type: "structure",
                        required: [ "apacheKafkaCluster" ],
                        members: {
                            apacheKafkaCluster: {
                                type: "structure",
                                required: [ "bootstrapServers", "vpc" ],
                                members: {
                                    bootstrapServers: {},
                                    vpc: {
                                        type: "structure",
                                        required: [ "subnets" ],
                                        members: {
                                            securityGroups: {
                                                shape: "Sh"
                                            },
                                            subnets: {
                                                shape: "Sh"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    kafkaClusterClientAuthentication: {
                        type: "structure",
                        required: [ "authenticationType" ],
                        members: {
                            authenticationType: {}
                        }
                    },
                    kafkaClusterEncryptionInTransit: {
                        type: "structure",
                        required: [ "encryptionType" ],
                        members: {
                            encryptionType: {}
                        }
                    },
                    kafkaConnectVersion: {},
                    logDelivery: {
                        type: "structure",
                        required: [ "workerLogDelivery" ],
                        members: {
                            workerLogDelivery: {
                                type: "structure",
                                members: {
                                    cloudWatchLogs: {
                                        type: "structure",
                                        required: [ "enabled" ],
                                        members: {
                                            enabled: {
                                                type: "boolean"
                                            },
                                            logGroup: {}
                                        }
                                    },
                                    firehose: {
                                        type: "structure",
                                        required: [ "enabled" ],
                                        members: {
                                            deliveryStream: {},
                                            enabled: {
                                                type: "boolean"
                                            }
                                        }
                                    },
                                    s3: {
                                        type: "structure",
                                        required: [ "enabled" ],
                                        members: {
                                            bucket: {},
                                            enabled: {
                                                type: "boolean"
                                            },
                                            prefix: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    plugins: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "customPlugin" ],
                            members: {
                                customPlugin: {
                                    type: "structure",
                                    required: [ "customPluginArn", "revision" ],
                                    members: {
                                        customPluginArn: {},
                                        revision: {
                                            type: "long"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    serviceExecutionRoleArn: {},
                    workerConfiguration: {
                        type: "structure",
                        required: [ "revision", "workerConfigurationArn" ],
                        members: {
                            revision: {
                                type: "long"
                            },
                            workerConfigurationArn: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {},
                    connectorName: {},
                    connectorState: {}
                }
            }
        },
        CreateCustomPlugin: {
            http: {
                requestUri: "/v1/custom-plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentType", "location", "name" ],
                members: {
                    contentType: {},
                    description: {},
                    location: {
                        type: "structure",
                        required: [ "s3Location" ],
                        members: {
                            s3Location: {
                                type: "structure",
                                required: [ "bucketArn", "fileKey" ],
                                members: {
                                    bucketArn: {},
                                    fileKey: {},
                                    objectVersion: {}
                                }
                            }
                        }
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    customPluginArn: {},
                    customPluginState: {},
                    name: {},
                    revision: {
                        type: "long"
                    }
                }
            }
        },
        CreateWorkerConfiguration: {
            http: {
                requestUri: "/v1/worker-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "propertiesFileContent" ],
                members: {
                    description: {},
                    name: {},
                    propertiesFileContent: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        shape: "S19"
                    },
                    latestRevision: {
                        shape: "S1a"
                    },
                    name: {},
                    workerConfigurationArn: {}
                }
            }
        },
        DeleteConnector: {
            http: {
                method: "DELETE",
                requestUri: "/v1/connectors/{connectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectorArn" ],
                members: {
                    connectorArn: {
                        location: "uri",
                        locationName: "connectorArn"
                    },
                    currentVersion: {
                        location: "querystring",
                        locationName: "currentVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {},
                    connectorState: {}
                }
            },
            idempotent: true
        },
        DeleteCustomPlugin: {
            http: {
                method: "DELETE",
                requestUri: "/v1/custom-plugins/{customPluginArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "customPluginArn" ],
                members: {
                    customPluginArn: {
                        location: "uri",
                        locationName: "customPluginArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customPluginArn: {},
                    customPluginState: {}
                }
            },
            idempotent: true
        },
        DescribeConnector: {
            http: {
                method: "GET",
                requestUri: "/v1/connectors/{connectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectorArn" ],
                members: {
                    connectorArn: {
                        location: "uri",
                        locationName: "connectorArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    capacity: {
                        shape: "S1h"
                    },
                    connectorArn: {},
                    connectorConfiguration: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    connectorDescription: {},
                    connectorName: {},
                    connectorState: {},
                    creationTime: {
                        shape: "S19"
                    },
                    currentVersion: {},
                    kafkaCluster: {
                        shape: "S1o"
                    },
                    kafkaClusterClientAuthentication: {
                        shape: "S1r"
                    },
                    kafkaClusterEncryptionInTransit: {
                        shape: "S1s"
                    },
                    kafkaConnectVersion: {},
                    logDelivery: {
                        shape: "S1t"
                    },
                    plugins: {
                        shape: "S1y"
                    },
                    serviceExecutionRoleArn: {},
                    stateDescription: {
                        shape: "S21"
                    },
                    workerConfiguration: {
                        shape: "S22"
                    }
                }
            }
        },
        DescribeCustomPlugin: {
            http: {
                method: "GET",
                requestUri: "/v1/custom-plugins/{customPluginArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "customPluginArn" ],
                members: {
                    customPluginArn: {
                        location: "uri",
                        locationName: "customPluginArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        shape: "S19"
                    },
                    customPluginArn: {},
                    customPluginState: {},
                    description: {},
                    latestRevision: {
                        shape: "S25"
                    },
                    name: {},
                    stateDescription: {
                        shape: "S21"
                    }
                }
            }
        },
        DescribeWorkerConfiguration: {
            http: {
                method: "GET",
                requestUri: "/v1/worker-configurations/{workerConfigurationArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workerConfigurationArn" ],
                members: {
                    workerConfigurationArn: {
                        location: "uri",
                        locationName: "workerConfigurationArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    creationTime: {
                        shape: "S19"
                    },
                    description: {},
                    latestRevision: {
                        type: "structure",
                        members: {
                            creationTime: {
                                shape: "S19"
                            },
                            description: {},
                            propertiesFileContent: {
                                type: "string",
                                sensitive: true
                            },
                            revision: {
                                type: "long"
                            }
                        }
                    },
                    name: {},
                    workerConfigurationArn: {}
                }
            }
        },
        ListConnectors: {
            http: {
                method: "GET",
                requestUri: "/v1/connectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    connectorNamePrefix: {
                        location: "querystring",
                        locationName: "connectorNamePrefix"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                capacity: {
                                    shape: "S1h"
                                },
                                connectorArn: {},
                                connectorDescription: {},
                                connectorName: {},
                                connectorState: {},
                                creationTime: {
                                    shape: "S19"
                                },
                                currentVersion: {},
                                kafkaCluster: {
                                    shape: "S1o"
                                },
                                kafkaClusterClientAuthentication: {
                                    shape: "S1r"
                                },
                                kafkaClusterEncryptionInTransit: {
                                    shape: "S1s"
                                },
                                kafkaConnectVersion: {},
                                logDelivery: {
                                    shape: "S1t"
                                },
                                plugins: {
                                    shape: "S1y"
                                },
                                serviceExecutionRoleArn: {},
                                workerConfiguration: {
                                    shape: "S22"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCustomPlugins: {
            http: {
                method: "GET",
                requestUri: "/v1/custom-plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    customPlugins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                creationTime: {
                                    shape: "S19"
                                },
                                customPluginArn: {},
                                customPluginState: {},
                                description: {},
                                latestRevision: {
                                    shape: "S25"
                                },
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListWorkerConfigurations: {
            http: {
                method: "GET",
                requestUri: "/v1/worker-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workerConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                creationTime: {
                                    shape: "S19"
                                },
                                description: {},
                                latestRevision: {
                                    shape: "S1a"
                                },
                                name: {},
                                workerConfigurationArn: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateConnector: {
            http: {
                method: "PUT",
                requestUri: "/v1/connectors/{connectorArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "capacity", "connectorArn", "currentVersion" ],
                members: {
                    capacity: {
                        type: "structure",
                        members: {
                            autoScaling: {
                                type: "structure",
                                required: [ "maxWorkerCount", "mcuCount", "minWorkerCount", "scaleInPolicy", "scaleOutPolicy" ],
                                members: {
                                    maxWorkerCount: {
                                        type: "integer"
                                    },
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    minWorkerCount: {
                                        type: "integer"
                                    },
                                    scaleInPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    scaleOutPolicy: {
                                        type: "structure",
                                        required: [ "cpuUtilizationPercentage" ],
                                        members: {
                                            cpuUtilizationPercentage: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            },
                            provisionedCapacity: {
                                type: "structure",
                                required: [ "mcuCount", "workerCount" ],
                                members: {
                                    mcuCount: {
                                        type: "integer"
                                    },
                                    workerCount: {
                                        type: "integer"
                                    }
                                }
                            }
                        }
                    },
                    connectorArn: {
                        location: "uri",
                        locationName: "connectorArn"
                    },
                    currentVersion: {
                        location: "querystring",
                        locationName: "currentVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectorArn: {},
                    connectorState: {}
                }
            },
            idempotent: true
        }
    },
    shapes: {
        Sh: {
            type: "list",
            member: {}
        },
        S19: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S1a: {
            type: "structure",
            members: {
                creationTime: {
                    shape: "S19"
                },
                description: {},
                revision: {
                    type: "long"
                }
            }
        },
        S1h: {
            type: "structure",
            members: {
                autoScaling: {
                    type: "structure",
                    members: {
                        maxWorkerCount: {
                            type: "integer"
                        },
                        mcuCount: {
                            type: "integer"
                        },
                        minWorkerCount: {
                            type: "integer"
                        },
                        scaleInPolicy: {
                            type: "structure",
                            members: {
                                cpuUtilizationPercentage: {
                                    type: "integer"
                                }
                            }
                        },
                        scaleOutPolicy: {
                            type: "structure",
                            members: {
                                cpuUtilizationPercentage: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                },
                provisionedCapacity: {
                    type: "structure",
                    members: {
                        mcuCount: {
                            type: "integer"
                        },
                        workerCount: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S1o: {
            type: "structure",
            members: {
                apacheKafkaCluster: {
                    type: "structure",
                    members: {
                        bootstrapServers: {},
                        vpc: {
                            type: "structure",
                            members: {
                                securityGroups: {
                                    shape: "Sh"
                                },
                                subnets: {
                                    shape: "Sh"
                                }
                            }
                        }
                    }
                }
            }
        },
        S1r: {
            type: "structure",
            members: {
                authenticationType: {}
            }
        },
        S1s: {
            type: "structure",
            members: {
                encryptionType: {}
            }
        },
        S1t: {
            type: "structure",
            members: {
                workerLogDelivery: {
                    type: "structure",
                    members: {
                        cloudWatchLogs: {
                            type: "structure",
                            members: {
                                enabled: {
                                    type: "boolean"
                                },
                                logGroup: {}
                            }
                        },
                        firehose: {
                            type: "structure",
                            members: {
                                deliveryStream: {},
                                enabled: {
                                    type: "boolean"
                                }
                            }
                        },
                        s3: {
                            type: "structure",
                            members: {
                                bucket: {},
                                enabled: {
                                    type: "boolean"
                                },
                                prefix: {}
                            }
                        }
                    }
                }
            }
        },
        S1y: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    customPlugin: {
                        type: "structure",
                        members: {
                            customPluginArn: {},
                            revision: {
                                type: "long"
                            }
                        }
                    }
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                code: {},
                message: {}
            }
        },
        S22: {
            type: "structure",
            members: {
                revision: {
                    type: "long"
                },
                workerConfigurationArn: {}
            }
        },
        S25: {
            type: "structure",
            members: {
                contentType: {},
                creationTime: {
                    shape: "S19"
                },
                description: {},
                fileDescription: {
                    type: "structure",
                    members: {
                        fileMd5: {},
                        fileSize: {
                            type: "long"
                        }
                    }
                },
                location: {
                    type: "structure",
                    members: {
                        s3Location: {
                            type: "structure",
                            members: {
                                bucketArn: {},
                                fileKey: {},
                                objectVersion: {}
                            }
                        }
                    }
                },
                revision: {
                    type: "long"
                }
            }
        }
    },
    paginators: {
        ListConnectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "connectors"
        },
        ListCustomPlugins: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "customPlugins"
        },
        ListWorkerConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workerConfigurations"
        }
    }
};

AWS.apiLoader.services["voiceid"] = {};

AWS.VoiceID = AWS.Service.defineService("voiceid", [ "2021-09-27" ]);

AWS.apiLoader.services["voiceid"]["2021-09-27"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-27",
        endpointPrefix: "voiceid",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Amazon Voice ID",
        serviceId: "Voice ID",
        signatureVersion: "v4",
        signingName: "voiceid",
        targetPrefix: "VoiceID",
        uid: "voice-id-2021-09-27"
    },
    operations: {
        CreateDomain: {
            input: {
                type: "structure",
                required: [ "Name", "ServerSideEncryptionConfiguration" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {
                        shape: "S3"
                    },
                    Name: {
                        shape: "S4"
                    },
                    ServerSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        DeleteDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {}
                }
            },
            idempotent: true
        },
        DeleteFraudster: {
            input: {
                type: "structure",
                required: [ "DomainId", "FraudsterId" ],
                members: {
                    DomainId: {},
                    FraudsterId: {
                        shape: "Sm"
                    }
                }
            }
        },
        DeleteSpeaker: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpeakerId" ],
                members: {
                    DomainId: {},
                    SpeakerId: {
                        shape: "So"
                    }
                }
            }
        },
        DescribeDomain: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {
                        shape: "Sc"
                    }
                }
            }
        },
        DescribeFraudster: {
            input: {
                type: "structure",
                required: [ "DomainId", "FraudsterId" ],
                members: {
                    DomainId: {},
                    FraudsterId: {
                        shape: "Sm"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Fraudster: {
                        type: "structure",
                        members: {
                            CreatedAt: {
                                type: "timestamp"
                            },
                            DomainId: {},
                            GeneratedFraudsterId: {}
                        }
                    }
                }
            }
        },
        DescribeFraudsterRegistrationJob: {
            input: {
                type: "structure",
                required: [ "DomainId", "JobId" ],
                members: {
                    DomainId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "Sy"
                    }
                }
            }
        },
        DescribeSpeaker: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpeakerId" ],
                members: {
                    DomainId: {},
                    SpeakerId: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Speaker: {
                        shape: "S1d"
                    }
                }
            }
        },
        DescribeSpeakerEnrollmentJob: {
            input: {
                type: "structure",
                required: [ "DomainId", "JobId" ],
                members: {
                    DomainId: {},
                    JobId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1j"
                    }
                }
            }
        },
        EvaluateSession: {
            input: {
                type: "structure",
                required: [ "DomainId", "SessionNameOrId" ],
                members: {
                    DomainId: {},
                    SessionNameOrId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AuthenticationResult: {
                        type: "structure",
                        members: {
                            AudioAggregationEndedAt: {
                                type: "timestamp"
                            },
                            AudioAggregationStartedAt: {
                                type: "timestamp"
                            },
                            AuthenticationResultId: {},
                            Configuration: {
                                type: "structure",
                                required: [ "AcceptanceThreshold" ],
                                members: {
                                    AcceptanceThreshold: {
                                        type: "integer"
                                    }
                                }
                            },
                            CustomerSpeakerId: {
                                shape: "S1e"
                            },
                            Decision: {},
                            GeneratedSpeakerId: {},
                            Score: {
                                type: "integer"
                            }
                        }
                    },
                    DomainId: {},
                    FraudDetectionResult: {
                        type: "structure",
                        members: {
                            AudioAggregationEndedAt: {
                                type: "timestamp"
                            },
                            AudioAggregationStartedAt: {
                                type: "timestamp"
                            },
                            Configuration: {
                                type: "structure",
                                required: [ "RiskThreshold" ],
                                members: {
                                    RiskThreshold: {
                                        type: "integer"
                                    }
                                }
                            },
                            Decision: {},
                            FraudDetectionResultId: {},
                            Reasons: {
                                type: "list",
                                member: {}
                            },
                            RiskDetails: {
                                type: "structure",
                                required: [ "KnownFraudsterRisk", "VoiceSpoofingRisk" ],
                                members: {
                                    KnownFraudsterRisk: {
                                        type: "structure",
                                        required: [ "RiskScore" ],
                                        members: {
                                            GeneratedFraudsterId: {},
                                            RiskScore: {
                                                type: "integer"
                                            }
                                        }
                                    },
                                    VoiceSpoofingRisk: {
                                        type: "structure",
                                        required: [ "RiskScore" ],
                                        members: {
                                            RiskScore: {
                                                type: "integer"
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    SessionId: {},
                    SessionName: {},
                    StreamingStatus: {}
                }
            }
        },
        ListDomains: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    DomainSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                Description: {
                                    shape: "S3"
                                },
                                DomainId: {},
                                DomainStatus: {},
                                Name: {
                                    shape: "S4"
                                },
                                ServerSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                ServerSideEncryptionUpdateDetails: {
                                    shape: "Sh"
                                },
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListFraudsterRegistrationJobs: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    JobStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DomainId: {},
                                EndedAt: {
                                    type: "timestamp"
                                },
                                FailureDetails: {
                                    shape: "S10"
                                },
                                JobId: {},
                                JobName: {
                                    shape: "S14"
                                },
                                JobProgress: {
                                    shape: "S15"
                                },
                                JobStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSpeakerEnrollmentJobs: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    JobStatus: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    JobSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                DomainId: {},
                                EndedAt: {
                                    type: "timestamp"
                                },
                                FailureDetails: {
                                    shape: "S10"
                                },
                                JobId: {},
                                JobName: {
                                    shape: "S14"
                                },
                                JobProgress: {
                                    shape: "S15"
                                },
                                JobStatus: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSpeakers: {
            input: {
                type: "structure",
                required: [ "DomainId" ],
                members: {
                    DomainId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    SpeakerSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedAt: {
                                    type: "timestamp"
                                },
                                CustomerSpeakerId: {
                                    shape: "S1e"
                                },
                                DomainId: {},
                                GeneratedSpeakerId: {},
                                LastAccessedAt: {
                                    type: "timestamp"
                                },
                                Status: {},
                                UpdatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S7"
                    }
                }
            }
        },
        OptOutSpeaker: {
            input: {
                type: "structure",
                required: [ "DomainId", "SpeakerId" ],
                members: {
                    DomainId: {},
                    SpeakerId: {
                        shape: "So"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Speaker: {
                        shape: "S1d"
                    }
                }
            }
        },
        StartFraudsterRegistrationJob: {
            input: {
                type: "structure",
                required: [ "DataAccessRoleArn", "DomainId", "InputDataConfig", "OutputDataConfig" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DataAccessRoleArn: {},
                    DomainId: {},
                    InputDataConfig: {
                        shape: "S12"
                    },
                    JobName: {
                        shape: "S14"
                    },
                    OutputDataConfig: {
                        shape: "S18"
                    },
                    RegistrationConfig: {
                        shape: "S19"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "Sy"
                    }
                }
            },
            idempotent: true
        },
        StartSpeakerEnrollmentJob: {
            input: {
                type: "structure",
                required: [ "DataAccessRoleArn", "DomainId", "InputDataConfig", "OutputDataConfig" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DataAccessRoleArn: {},
                    DomainId: {},
                    EnrollmentConfig: {
                        shape: "S1k"
                    },
                    InputDataConfig: {
                        shape: "S12"
                    },
                    JobName: {
                        shape: "S14"
                    },
                    OutputDataConfig: {
                        shape: "S18"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Job: {
                        shape: "S1j"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {
                            shape: "S9"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDomain: {
            input: {
                type: "structure",
                required: [ "DomainId", "Name", "ServerSideEncryptionConfiguration" ],
                members: {
                    Description: {
                        shape: "S3"
                    },
                    DomainId: {},
                    Name: {
                        shape: "S4"
                    },
                    ServerSideEncryptionConfiguration: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Domain: {
                        shape: "Sc"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S4: {
            type: "string",
            sensitive: true
        },
        S5: {
            type: "structure",
            required: [ "KmsKeyId" ],
            members: {
                KmsKeyId: {}
            }
        },
        S7: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "S9"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        S9: {
            type: "string",
            sensitive: true
        },
        Sc: {
            type: "structure",
            members: {
                Arn: {},
                CreatedAt: {
                    type: "timestamp"
                },
                Description: {
                    shape: "S3"
                },
                DomainId: {},
                DomainStatus: {},
                Name: {
                    shape: "S4"
                },
                ServerSideEncryptionConfiguration: {
                    shape: "S5"
                },
                ServerSideEncryptionUpdateDetails: {
                    shape: "Sh"
                },
                UpdatedAt: {
                    type: "timestamp"
                }
            }
        },
        Sh: {
            type: "structure",
            members: {
                Message: {},
                OldKmsKeyId: {},
                UpdateStatus: {}
            }
        },
        Sm: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "string",
            sensitive: true
        },
        Sy: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                DataAccessRoleArn: {},
                DomainId: {},
                EndedAt: {
                    type: "timestamp"
                },
                FailureDetails: {
                    shape: "S10"
                },
                InputDataConfig: {
                    shape: "S12"
                },
                JobId: {},
                JobName: {
                    shape: "S14"
                },
                JobProgress: {
                    shape: "S15"
                },
                JobStatus: {},
                OutputDataConfig: {
                    shape: "S18"
                },
                RegistrationConfig: {
                    shape: "S19"
                }
            }
        },
        S10: {
            type: "structure",
            members: {
                Message: {},
                StatusCode: {
                    type: "integer"
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                S3Uri: {}
            }
        },
        S14: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "structure",
            members: {
                PercentComplete: {
                    type: "integer"
                }
            }
        },
        S18: {
            type: "structure",
            required: [ "S3Uri" ],
            members: {
                KmsKeyId: {},
                S3Uri: {}
            }
        },
        S19: {
            type: "structure",
            members: {
                DuplicateRegistrationAction: {},
                FraudsterSimilarityThreshold: {
                    type: "integer"
                }
            }
        },
        S1d: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                CustomerSpeakerId: {
                    shape: "S1e"
                },
                DomainId: {},
                GeneratedSpeakerId: {},
                LastAccessedAt: {
                    type: "timestamp"
                },
                Status: {},
                UpdatedAt: {
                    type: "timestamp"
                }
            }
        },
        S1e: {
            type: "string",
            sensitive: true
        },
        S1j: {
            type: "structure",
            members: {
                CreatedAt: {
                    type: "timestamp"
                },
                DataAccessRoleArn: {},
                DomainId: {},
                EndedAt: {
                    type: "timestamp"
                },
                EnrollmentConfig: {
                    shape: "S1k"
                },
                FailureDetails: {
                    shape: "S10"
                },
                InputDataConfig: {
                    shape: "S12"
                },
                JobId: {},
                JobName: {
                    shape: "S14"
                },
                JobProgress: {
                    shape: "S15"
                },
                JobStatus: {},
                OutputDataConfig: {
                    shape: "S18"
                }
            }
        },
        S1k: {
            type: "structure",
            members: {
                ExistingEnrollmentAction: {},
                FraudDetectionConfig: {
                    type: "structure",
                    members: {
                        FraudDetectionAction: {},
                        RiskThreshold: {
                            type: "integer"
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListDomains: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "DomainSummaries"
        },
        ListFraudsterRegistrationJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobSummaries"
        },
        ListSpeakerEnrollmentJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "JobSummaries"
        },
        ListSpeakers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SpeakerSummaries"
        }
    }
};

AWS.apiLoader.services["wisdom"] = {};

AWS.Wisdom = AWS.Service.defineService("wisdom", [ "2020-10-19" ]);

AWS.apiLoader.services["wisdom"]["2020-10-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-10-19",
        endpointPrefix: "wisdom",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Connect Wisdom Service",
        serviceId: "Wisdom",
        signatureVersion: "v4",
        signingName: "wisdom",
        uid: "wisdom-2020-10-19"
    },
    operations: {
        CreateAssistant: {
            http: {
                requestUri: "/assistants",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    serverSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    tags: {
                        shape: "S7"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assistant: {
                        shape: "Sc"
                    }
                }
            },
            idempotent: true
        },
        CreateAssistantAssociation: {
            http: {
                requestUri: "/assistants/{assistantId}/associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "association", "associationType" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    association: {
                        type: "structure",
                        members: {
                            knowledgeBaseId: {}
                        },
                        union: true
                    },
                    associationType: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistantAssociation: {
                        shape: "Sl"
                    }
                }
            },
            idempotent: true
        },
        CreateContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "name", "uploadId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "Sp"
                    },
                    name: {},
                    overrideLinkOutUri: {},
                    tags: {
                        shape: "S7"
                    },
                    title: {},
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "St"
                    }
                }
            },
            idempotent: true
        },
        CreateKnowledgeBase: {
            http: {
                requestUri: "/knowledgeBases",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseType", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    knowledgeBaseType: {},
                    name: {},
                    renderingConfiguration: {
                        shape: "S10"
                    },
                    serverSideEncryptionConfiguration: {
                        shape: "S5"
                    },
                    sourceConfiguration: {
                        shape: "S11"
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S16"
                    }
                }
            },
            idempotent: true
        },
        CreateSession: {
            http: {
                requestUri: "/assistants/{assistantId}/sessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "name" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1a"
                    }
                }
            },
            idempotent: true
        },
        DeleteAssistant: {
            http: {
                method: "DELETE",
                requestUri: "/assistants/{assistantId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteAssistantAssociation: {
            http: {
                method: "DELETE",
                requestUri: "/assistants/{assistantId}/associations/{assistantAssociationId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "assistantAssociationId", "assistantId" ],
                members: {
                    assistantAssociationId: {
                        location: "uri",
                        locationName: "assistantAssociationId"
                    },
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteContent: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteKnowledgeBase: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAssistant: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistant: {
                        shape: "Sc"
                    }
                }
            }
        },
        GetAssistantAssociation: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/associations/{assistantAssociationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantAssociationId", "assistantId" ],
                members: {
                    assistantAssociationId: {
                        location: "uri",
                        locationName: "assistantAssociationId"
                    },
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    assistantAssociation: {
                        shape: "Sl"
                    }
                }
            }
        },
        GetContent: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "St"
                    }
                }
            }
        },
        GetContentSummary: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}/summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    contentSummary: {
                        shape: "S1r"
                    }
                }
            }
        },
        GetKnowledgeBase: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S16"
                    }
                }
            }
        },
        GetRecommendations: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}/recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    },
                    waitTimeSeconds: {
                        location: "querystring",
                        locationName: "waitTimeSeconds",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "recommendations" ],
                members: {
                    recommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "document", "recommendationId" ],
                            members: {
                                document: {
                                    shape: "S20"
                                },
                                recommendationId: {},
                                relevanceLevel: {},
                                relevanceScore: {
                                    type: "double"
                                },
                                type: {}
                            }
                        }
                    },
                    triggers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "data", "id", "recommendationIds", "source", "type" ],
                            members: {
                                data: {
                                    type: "structure",
                                    members: {
                                        query: {
                                            type: "structure",
                                            members: {
                                                text: {
                                                    shape: "S2f"
                                                }
                                            }
                                        }
                                    },
                                    union: true
                                },
                                id: {},
                                recommendationIds: {
                                    shape: "S2g"
                                },
                                source: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        GetSession: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    session: {
                        shape: "S1a"
                    }
                }
            }
        },
        ListAssistantAssociations: {
            http: {
                method: "GET",
                requestUri: "/assistants/{assistantId}/associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assistantAssociationSummaries" ],
                members: {
                    assistantAssociationSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantAssociationArn", "assistantAssociationId", "assistantId", "associationData", "associationType" ],
                            members: {
                                assistantArn: {},
                                assistantAssociationArn: {},
                                assistantAssociationId: {},
                                assistantId: {},
                                associationData: {
                                    shape: "Sm"
                                },
                                associationType: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAssistants: {
            http: {
                method: "GET",
                requestUri: "/assistants",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assistantSummaries" ],
                members: {
                    assistantSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantId", "name", "status", "type" ],
                            members: {
                                assistantArn: {},
                                assistantId: {},
                                description: {},
                                name: {},
                                serverSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                status: {},
                                tags: {
                                    shape: "S7"
                                },
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListContents: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentSummaries" ],
                members: {
                    contentSummaries: {
                        shape: "S2w"
                    },
                    nextToken: {}
                }
            }
        },
        ListKnowledgeBases: {
            http: {
                method: "GET",
                requestUri: "/knowledgeBases",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "knowledgeBaseSummaries" ],
                members: {
                    knowledgeBaseSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "knowledgeBaseArn", "knowledgeBaseId", "knowledgeBaseType", "name", "status" ],
                            members: {
                                description: {},
                                knowledgeBaseArn: {},
                                knowledgeBaseId: {},
                                knowledgeBaseType: {},
                                name: {},
                                renderingConfiguration: {
                                    shape: "S10"
                                },
                                serverSideEncryptionConfiguration: {
                                    shape: "S5"
                                },
                                sourceConfiguration: {
                                    shape: "S11"
                                },
                                status: {},
                                tags: {
                                    shape: "S7"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S7"
                    }
                }
            }
        },
        NotifyRecommendationsReceived: {
            http: {
                requestUri: "/assistants/{assistantId}/sessions/{sessionId}/recommendations/notify",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "recommendationIds", "sessionId" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    recommendationIds: {
                        shape: "S2g"
                    },
                    sessionId: {
                        location: "uri",
                        locationName: "sessionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                message: {},
                                recommendationId: {}
                            }
                        }
                    },
                    recommendationIds: {
                        shape: "S2g"
                    }
                }
            },
            idempotent: true
        },
        QueryAssistant: {
            http: {
                requestUri: "/assistants/{assistantId}/query",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "queryText" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    queryText: {
                        shape: "S2f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "results" ],
                members: {
                    nextToken: {},
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "document", "resultId" ],
                            members: {
                                document: {
                                    shape: "S20"
                                },
                                relevanceScore: {
                                    type: "double"
                                },
                                resultId: {}
                            }
                        }
                    }
                }
            }
        },
        RemoveKnowledgeBaseTemplateUri: {
            http: {
                method: "DELETE",
                requestUri: "/knowledgeBases/{knowledgeBaseId}/templateUri",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "searchExpression" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        shape: "S3f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "contentSummaries" ],
                members: {
                    contentSummaries: {
                        shape: "S2w"
                    },
                    nextToken: {}
                }
            }
        },
        SearchSessions: {
            http: {
                requestUri: "/assistants/{assistantId}/searchSessions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assistantId", "searchExpression" ],
                members: {
                    assistantId: {
                        location: "uri",
                        locationName: "assistantId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    searchExpression: {
                        shape: "S3f"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "sessionSummaries" ],
                members: {
                    nextToken: {},
                    sessionSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assistantArn", "assistantId", "sessionArn", "sessionId" ],
                            members: {
                                assistantArn: {},
                                assistantId: {},
                                sessionArn: {},
                                sessionId: {}
                            }
                        }
                    }
                }
            }
        },
        StartContentUpload: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/upload",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentType", "knowledgeBaseId" ],
                members: {
                    contentType: {},
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "headersToInclude", "uploadId", "url", "urlExpiry" ],
                members: {
                    headersToInclude: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    uploadId: {},
                    url: {
                        shape: "Sw"
                    },
                    urlExpiry: {
                        shape: "Sx"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateContent: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/contents/{contentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentId", "knowledgeBaseId" ],
                members: {
                    contentId: {
                        location: "uri",
                        locationName: "contentId"
                    },
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    metadata: {
                        shape: "Sp"
                    },
                    overrideLinkOutUri: {},
                    removeOverrideLinkOutUri: {
                        type: "boolean"
                    },
                    revisionId: {},
                    title: {},
                    uploadId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    content: {
                        shape: "St"
                    }
                }
            }
        },
        UpdateKnowledgeBaseTemplateUri: {
            http: {
                requestUri: "/knowledgeBases/{knowledgeBaseId}/templateUri",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "knowledgeBaseId", "templateUri" ],
                members: {
                    knowledgeBaseId: {
                        location: "uri",
                        locationName: "knowledgeBaseId"
                    },
                    templateUri: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    knowledgeBase: {
                        shape: "S16"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                kmsKeyId: {}
            }
        },
        S7: {
            type: "map",
            key: {},
            value: {}
        },
        Sc: {
            type: "structure",
            required: [ "assistantArn", "assistantId", "name", "status", "type" ],
            members: {
                assistantArn: {},
                assistantId: {},
                description: {},
                name: {},
                serverSideEncryptionConfiguration: {
                    shape: "S5"
                },
                status: {},
                tags: {
                    shape: "S7"
                },
                type: {}
            }
        },
        Sl: {
            type: "structure",
            required: [ "assistantArn", "assistantAssociationArn", "assistantAssociationId", "assistantId", "associationData", "associationType" ],
            members: {
                assistantArn: {},
                assistantAssociationArn: {},
                assistantAssociationId: {},
                assistantId: {},
                associationData: {
                    shape: "Sm"
                },
                associationType: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        Sm: {
            type: "structure",
            members: {
                knowledgeBaseAssociation: {
                    type: "structure",
                    members: {
                        knowledgeBaseArn: {},
                        knowledgeBaseId: {}
                    }
                }
            },
            union: true
        },
        Sp: {
            type: "map",
            key: {},
            value: {}
        },
        St: {
            type: "structure",
            required: [ "contentArn", "contentId", "contentType", "knowledgeBaseArn", "knowledgeBaseId", "metadata", "name", "revisionId", "status", "title", "url", "urlExpiry" ],
            members: {
                contentArn: {},
                contentId: {},
                contentType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                linkOutUri: {},
                metadata: {
                    shape: "Sp"
                },
                name: {},
                revisionId: {},
                status: {},
                tags: {
                    shape: "S7"
                },
                title: {},
                url: {
                    shape: "Sw"
                },
                urlExpiry: {
                    shape: "Sx"
                }
            }
        },
        Sw: {
            type: "string",
            sensitive: true
        },
        Sx: {
            type: "timestamp",
            timestampFormat: "unixTimestamp"
        },
        S10: {
            type: "structure",
            members: {
                templateUri: {}
            }
        },
        S11: {
            type: "structure",
            members: {
                appIntegrations: {
                    type: "structure",
                    required: [ "appIntegrationArn", "objectFields" ],
                    members: {
                        appIntegrationArn: {},
                        objectFields: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            },
            union: true
        },
        S16: {
            type: "structure",
            required: [ "knowledgeBaseArn", "knowledgeBaseId", "knowledgeBaseType", "name", "status" ],
            members: {
                description: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                knowledgeBaseType: {},
                lastContentModificationTime: {
                    shape: "Sx"
                },
                name: {},
                renderingConfiguration: {
                    shape: "S10"
                },
                serverSideEncryptionConfiguration: {
                    shape: "S5"
                },
                sourceConfiguration: {
                    shape: "S11"
                },
                status: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S1a: {
            type: "structure",
            required: [ "name", "sessionArn", "sessionId" ],
            members: {
                description: {},
                name: {},
                sessionArn: {},
                sessionId: {},
                tags: {
                    shape: "S7"
                }
            }
        },
        S1r: {
            type: "structure",
            required: [ "contentArn", "contentId", "contentType", "knowledgeBaseArn", "knowledgeBaseId", "metadata", "name", "revisionId", "status", "title" ],
            members: {
                contentArn: {},
                contentId: {},
                contentType: {},
                knowledgeBaseArn: {},
                knowledgeBaseId: {},
                metadata: {
                    shape: "Sp"
                },
                name: {},
                revisionId: {},
                status: {},
                tags: {
                    shape: "S7"
                },
                title: {}
            }
        },
        S20: {
            type: "structure",
            required: [ "contentReference" ],
            members: {
                contentReference: {
                    type: "structure",
                    members: {
                        contentArn: {},
                        contentId: {},
                        knowledgeBaseArn: {},
                        knowledgeBaseId: {}
                    }
                },
                excerpt: {
                    shape: "S22"
                },
                title: {
                    shape: "S22"
                }
            }
        },
        S22: {
            type: "structure",
            members: {
                highlights: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            beginOffsetInclusive: {
                                type: "integer"
                            },
                            endOffsetExclusive: {
                                type: "integer"
                            }
                        }
                    }
                },
                text: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        S2f: {
            type: "string",
            sensitive: true
        },
        S2g: {
            type: "list",
            member: {}
        },
        S2w: {
            type: "list",
            member: {
                shape: "S1r"
            }
        },
        S3f: {
            type: "structure",
            required: [ "filters" ],
            members: {
                filters: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "field", "operator", "value" ],
                        members: {
                            field: {},
                            operator: {},
                            value: {}
                        }
                    }
                }
            }
        }
    },
    paginators: {
        ListAssistantAssociations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assistantAssociationSummaries"
        },
        ListAssistants: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "assistantSummaries"
        },
        ListContents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contentSummaries"
        },
        ListKnowledgeBases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "knowledgeBaseSummaries"
        },
        QueryAssistant: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "results"
        },
        SearchContent: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "contentSummaries"
        },
        SearchSessions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "sessionSummaries"
        }
    }
};

AWS.apiLoader.services["account"] = {};

AWS.Account = AWS.Service.defineService("account", [ "2021-02-01" ]);

AWS.apiLoader.services["account"]["2021-02-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-02-01",
        endpointPrefix: "account",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Account",
        serviceId: "Account",
        signatureVersion: "v4",
        signingName: "account",
        uid: "account-2021-02-01"
    },
    operations: {
        DeleteAlternateContact: {
            http: {
                requestUri: "/deleteAlternateContact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AlternateContactType" ],
                members: {
                    AccountId: {},
                    AlternateContactType: {}
                }
            },
            idempotent: true
        },
        GetAlternateContact: {
            http: {
                requestUri: "/getAlternateContact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AlternateContactType" ],
                members: {
                    AccountId: {},
                    AlternateContactType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    AlternateContact: {
                        type: "structure",
                        members: {
                            AlternateContactType: {},
                            EmailAddress: {
                                shape: "S7"
                            },
                            Name: {
                                shape: "S8"
                            },
                            PhoneNumber: {
                                shape: "S9"
                            },
                            Title: {
                                shape: "Sa"
                            }
                        }
                    }
                }
            }
        },
        GetContactInformation: {
            http: {
                requestUri: "/getContactInformation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    AccountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ContactInformation: {
                        shape: "Sd"
                    }
                }
            }
        },
        PutAlternateContact: {
            http: {
                requestUri: "/putAlternateContact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AlternateContactType", "EmailAddress", "Name", "PhoneNumber", "Title" ],
                members: {
                    AccountId: {},
                    AlternateContactType: {},
                    EmailAddress: {
                        shape: "S7"
                    },
                    Name: {
                        shape: "S8"
                    },
                    PhoneNumber: {
                        shape: "S9"
                    },
                    Title: {
                        shape: "Sa"
                    }
                }
            },
            idempotent: true
        },
        PutContactInformation: {
            http: {
                requestUri: "/putContactInformation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ContactInformation" ],
                members: {
                    AccountId: {},
                    ContactInformation: {
                        shape: "Sd"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S7: {
            type: "string",
            sensitive: true
        },
        S8: {
            type: "string",
            sensitive: true
        },
        S9: {
            type: "string",
            sensitive: true
        },
        Sa: {
            type: "string",
            sensitive: true
        },
        Sd: {
            type: "structure",
            required: [ "AddressLine1", "City", "CountryCode", "FullName", "PhoneNumber", "PostalCode" ],
            members: {
                AddressLine1: {
                    shape: "Se"
                },
                AddressLine2: {
                    shape: "Se"
                },
                AddressLine3: {
                    shape: "Se"
                },
                City: {
                    type: "string",
                    sensitive: true
                },
                CompanyName: {
                    type: "string",
                    sensitive: true
                },
                CountryCode: {
                    type: "string",
                    sensitive: true
                },
                DistrictOrCounty: {
                    type: "string",
                    sensitive: true
                },
                FullName: {
                    type: "string",
                    sensitive: true
                },
                PhoneNumber: {
                    type: "string",
                    sensitive: true
                },
                PostalCode: {
                    type: "string",
                    sensitive: true
                },
                StateOrRegion: {
                    type: "string",
                    sensitive: true
                },
                WebsiteUrl: {
                    type: "string",
                    sensitive: true
                }
            }
        },
        Se: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {}
};

AWS.apiLoader.services["cloudcontrol"] = {};

AWS.CloudControl = AWS.Service.defineService("cloudcontrol", [ "2021-09-30" ]);

AWS.apiLoader.services["cloudcontrol"]["2021-09-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-09-30",
        endpointPrefix: "cloudcontrolapi",
        jsonVersion: "1.0",
        protocol: "json",
        serviceAbbreviation: "CloudControlApi",
        serviceFullName: "AWS Cloud Control API",
        serviceId: "CloudControl",
        signatureVersion: "v4",
        signingName: "cloudcontrolapi",
        targetPrefix: "CloudApiService",
        uid: "cloudcontrol-2021-09-30"
    },
    operations: {
        CancelResourceRequest: {
            input: {
                type: "structure",
                required: [ "RequestToken" ],
                members: {
                    RequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            },
            idempotent: true
        },
        CreateResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "DesiredState" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DesiredState: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        },
        DeleteResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "Identifier" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        },
        GetResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "Identifier" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    Identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    TypeName: {},
                    ResourceDescription: {
                        shape: "Sm"
                    }
                }
            }
        },
        GetResourceRequestStatus: {
            input: {
                type: "structure",
                required: [ "RequestToken" ],
                members: {
                    RequestToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        },
        ListResourceRequests: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ResourceRequestStatusFilter: {
                        type: "structure",
                        members: {
                            Operations: {
                                type: "list",
                                member: {}
                            },
                            OperationStatuses: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceRequestStatusSummaries: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListResources: {
            input: {
                type: "structure",
                required: [ "TypeName" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    },
                    ResourceModel: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    TypeName: {},
                    ResourceDescriptions: {
                        type: "list",
                        member: {
                            shape: "Sm"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        UpdateResource: {
            input: {
                type: "structure",
                required: [ "TypeName", "Identifier", "PatchDocument" ],
                members: {
                    TypeName: {},
                    TypeVersionId: {},
                    RoleArn: {},
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Identifier: {},
                    PatchDocument: {
                        type: "string",
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ProgressEvent: {
                        shape: "S4"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                TypeName: {},
                Identifier: {},
                RequestToken: {},
                Operation: {},
                OperationStatus: {},
                EventTime: {
                    type: "timestamp"
                },
                ResourceModel: {
                    shape: "Sa"
                },
                StatusMessage: {},
                ErrorCode: {},
                RetryAfter: {
                    type: "timestamp"
                }
            }
        },
        Sa: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "structure",
            members: {
                Identifier: {},
                Properties: {
                    shape: "Sa"
                }
            }
        }
    },
    paginators: {
        ListResourceRequests: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceRequestStatusSummaries"
        },
        ListResources: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ResourceDescriptions"
        }
    },
    waiters: {
        ResourceRequestSuccess: {
            description: "Wait until resource operation request is successful",
            delay: 5,
            maxAttempts: 24,
            operation: "GetResourceRequestStatus",
            acceptors: [ {
                matcher: "path",
                argument: "ProgressEvent.OperationStatus",
                state: "success",
                expected: "SUCCESS"
            }, {
                matcher: "path",
                argument: "ProgressEvent.OperationStatus",
                state: "failure",
                expected: "FAILED"
            }, {
                matcher: "path",
                argument: "ProgressEvent.OperationStatus",
                state: "failure",
                expected: "CANCEL_COMPLETE"
            } ]
        }
    }
};

AWS.apiLoader.services["grafana"] = {};

AWS.Grafana = AWS.Service.defineService("grafana", [ "2020-08-18" ]);

AWS.apiLoader.services["grafana"]["2020-08-18"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-08-18",
        endpointPrefix: "grafana",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Managed Grafana",
        serviceId: "grafana",
        signatureVersion: "v4",
        signingName: "grafana",
        uid: "grafana-2020-08-18"
    },
    operations: {
        AssociateLicense: {
            http: {
                requestUri: "/workspaces/{workspaceId}/licenses/{licenseType}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "licenseType", "workspaceId" ],
                members: {
                    licenseType: {
                        location: "uri",
                        locationName: "licenseType"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateWorkspace: {
            http: {
                requestUri: "/workspaces",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "accountAccessType", "authenticationProviders", "permissionType" ],
                members: {
                    accountAccessType: {},
                    authenticationProviders: {
                        shape: "S8"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    organizationRoleName: {
                        shape: "Sl"
                    },
                    permissionType: {},
                    stackSetName: {},
                    tags: {
                        shape: "Sr"
                    },
                    workspaceDataSources: {
                        shape: "Sc"
                    },
                    workspaceDescription: {
                        shape: "Se"
                    },
                    workspaceName: {
                        shape: "Si"
                    },
                    workspaceNotificationDestinations: {
                        shape: "Sj"
                    },
                    workspaceOrganizationalUnits: {
                        shape: "Sm"
                    },
                    workspaceRoleArn: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        CreateWorkspaceApiKey: {
            http: {
                requestUri: "/workspaces/{workspaceId}/apikeys",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "keyName", "keyRole", "secondsToLive", "workspaceId" ],
                members: {
                    keyName: {},
                    keyRole: {},
                    secondsToLive: {
                        type: "integer"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "key", "keyName", "workspaceId" ],
                members: {
                    key: {
                        type: "string",
                        sensitive: true
                    },
                    keyName: {},
                    workspaceId: {}
                }
            }
        },
        DeleteWorkspace: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        DeleteWorkspaceApiKey: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/apikeys/{keyName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "keyName", "workspaceId" ],
                members: {
                    keyName: {
                        location: "uri",
                        locationName: "keyName"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "keyName", "workspaceId" ],
                members: {
                    keyName: {},
                    workspaceId: {}
                }
            }
        },
        DescribeWorkspace: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        DescribeWorkspaceAuthentication: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/authentication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "authentication" ],
                members: {
                    authentication: {
                        shape: "S1c"
                    }
                }
            }
        },
        DisassociateLicense: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/licenses/{licenseType}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "licenseType", "workspaceId" ],
                members: {
                    licenseType: {
                        location: "uri",
                        locationName: "licenseType"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        ListPermissions: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/permissions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    groupId: {
                        location: "querystring",
                        locationName: "groupId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    userId: {
                        location: "querystring",
                        locationName: "userId"
                    },
                    userType: {
                        location: "querystring",
                        locationName: "userType"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "permissions" ],
                members: {
                    nextToken: {},
                    permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "role", "user" ],
                            members: {
                                role: {},
                                user: {
                                    shape: "S22"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sr"
                    }
                }
            }
        },
        ListWorkspaces: {
            http: {
                method: "GET",
                requestUri: "/workspaces",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspaces" ],
                members: {
                    nextToken: {},
                    workspaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "authentication", "created", "endpoint", "grafanaVersion", "id", "modified", "status" ],
                            members: {
                                authentication: {
                                    shape: "S7"
                                },
                                created: {
                                    type: "timestamp"
                                },
                                description: {
                                    shape: "Se"
                                },
                                endpoint: {},
                                grafanaVersion: {},
                                id: {},
                                modified: {
                                    type: "timestamp"
                                },
                                name: {
                                    shape: "Si"
                                },
                                notificationDestinations: {
                                    shape: "Sj"
                                },
                                status: {},
                                tags: {
                                    shape: "Sr"
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sr"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdatePermissions: {
            http: {
                method: "PATCH",
                requestUri: "/workspaces/{workspaceId}/permissions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "updateInstructionBatch", "workspaceId" ],
                members: {
                    updateInstructionBatch: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errors" ],
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "causedBy", "code", "message" ],
                            members: {
                                causedBy: {
                                    shape: "S2h"
                                },
                                code: {
                                    type: "integer"
                                },
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        UpdateWorkspace: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    accountAccessType: {},
                    organizationRoleName: {
                        shape: "Sl"
                    },
                    permissionType: {},
                    stackSetName: {},
                    workspaceDataSources: {
                        shape: "Sc"
                    },
                    workspaceDescription: {
                        shape: "Se"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    },
                    workspaceName: {
                        shape: "Si"
                    },
                    workspaceNotificationDestinations: {
                        shape: "Sj"
                    },
                    workspaceOrganizationalUnits: {
                        shape: "Sm"
                    },
                    workspaceRoleArn: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workspace" ],
                members: {
                    workspace: {
                        shape: "S5"
                    }
                }
            }
        },
        UpdateWorkspaceAuthentication: {
            http: {
                requestUri: "/workspaces/{workspaceId}/authentication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "authenticationProviders", "workspaceId" ],
                members: {
                    authenticationProviders: {
                        shape: "S8"
                    },
                    samlConfiguration: {
                        shape: "S1g"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "authentication" ],
                members: {
                    authentication: {
                        shape: "S1c"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            required: [ "authentication", "created", "dataSources", "endpoint", "grafanaVersion", "id", "modified", "status" ],
            members: {
                accountAccessType: {},
                authentication: {
                    shape: "S7"
                },
                created: {
                    type: "timestamp"
                },
                dataSources: {
                    shape: "Sc"
                },
                description: {
                    shape: "Se"
                },
                endpoint: {},
                freeTrialConsumed: {
                    type: "boolean"
                },
                freeTrialExpiration: {
                    type: "timestamp"
                },
                grafanaVersion: {},
                id: {},
                licenseExpiration: {
                    type: "timestamp"
                },
                licenseType: {},
                modified: {
                    type: "timestamp"
                },
                name: {
                    shape: "Si"
                },
                notificationDestinations: {
                    shape: "Sj"
                },
                organizationRoleName: {
                    shape: "Sl"
                },
                organizationalUnits: {
                    shape: "Sm"
                },
                permissionType: {},
                stackSetName: {},
                status: {},
                tags: {
                    shape: "Sr"
                },
                workspaceRoleArn: {
                    shape: "Su"
                }
            }
        },
        S7: {
            type: "structure",
            required: [ "providers" ],
            members: {
                providers: {
                    shape: "S8"
                },
                samlConfigurationStatus: {}
            }
        },
        S8: {
            type: "list",
            member: {}
        },
        Sc: {
            type: "list",
            member: {}
        },
        Se: {
            type: "string",
            sensitive: true
        },
        Si: {
            type: "string",
            sensitive: true
        },
        Sj: {
            type: "list",
            member: {}
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "list",
            member: {},
            sensitive: true
        },
        Sr: {
            type: "map",
            key: {},
            value: {}
        },
        Su: {
            type: "string",
            sensitive: true
        },
        S1c: {
            type: "structure",
            required: [ "providers" ],
            members: {
                awsSso: {
                    type: "structure",
                    members: {
                        ssoClientId: {}
                    }
                },
                providers: {
                    shape: "S8"
                },
                saml: {
                    type: "structure",
                    required: [ "status" ],
                    members: {
                        configuration: {
                            shape: "S1g"
                        },
                        status: {}
                    }
                }
            }
        },
        S1g: {
            type: "structure",
            required: [ "idpMetadata" ],
            members: {
                allowedOrganizations: {
                    type: "list",
                    member: {}
                },
                assertionAttributes: {
                    type: "structure",
                    members: {
                        email: {},
                        groups: {},
                        login: {},
                        name: {},
                        org: {},
                        role: {}
                    }
                },
                idpMetadata: {
                    type: "structure",
                    members: {
                        url: {},
                        xml: {}
                    },
                    union: true
                },
                loginValidityDuration: {
                    type: "integer"
                },
                roleValues: {
                    type: "structure",
                    members: {
                        admin: {
                            shape: "S1p"
                        },
                        editor: {
                            shape: "S1p"
                        }
                    }
                }
            }
        },
        S1p: {
            type: "list",
            member: {}
        },
        S22: {
            type: "structure",
            required: [ "id", "type" ],
            members: {
                id: {},
                type: {}
            }
        },
        S2h: {
            type: "structure",
            required: [ "action", "role", "users" ],
            members: {
                action: {},
                role: {},
                users: {
                    type: "list",
                    member: {
                        shape: "S22"
                    }
                }
            }
        }
    },
    paginators: {
        ListPermissions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "permissions"
        },
        ListWorkspaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workspaces"
        }
    }
};

AWS.apiLoader.services["panorama"] = {};

AWS.Panorama = AWS.Service.defineService("panorama", [ "2019-07-24" ]);

AWS.apiLoader.services["panorama"]["2019-07-24"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2019-07-24",
        endpointPrefix: "panorama",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Panorama",
        serviceFullName: "AWS Panorama",
        serviceId: "Panorama",
        signatureVersion: "v4",
        signingName: "panorama",
        uid: "panorama-2019-07-24"
    },
    operations: {
        CreateApplicationInstance: {
            http: {
                requestUri: "/application-instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DefaultRuntimeContextDevice", "ManifestPayload" ],
                members: {
                    ApplicationInstanceIdToReplace: {},
                    DefaultRuntimeContextDevice: {},
                    Description: {},
                    ManifestOverridesPayload: {
                        shape: "S5"
                    },
                    ManifestPayload: {
                        shape: "S7"
                    },
                    Name: {},
                    RuntimeRoleArn: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {}
                }
            }
        },
        CreateJobForDevices: {
            http: {
                requestUri: "/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceIds", "JobType" ],
                members: {
                    DeviceIds: {
                        type: "list",
                        member: {}
                    },
                    DeviceJobConfig: {
                        type: "structure",
                        members: {
                            OTAJobConfig: {
                                type: "structure",
                                required: [ "ImageVersion" ],
                                members: {
                                    ImageVersion: {}
                                }
                            }
                        }
                    },
                    JobType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "Jobs" ],
                members: {
                    Jobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeviceId: {},
                                JobId: {}
                            }
                        }
                    }
                }
            }
        },
        CreateNodeFromTemplateJob: {
            http: {
                requestUri: "/packages/template-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "NodeName", "OutputPackageName", "OutputPackageVersion", "TemplateParameters", "TemplateType" ],
                members: {
                    JobTags: {
                        shape: "Sr"
                    },
                    NodeDescription: {},
                    NodeName: {},
                    OutputPackageName: {},
                    OutputPackageVersion: {},
                    TemplateParameters: {
                        shape: "Sx"
                    },
                    TemplateType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            }
        },
        CreatePackage: {
            http: {
                requestUri: "/packages",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageName" ],
                members: {
                    PackageName: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "StorageLocation" ],
                members: {
                    Arn: {},
                    PackageId: {},
                    StorageLocation: {
                        shape: "S16"
                    }
                }
            }
        },
        CreatePackageImportJob: {
            http: {
                requestUri: "/packages/import-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ClientToken", "InputConfig", "JobType", "OutputConfig" ],
                members: {
                    ClientToken: {},
                    InputConfig: {
                        shape: "S1b"
                    },
                    JobTags: {
                        shape: "Sr"
                    },
                    JobType: {},
                    OutputConfig: {
                        shape: "S1i"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {}
                }
            }
        },
        DeleteDevice: {
            http: {
                method: "DELETE",
                requestUri: "/devices/{DeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceId: {}
                }
            }
        },
        DeletePackage: {
            http: {
                method: "DELETE",
                requestUri: "/packages/{PackageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId" ],
                members: {
                    ForceDelete: {
                        location: "querystring",
                        locationName: "ForceDelete",
                        type: "boolean"
                    },
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeregisterPackageVersion: {
            http: {
                method: "DELETE",
                requestUri: "/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId", "PackageVersion", "PatchVersion" ],
                members: {
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "OwnerAccount"
                    },
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    PackageVersion: {
                        location: "uri",
                        locationName: "PackageVersion"
                    },
                    PatchVersion: {
                        location: "uri",
                        locationName: "PatchVersion"
                    },
                    UpdatedLatestPatchVersion: {
                        location: "querystring",
                        locationName: "UpdatedLatestPatchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DescribeApplicationInstance: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{ApplicationInstanceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInstanceId: {},
                    ApplicationInstanceIdToReplace: {},
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DefaultRuntimeContextDevice: {},
                    DefaultRuntimeContextDeviceName: {},
                    Description: {},
                    HealthStatus: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    RuntimeContextStates: {
                        shape: "S21"
                    },
                    RuntimeRoleArn: {},
                    Status: {},
                    StatusDescription: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        DescribeApplicationInstanceDetails: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{ApplicationInstanceId}/details",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInstanceId: {},
                    ApplicationInstanceIdToReplace: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DefaultRuntimeContextDevice: {},
                    Description: {},
                    ManifestOverridesPayload: {
                        shape: "S5"
                    },
                    ManifestPayload: {
                        shape: "S7"
                    },
                    Name: {}
                }
            }
        },
        DescribeDevice: {
            http: {
                method: "GET",
                requestUri: "/devices/{DeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId" ],
                members: {
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AlternateSoftwares: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Version: {}
                            }
                        }
                    },
                    Arn: {},
                    Brand: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    CurrentNetworkingStatus: {
                        type: "structure",
                        members: {
                            Ethernet0Status: {
                                shape: "S2j"
                            },
                            Ethernet1Status: {
                                shape: "S2j"
                            },
                            LastUpdatedTime: {
                                type: "timestamp"
                            },
                            NtpStatus: {
                                type: "structure",
                                members: {
                                    ConnectionStatus: {},
                                    IpAddress: {},
                                    NtpServerName: {}
                                }
                            }
                        }
                    },
                    CurrentSoftware: {},
                    Description: {},
                    DeviceAggregatedStatus: {},
                    DeviceConnectionStatus: {},
                    DeviceId: {},
                    LatestAlternateSoftware: {},
                    LatestDeviceJob: {
                        shape: "S2u"
                    },
                    LatestSoftware: {},
                    LeaseExpirationTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    NetworkingConfiguration: {
                        shape: "S2y"
                    },
                    ProvisioningStatus: {},
                    SerialNumber: {},
                    Tags: {
                        shape: "Sb"
                    },
                    Type: {}
                }
            }
        },
        DescribeDeviceJob: {
            http: {
                method: "GET",
                requestUri: "/jobs/{JobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CreatedTime: {
                        type: "timestamp"
                    },
                    DeviceArn: {},
                    DeviceId: {},
                    DeviceName: {},
                    DeviceType: {},
                    ImageVersion: {},
                    JobId: {},
                    JobType: {},
                    Status: {}
                }
            }
        },
        DescribeNode: {
            http: {
                method: "GET",
                requestUri: "/nodes/{NodeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "NodeId" ],
                members: {
                    NodeId: {
                        location: "uri",
                        locationName: "NodeId"
                    },
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "OwnerAccount"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Category", "CreatedTime", "Description", "LastUpdatedTime", "Name", "NodeId", "NodeInterface", "OwnerAccount", "PackageId", "PackageName", "PackageVersion", "PatchVersion" ],
                members: {
                    AssetName: {},
                    Category: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    NodeId: {},
                    NodeInterface: {
                        type: "structure",
                        required: [ "Inputs", "Outputs" ],
                        members: {
                            Inputs: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        DefaultValue: {},
                                        Description: {},
                                        MaxConnections: {
                                            type: "integer"
                                        },
                                        Name: {},
                                        Type: {}
                                    }
                                }
                            },
                            Outputs: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        Description: {},
                                        Name: {},
                                        Type: {}
                                    }
                                }
                            }
                        }
                    },
                    OwnerAccount: {},
                    PackageArn: {},
                    PackageId: {},
                    PackageName: {},
                    PackageVersion: {},
                    PatchVersion: {}
                }
            }
        },
        DescribeNodeFromTemplateJob: {
            http: {
                method: "GET",
                requestUri: "/packages/template-job/{JobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreatedTime", "JobId", "LastUpdatedTime", "NodeName", "OutputPackageName", "OutputPackageVersion", "Status", "StatusMessage", "TemplateParameters", "TemplateType" ],
                members: {
                    CreatedTime: {
                        type: "timestamp"
                    },
                    JobId: {},
                    JobTags: {
                        shape: "Sr"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    NodeDescription: {},
                    NodeName: {},
                    OutputPackageName: {},
                    OutputPackageVersion: {},
                    Status: {},
                    StatusMessage: {},
                    TemplateParameters: {
                        shape: "Sx"
                    },
                    TemplateType: {}
                }
            }
        },
        DescribePackage: {
            http: {
                method: "GET",
                requestUri: "/packages/metadata/{PackageId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId" ],
                members: {
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "CreatedTime", "PackageId", "PackageName", "StorageLocation", "Tags" ],
                members: {
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    PackageId: {},
                    PackageName: {},
                    ReadAccessPrincipalArns: {
                        shape: "S3z"
                    },
                    StorageLocation: {
                        shape: "S16"
                    },
                    Tags: {
                        shape: "Sb"
                    },
                    WriteAccessPrincipalArns: {
                        shape: "S3z"
                    }
                }
            }
        },
        DescribePackageImportJob: {
            http: {
                method: "GET",
                requestUri: "/packages/import-jobs/{JobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "JobId" ],
                members: {
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "CreatedTime", "InputConfig", "JobId", "JobType", "LastUpdatedTime", "Output", "OutputConfig", "Status", "StatusMessage" ],
                members: {
                    ClientToken: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    InputConfig: {
                        shape: "S1b"
                    },
                    JobId: {},
                    JobTags: {
                        shape: "Sr"
                    },
                    JobType: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Output: {
                        type: "structure",
                        required: [ "OutputS3Location", "PackageId", "PackageVersion", "PatchVersion" ],
                        members: {
                            OutputS3Location: {
                                type: "structure",
                                required: [ "BucketName", "ObjectKey" ],
                                members: {
                                    BucketName: {},
                                    ObjectKey: {}
                                }
                            },
                            PackageId: {},
                            PackageVersion: {},
                            PatchVersion: {}
                        }
                    },
                    OutputConfig: {
                        shape: "S1i"
                    },
                    Status: {},
                    StatusMessage: {}
                }
            }
        },
        DescribePackageVersion: {
            http: {
                method: "GET",
                requestUri: "/packages/metadata/{PackageId}/versions/{PackageVersion}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId", "PackageVersion" ],
                members: {
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "OwnerAccount"
                    },
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    PackageVersion: {
                        location: "uri",
                        locationName: "PackageVersion"
                    },
                    PatchVersion: {
                        location: "querystring",
                        locationName: "PatchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "IsLatestPatch", "PackageId", "PackageName", "PackageVersion", "PatchVersion", "Status" ],
                members: {
                    IsLatestPatch: {
                        type: "boolean"
                    },
                    OwnerAccount: {},
                    PackageArn: {},
                    PackageId: {},
                    PackageName: {},
                    PackageVersion: {},
                    PatchVersion: {},
                    RegisteredTime: {
                        type: "timestamp"
                    },
                    Status: {},
                    StatusDescription: {}
                }
            }
        },
        ListApplicationInstanceDependencies: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{ApplicationInstanceId}/package-dependencies",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    PackageObjects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "PackageVersion", "PatchVersion" ],
                            members: {
                                Name: {},
                                PackageVersion: {},
                                PatchVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListApplicationInstanceNodeInstances: {
            http: {
                method: "GET",
                requestUri: "/application-instances/{ApplicationInstanceId}/node-instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    NodeInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "CurrentStatus", "NodeInstanceId" ],
                            members: {
                                CurrentStatus: {},
                                NodeId: {},
                                NodeInstanceId: {},
                                NodeName: {},
                                PackageName: {},
                                PackagePatchVersion: {},
                                PackageVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListApplicationInstances: {
            http: {
                method: "GET",
                requestUri: "/application-instances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "querystring",
                        locationName: "deviceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    StatusFilter: {
                        location: "querystring",
                        locationName: "statusFilter"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationInstances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationInstanceId: {},
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                DefaultRuntimeContextDevice: {},
                                DefaultRuntimeContextDeviceName: {},
                                Description: {},
                                HealthStatus: {},
                                Name: {},
                                RuntimeContextStates: {
                                    shape: "S21"
                                },
                                Status: {},
                                StatusDescription: {},
                                Tags: {
                                    shape: "Sb"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDevices: {
            http: {
                method: "GET",
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceAggregatedStatusFilter: {
                        location: "querystring",
                        locationName: "DeviceAggregatedStatusFilter"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NameFilter: {
                        location: "querystring",
                        locationName: "NameFilter"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    SortBy: {
                        location: "querystring",
                        locationName: "SortBy"
                    },
                    SortOrder: {
                        location: "querystring",
                        locationName: "SortOrder"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Devices" ],
                members: {
                    Devices: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Brand: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                CurrentSoftware: {},
                                Description: {},
                                DeviceAggregatedStatus: {},
                                DeviceId: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                LatestDeviceJob: {
                                    shape: "S2u"
                                },
                                LeaseExpirationTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                ProvisioningStatus: {},
                                Tags: {
                                    shape: "Sb"
                                },
                                Type: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListDevicesJobs: {
            http: {
                method: "GET",
                requestUri: "/jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    DeviceId: {
                        location: "querystring",
                        locationName: "DeviceId"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                DeviceId: {},
                                DeviceName: {},
                                JobId: {},
                                JobType: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListNodeFromTemplateJobs: {
            http: {
                method: "GET",
                requestUri: "/packages/template-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "NodeFromTemplateJobs" ],
                members: {
                    NextToken: {},
                    NodeFromTemplateJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                JobId: {},
                                NodeName: {},
                                Status: {},
                                StatusMessage: {},
                                TemplateType: {}
                            }
                        }
                    }
                }
            }
        },
        ListNodes: {
            http: {
                method: "GET",
                requestUri: "/nodes",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Category: {
                        location: "querystring",
                        locationName: "category"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    OwnerAccount: {
                        location: "querystring",
                        locationName: "ownerAccount"
                    },
                    PackageName: {
                        location: "querystring",
                        locationName: "packageName"
                    },
                    PackageVersion: {
                        location: "querystring",
                        locationName: "packageVersion"
                    },
                    PatchVersion: {
                        location: "querystring",
                        locationName: "patchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Nodes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Category", "CreatedTime", "Name", "NodeId", "PackageId", "PackageName", "PackageVersion", "PatchVersion" ],
                            members: {
                                Category: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Description: {},
                                Name: {},
                                NodeId: {},
                                OwnerAccount: {},
                                PackageArn: {},
                                PackageId: {},
                                PackageName: {},
                                PackageVersion: {},
                                PatchVersion: {}
                            }
                        }
                    }
                }
            }
        },
        ListPackageImportJobs: {
            http: {
                method: "GET",
                requestUri: "/packages/import-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "PackageImportJobs" ],
                members: {
                    NextToken: {},
                    PackageImportJobs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                JobId: {},
                                JobType: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    }
                }
            }
        },
        ListPackages: {
            http: {
                method: "GET",
                requestUri: "/packages",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Packages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                PackageId: {},
                                PackageName: {},
                                Tags: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        ProvisionDevice: {
            http: {
                requestUri: "/devices",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Description: {},
                    Name: {},
                    NetworkingConfiguration: {
                        shape: "S2y"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Arn", "Status" ],
                members: {
                    Arn: {},
                    Certificates: {
                        type: "blob"
                    },
                    DeviceId: {},
                    IotThingName: {},
                    Status: {}
                }
            }
        },
        RegisterPackageVersion: {
            http: {
                method: "PUT",
                requestUri: "/packages/{PackageId}/versions/{PackageVersion}/patch/{PatchVersion}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PackageId", "PackageVersion", "PatchVersion" ],
                members: {
                    MarkLatest: {
                        type: "boolean"
                    },
                    OwnerAccount: {},
                    PackageId: {
                        location: "uri",
                        locationName: "PackageId"
                    },
                    PackageVersion: {
                        location: "uri",
                        locationName: "PackageVersion"
                    },
                    PatchVersion: {
                        location: "uri",
                        locationName: "PatchVersion"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        RemoveApplicationInstance: {
            http: {
                method: "DELETE",
                requestUri: "/application-instances/{ApplicationInstanceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SignalApplicationInstanceNodeInstances: {
            http: {
                method: "PUT",
                requestUri: "/application-instances/{ApplicationInstanceId}/node-signals",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationInstanceId", "NodeSignals" ],
                members: {
                    ApplicationInstanceId: {
                        location: "uri",
                        locationName: "ApplicationInstanceId"
                    },
                    NodeSignals: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "NodeInstanceId", "Signal" ],
                            members: {
                                NodeInstanceId: {},
                                Signal: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ApplicationInstanceId" ],
                members: {
                    ApplicationInstanceId: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateDeviceMetadata: {
            http: {
                method: "PUT",
                requestUri: "/devices/{DeviceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "DeviceId" ],
                members: {
                    Description: {},
                    DeviceId: {
                        location: "uri",
                        locationName: "DeviceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DeviceId: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                PayloadData: {}
            },
            union: true
        },
        S7: {
            type: "structure",
            members: {
                PayloadData: {}
            },
            union: true
        },
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ResourceType", "Tags" ],
                members: {
                    ResourceType: {},
                    Tags: {
                        shape: "Sb"
                    }
                }
            }
        },
        Sx: {
            type: "map",
            key: {},
            value: {
                type: "string",
                sensitive: true
            }
        },
        S16: {
            type: "structure",
            required: [ "BinaryPrefixLocation", "Bucket", "GeneratedPrefixLocation", "ManifestPrefixLocation", "RepoPrefixLocation" ],
            members: {
                BinaryPrefixLocation: {},
                Bucket: {},
                GeneratedPrefixLocation: {},
                ManifestPrefixLocation: {},
                RepoPrefixLocation: {}
            }
        },
        S1b: {
            type: "structure",
            members: {
                PackageVersionInputConfig: {
                    type: "structure",
                    required: [ "S3Location" ],
                    members: {
                        S3Location: {
                            type: "structure",
                            required: [ "BucketName", "ObjectKey" ],
                            members: {
                                BucketName: {},
                                ObjectKey: {},
                                Region: {}
                            }
                        }
                    }
                }
            }
        },
        S1i: {
            type: "structure",
            members: {
                PackageVersionOutputConfig: {
                    type: "structure",
                    required: [ "PackageName", "PackageVersion" ],
                    members: {
                        MarkLatest: {
                            type: "boolean"
                        },
                        PackageName: {},
                        PackageVersion: {}
                    }
                }
            }
        },
        S21: {
            type: "list",
            member: {
                type: "structure",
                required: [ "DesiredState", "DeviceReportedStatus", "DeviceReportedTime", "RuntimeContextName" ],
                members: {
                    DesiredState: {},
                    DeviceReportedStatus: {},
                    DeviceReportedTime: {
                        type: "timestamp"
                    },
                    RuntimeContextName: {}
                }
            }
        },
        S2j: {
            type: "structure",
            members: {
                ConnectionStatus: {},
                HwAddress: {},
                IpAddress: {}
            }
        },
        S2u: {
            type: "structure",
            members: {
                ImageVersion: {},
                JobType: {},
                Status: {}
            }
        },
        S2y: {
            type: "structure",
            members: {
                Ethernet0: {
                    shape: "S2z"
                },
                Ethernet1: {
                    shape: "S2z"
                },
                Ntp: {
                    type: "structure",
                    required: [ "NtpServers" ],
                    members: {
                        NtpServers: {
                            type: "list",
                            member: {}
                        }
                    }
                }
            }
        },
        S2z: {
            type: "structure",
            required: [ "ConnectionType" ],
            members: {
                ConnectionType: {},
                StaticIpConnectionInfo: {
                    type: "structure",
                    required: [ "DefaultGateway", "Dns", "IpAddress", "Mask" ],
                    members: {
                        DefaultGateway: {},
                        Dns: {
                            type: "list",
                            member: {}
                        },
                        IpAddress: {},
                        Mask: {}
                    }
                }
            }
        },
        S3z: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListApplicationInstanceDependencies: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListApplicationInstanceNodeInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListApplicationInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDevices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListDevicesJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNodeFromTemplateJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListNodes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPackageImportJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListPackages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["chimesdkmeetings"] = {};

AWS.ChimeSDKMeetings = AWS.Service.defineService("chimesdkmeetings", [ "2021-07-15" ]);

AWS.apiLoader.services["chimesdkmeetings"]["2021-07-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-07-15",
        endpointPrefix: "meetings-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Meetings",
        serviceId: "Chime SDK Meetings",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-meetings-2021-07-15"
    },
    operations: {
        BatchCreateAttendee: {
            http: {
                requestUri: "/meetings/{MeetingId}/attendees?operation=batch-create"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "Attendees" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "S9"
                    },
                    Errors: {
                        shape: "Sc"
                    }
                }
            }
        },
        BatchUpdateAttendeeCapabilitiesExcept: {
            http: {
                method: "PUT",
                requestUri: "/meetings/{MeetingId}/attendees/capabilities?operation=batch-update-except",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "ExcludedAttendeeIds", "Capabilities" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    ExcludedAttendeeIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "AttendeeId" ],
                            members: {
                                AttendeeId: {}
                            }
                        }
                    },
                    Capabilities: {
                        shape: "S6"
                    }
                }
            }
        },
        CreateAttendee: {
            http: {
                requestUri: "/meetings/{MeetingId}/attendees"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "ExternalUserId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    ExternalUserId: {
                        shape: "S5"
                    },
                    Capabilities: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateMeeting: {
            http: {
                requestUri: "/meetings"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "MediaRegion", "ExternalMeetingId" ],
                members: {
                    ClientRequestToken: {
                        shape: "Sl",
                        idempotencyToken: true
                    },
                    MediaRegion: {},
                    MeetingHostId: {
                        shape: "S5"
                    },
                    ExternalMeetingId: {
                        shape: "Sn"
                    },
                    NotificationsConfiguration: {
                        shape: "So"
                    },
                    MeetingFeatures: {
                        shape: "Sq"
                    },
                    PrimaryMeetingId: {},
                    TenantIds: {
                        shape: "Su"
                    },
                    Tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S11"
                    }
                }
            }
        },
        CreateMeetingWithAttendees: {
            http: {
                requestUri: "/meetings?operation=create-attendees"
            },
            input: {
                type: "structure",
                required: [ "ClientRequestToken", "MediaRegion", "ExternalMeetingId", "Attendees" ],
                members: {
                    ClientRequestToken: {
                        shape: "Sl",
                        idempotencyToken: true
                    },
                    MediaRegion: {},
                    MeetingHostId: {
                        shape: "S5"
                    },
                    ExternalMeetingId: {
                        shape: "Sn"
                    },
                    MeetingFeatures: {
                        shape: "Sq"
                    },
                    NotificationsConfiguration: {
                        shape: "So"
                    },
                    Attendees: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    PrimaryMeetingId: {},
                    TenantIds: {
                        shape: "Su"
                    },
                    Tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S11"
                    },
                    Attendees: {
                        shape: "S9"
                    },
                    Errors: {
                        shape: "Sc"
                    }
                }
            }
        },
        DeleteAttendee: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{MeetingId}/attendees/{AttendeeId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "AttendeeId"
                    }
                }
            }
        },
        DeleteMeeting: {
            http: {
                method: "DELETE",
                requestUri: "/meetings/{MeetingId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    }
                }
            }
        },
        GetAttendee: {
            http: {
                method: "GET",
                requestUri: "/meetings/{MeetingId}/attendees/{AttendeeId}"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "AttendeeId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Sa"
                    }
                }
            }
        },
        GetMeeting: {
            http: {
                method: "GET",
                requestUri: "/meetings/{MeetingId}"
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Meeting: {
                        shape: "S11"
                    }
                }
            }
        },
        ListAttendees: {
            http: {
                method: "GET",
                requestUri: "/meetings/{MeetingId}/attendees",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendees: {
                        shape: "S9"
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sw"
                    }
                }
            }
        },
        StartMeetingTranscription: {
            http: {
                requestUri: "/meetings/{MeetingId}/transcription?operation=start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "TranscriptionConfiguration" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    TranscriptionConfiguration: {
                        type: "structure",
                        members: {
                            EngineTranscribeSettings: {
                                type: "structure",
                                members: {
                                    LanguageCode: {},
                                    VocabularyFilterMethod: {},
                                    VocabularyFilterName: {},
                                    VocabularyName: {},
                                    Region: {},
                                    EnablePartialResultsStabilization: {
                                        type: "boolean"
                                    },
                                    PartialResultsStability: {},
                                    ContentIdentificationType: {},
                                    ContentRedactionType: {},
                                    PiiEntityTypes: {},
                                    LanguageModelName: {},
                                    IdentifyLanguage: {
                                        type: "boolean"
                                    },
                                    LanguageOptions: {},
                                    PreferredLanguage: {}
                                }
                            },
                            EngineTranscribeMedicalSettings: {
                                type: "structure",
                                required: [ "LanguageCode", "Specialty", "Type" ],
                                members: {
                                    LanguageCode: {},
                                    Specialty: {},
                                    Type: {},
                                    VocabularyName: {},
                                    Region: {},
                                    ContentIdentificationType: {}
                                }
                            }
                        }
                    }
                }
            }
        },
        StopMeetingTranscription: {
            http: {
                requestUri: "/meetings/{MeetingId}/transcription?operation=stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MeetingId" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateAttendeeCapabilities: {
            http: {
                method: "PUT",
                requestUri: "/meetings/{MeetingId}/attendees/{AttendeeId}/capabilities"
            },
            input: {
                type: "structure",
                required: [ "MeetingId", "AttendeeId", "Capabilities" ],
                members: {
                    MeetingId: {
                        location: "uri",
                        locationName: "MeetingId"
                    },
                    AttendeeId: {
                        location: "uri",
                        locationName: "AttendeeId"
                    },
                    Capabilities: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Attendee: {
                        shape: "Sa"
                    }
                }
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "ExternalUserId" ],
            members: {
                ExternalUserId: {
                    shape: "S5"
                },
                Capabilities: {
                    shape: "S6"
                }
            }
        },
        S5: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "structure",
            required: [ "Audio", "Video", "Content" ],
            members: {
                Audio: {},
                Video: {},
                Content: {}
            }
        },
        S9: {
            type: "list",
            member: {
                shape: "Sa"
            }
        },
        Sa: {
            type: "structure",
            members: {
                ExternalUserId: {
                    shape: "S5"
                },
                AttendeeId: {},
                JoinToken: {
                    type: "string",
                    sensitive: true
                },
                Capabilities: {
                    shape: "S6"
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ExternalUserId: {
                        shape: "S5"
                    },
                    ErrorCode: {},
                    ErrorMessage: {}
                }
            }
        },
        Sl: {
            type: "string",
            sensitive: true
        },
        Sn: {
            type: "string",
            sensitive: true
        },
        So: {
            type: "structure",
            members: {
                LambdaFunctionArn: {
                    shape: "Sp"
                },
                SnsTopicArn: {
                    shape: "Sp"
                },
                SqsQueueArn: {
                    shape: "Sp"
                }
            }
        },
        Sp: {
            type: "string",
            sensitive: true
        },
        Sq: {
            type: "structure",
            members: {
                Audio: {
                    type: "structure",
                    members: {
                        EchoReduction: {}
                    }
                }
            }
        },
        Su: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                MeetingId: {},
                MeetingHostId: {
                    shape: "S5"
                },
                ExternalMeetingId: {
                    shape: "Sn"
                },
                MediaRegion: {},
                MediaPlacement: {
                    type: "structure",
                    members: {
                        AudioHostUrl: {},
                        AudioFallbackUrl: {},
                        SignalingUrl: {},
                        TurnControlUrl: {},
                        ScreenDataUrl: {},
                        ScreenViewingUrl: {},
                        ScreenSharingUrl: {},
                        EventIngestionUrl: {}
                    }
                },
                MeetingFeatures: {
                    shape: "Sq"
                },
                PrimaryMeetingId: {},
                TenantIds: {
                    shape: "Su"
                },
                MeetingArn: {}
            }
        }
    },
    paginators: {
        ListAttendees: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["resiliencehub"] = {};

AWS.Resiliencehub = AWS.Service.defineService("resiliencehub", [ "2020-04-30" ]);

AWS.apiLoader.services["resiliencehub"]["2020-04-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-04-30",
        endpointPrefix: "resiliencehub",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Resilience Hub",
        serviceId: "resiliencehub",
        signatureVersion: "v4",
        signingName: "resiliencehub",
        uid: "resiliencehub-2020-04-30"
    },
    operations: {
        AddDraftAppVersionResourceMappings: {
            http: {
                requestUri: "/add-draft-app-version-resource-mappings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "resourceMappings" ],
                members: {
                    appArn: {},
                    resourceMappings: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "resourceMappings" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    resourceMappings: {
                        shape: "S3"
                    }
                }
            }
        },
        CreateApp: {
            http: {
                requestUri: "/create-app",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    assessmentSchedule: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    name: {},
                    policyArn: {},
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "Sm"
                    }
                }
            }
        },
        CreateRecommendationTemplate: {
            http: {
                requestUri: "/create-recommendation-template",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn", "name" ],
                members: {
                    assessmentArn: {},
                    bucketName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    format: {},
                    name: {},
                    recommendationIds: {
                        shape: "St"
                    },
                    recommendationTypes: {
                        shape: "Sv"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    recommendationTemplate: {
                        shape: "Sy"
                    }
                }
            }
        },
        CreateResiliencyPolicy: {
            http: {
                requestUri: "/create-resiliency-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policy", "policyName", "tier" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    dataLocationConstraint: {},
                    policy: {
                        shape: "S15"
                    },
                    policyDescription: {},
                    policyName: {},
                    tags: {
                        shape: "Si"
                    },
                    tier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policy" ],
                members: {
                    policy: {
                        shape: "S1b"
                    }
                }
            }
        },
        DeleteApp: {
            http: {
                requestUri: "/delete-app",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    forceDelete: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {}
                }
            }
        },
        DeleteAppAssessment: {
            http: {
                requestUri: "/delete-app-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentArn", "assessmentStatus" ],
                members: {
                    assessmentArn: {},
                    assessmentStatus: {}
                }
            }
        },
        DeleteRecommendationTemplate: {
            http: {
                requestUri: "/delete-recommendation-template",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recommendationTemplateArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    recommendationTemplateArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "recommendationTemplateArn", "status" ],
                members: {
                    recommendationTemplateArn: {},
                    status: {}
                }
            }
        },
        DeleteResiliencyPolicy: {
            http: {
                requestUri: "/delete-resiliency-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    policyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policyArn" ],
                members: {
                    policyArn: {}
                }
            }
        },
        DescribeApp: {
            http: {
                requestUri: "/describe-app",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "Sm"
                    }
                }
            }
        },
        DescribeAppAssessment: {
            http: {
                requestUri: "/describe-app-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "assessment" ],
                members: {
                    assessment: {
                        shape: "S1q"
                    }
                }
            }
        },
        DescribeAppVersionResourcesResolutionStatus: {
            http: {
                requestUri: "/describe-app-version-resources-resolution-status",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    resolutionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "resolutionId", "status" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    errorMessage: {},
                    resolutionId: {},
                    status: {}
                }
            }
        },
        DescribeAppVersionTemplate: {
            http: {
                requestUri: "/describe-app-version-template",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appTemplateBody", "appVersion" ],
                members: {
                    appArn: {},
                    appTemplateBody: {},
                    appVersion: {}
                }
            }
        },
        DescribeDraftAppVersionResourcesImportStatus: {
            http: {
                requestUri: "/describe-draft-app-version-resources-import-status",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "status", "statusChangeTime" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    errorMessage: {},
                    status: {},
                    statusChangeTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DescribeResiliencyPolicy: {
            http: {
                requestUri: "/describe-resiliency-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyArn" ],
                members: {
                    policyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policy" ],
                members: {
                    policy: {
                        shape: "S1b"
                    }
                }
            }
        },
        ImportResourcesToDraftAppVersion: {
            http: {
                requestUri: "/import-resources-to-draft-app-version",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    sourceArns: {
                        shape: "S2g"
                    },
                    terraformSources: {
                        shape: "S2h"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "status" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    sourceArns: {
                        shape: "S2g"
                    },
                    status: {},
                    terraformSources: {
                        shape: "S2h"
                    }
                }
            }
        },
        ListAlarmRecommendations: {
            http: {
                requestUri: "/list-alarm-recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "alarmRecommendations" ],
                members: {
                    alarmRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "recommendationId", "referenceId", "type" ],
                            members: {
                                appComponentName: {},
                                description: {},
                                items: {
                                    shape: "S2s"
                                },
                                name: {},
                                prerequisite: {},
                                recommendationId: {},
                                referenceId: {},
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppAssessments: {
            http: {
                method: "GET",
                requestUri: "/list-app-assessments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    appArn: {
                        location: "querystring",
                        locationName: "appArn"
                    },
                    assessmentName: {
                        location: "querystring",
                        locationName: "assessmentName"
                    },
                    assessmentStatus: {
                        location: "querystring",
                        locationName: "assessmentStatus",
                        type: "list",
                        member: {}
                    },
                    complianceStatus: {
                        location: "querystring",
                        locationName: "complianceStatus"
                    },
                    invoker: {
                        location: "querystring",
                        locationName: "invoker"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    reverseOrder: {
                        location: "querystring",
                        locationName: "reverseOrder",
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessmentSummaries" ],
                members: {
                    assessmentSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "assessmentArn", "assessmentStatus" ],
                            members: {
                                appArn: {},
                                appVersion: {},
                                assessmentArn: {},
                                assessmentName: {},
                                assessmentStatus: {},
                                complianceStatus: {},
                                cost: {
                                    shape: "S1u"
                                },
                                endTime: {
                                    type: "timestamp"
                                },
                                invoker: {},
                                message: {},
                                resiliencyScore: {
                                    type: "double"
                                },
                                startTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppComponentCompliances: {
            http: {
                requestUri: "/list-app-component-compliances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "componentCompliances" ],
                members: {
                    componentCompliances: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                appComponentName: {},
                                compliance: {
                                    shape: "S1r"
                                },
                                cost: {
                                    shape: "S1u"
                                },
                                message: {},
                                resiliencyScore: {
                                    shape: "S1y"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppComponentRecommendations: {
            http: {
                requestUri: "/list-app-component-recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "componentRecommendations" ],
                members: {
                    componentRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appComponentName", "configRecommendations", "recommendationStatus" ],
                            members: {
                                appComponentName: {},
                                configRecommendations: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "optimizationType", "referenceId" ],
                                        members: {
                                            appComponentName: {},
                                            compliance: {
                                                shape: "S1r"
                                            },
                                            cost: {
                                                shape: "S1u"
                                            },
                                            description: {},
                                            haArchitecture: {},
                                            name: {},
                                            optimizationType: {},
                                            recommendationCompliance: {
                                                type: "map",
                                                key: {},
                                                value: {
                                                    type: "structure",
                                                    required: [ "expectedComplianceStatus" ],
                                                    members: {
                                                        expectedComplianceStatus: {},
                                                        expectedRpoDescription: {},
                                                        expectedRpoInSecs: {
                                                            type: "integer"
                                                        },
                                                        expectedRtoDescription: {},
                                                        expectedRtoInSecs: {
                                                            type: "integer"
                                                        }
                                                    }
                                                }
                                            },
                                            referenceId: {},
                                            suggestedChanges: {
                                                type: "list",
                                                member: {}
                                            }
                                        }
                                    }
                                },
                                recommendationStatus: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListAppVersionResourceMappings: {
            http: {
                requestUri: "/list-app-version-resource-mappings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "resourceMappings" ],
                members: {
                    nextToken: {},
                    resourceMappings: {
                        shape: "S3"
                    }
                }
            }
        },
        ListAppVersionResources: {
            http: {
                requestUri: "/list-app-version-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resolutionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "physicalResources", "resolutionId" ],
                members: {
                    nextToken: {},
                    physicalResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "logicalResourceId", "physicalResourceId", "resourceType" ],
                            members: {
                                appComponents: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "name", "type" ],
                                        members: {
                                            name: {},
                                            type: {}
                                        }
                                    }
                                },
                                logicalResourceId: {
                                    shape: "S3p"
                                },
                                physicalResourceId: {
                                    shape: "S8"
                                },
                                resourceName: {},
                                resourceType: {}
                            }
                        }
                    },
                    resolutionId: {}
                }
            }
        },
        ListAppVersions: {
            http: {
                requestUri: "/list-app-versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appVersions" ],
                members: {
                    appVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appVersion" ],
                            members: {
                                appVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListApps: {
            http: {
                method: "GET",
                requestUri: "/list-apps",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    appArn: {
                        location: "querystring",
                        locationName: "appArn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "appSummaries" ],
                members: {
                    appSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appArn", "creationTime", "name" ],
                            members: {
                                appArn: {},
                                assessmentSchedule: {},
                                complianceStatus: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                description: {},
                                name: {},
                                resiliencyScore: {
                                    type: "double"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecommendationTemplates: {
            http: {
                method: "GET",
                requestUri: "/list-recommendation-templates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {
                        location: "querystring",
                        locationName: "assessmentArn"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    recommendationTemplateArn: {
                        location: "querystring",
                        locationName: "recommendationTemplateArn"
                    },
                    reverseOrder: {
                        location: "querystring",
                        locationName: "reverseOrder",
                        type: "boolean"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    recommendationTemplates: {
                        type: "list",
                        member: {
                            shape: "Sy"
                        }
                    }
                }
            }
        },
        ListResiliencyPolicies: {
            http: {
                method: "GET",
                requestUri: "/list-resiliency-policies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    policyName: {
                        location: "querystring",
                        locationName: "policyName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resiliencyPolicies" ],
                members: {
                    nextToken: {},
                    resiliencyPolicies: {
                        shape: "S44"
                    }
                }
            }
        },
        ListSopRecommendations: {
            http: {
                requestUri: "/list-sop-recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "sopRecommendations" ],
                members: {
                    nextToken: {},
                    sopRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "recommendationId", "referenceId", "serviceType" ],
                            members: {
                                appComponentName: {},
                                description: {},
                                items: {
                                    shape: "S2s"
                                },
                                name: {},
                                prerequisite: {},
                                recommendationId: {},
                                referenceId: {},
                                serviceType: {}
                            }
                        }
                    }
                }
            }
        },
        ListSuggestedResiliencyPolicies: {
            http: {
                method: "GET",
                requestUri: "/list-suggested-resiliency-policies",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resiliencyPolicies" ],
                members: {
                    nextToken: {},
                    resiliencyPolicies: {
                        shape: "S44"
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        ListTestRecommendations: {
            http: {
                requestUri: "/list-test-recommendations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentArn" ],
                members: {
                    assessmentArn: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "testRecommendations" ],
                members: {
                    nextToken: {},
                    testRecommendations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "referenceId" ],
                            members: {
                                appComponentName: {},
                                dependsOnAlarms: {
                                    type: "list",
                                    member: {}
                                },
                                description: {},
                                intent: {},
                                items: {
                                    shape: "S2s"
                                },
                                name: {},
                                prerequisite: {},
                                recommendationId: {},
                                referenceId: {},
                                risk: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        ListUnsupportedAppVersionResources: {
            http: {
                requestUri: "/list-unsupported-app-version-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resolutionId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "resolutionId", "unsupportedResources" ],
                members: {
                    nextToken: {},
                    resolutionId: {},
                    unsupportedResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "logicalResourceId", "physicalResourceId", "resourceType" ],
                            members: {
                                logicalResourceId: {
                                    shape: "S3p"
                                },
                                physicalResourceId: {
                                    shape: "S8"
                                },
                                resourceType: {}
                            }
                        }
                    }
                }
            }
        },
        PublishAppVersion: {
            http: {
                requestUri: "/publish-app-version",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    appVersion: {}
                }
            }
        },
        PutDraftAppVersionTemplate: {
            http: {
                requestUri: "/put-draft-app-version-template",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appTemplateBody" ],
                members: {
                    appArn: {},
                    appTemplateBody: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    appArn: {},
                    appVersion: {}
                }
            }
        },
        RemoveDraftAppVersionResourceMappings: {
            http: {
                requestUri: "/remove-draft-app-version-resource-mappings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    appRegistryAppNames: {
                        shape: "S4v"
                    },
                    logicalStackNames: {
                        shape: "S4w"
                    },
                    resourceGroupNames: {
                        shape: "S4v"
                    },
                    resourceNames: {
                        shape: "S4v"
                    },
                    terraformSourceNames: {
                        shape: "S4w"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    appArn: {},
                    appVersion: {}
                }
            }
        },
        ResolveAppVersionResources: {
            http: {
                requestUri: "/resolve-app-version-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion" ],
                members: {
                    appArn: {},
                    appVersion: {}
                }
            },
            output: {
                type: "structure",
                required: [ "appArn", "appVersion", "resolutionId", "status" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    resolutionId: {},
                    status: {}
                }
            }
        },
        StartAppAssessment: {
            http: {
                requestUri: "/start-app-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn", "appVersion", "assessmentName" ],
                members: {
                    appArn: {},
                    appVersion: {},
                    assessmentName: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "assessment" ],
                members: {
                    assessment: {
                        shape: "S1q"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApp: {
            http: {
                requestUri: "/update-app",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appArn" ],
                members: {
                    appArn: {},
                    assessmentSchedule: {},
                    clearResiliencyPolicyArn: {
                        type: "boolean"
                    },
                    description: {},
                    policyArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "app" ],
                members: {
                    app: {
                        shape: "Sm"
                    }
                }
            }
        },
        UpdateResiliencyPolicy: {
            http: {
                requestUri: "/update-resiliency-policy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "policyArn" ],
                members: {
                    dataLocationConstraint: {},
                    policy: {
                        shape: "S15"
                    },
                    policyArn: {},
                    policyDescription: {},
                    policyName: {},
                    tier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "policy" ],
                members: {
                    policy: {
                        shape: "S1b"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "mappingType", "physicalResourceId" ],
                members: {
                    appRegistryAppName: {},
                    logicalStackName: {},
                    mappingType: {},
                    physicalResourceId: {
                        shape: "S8"
                    },
                    resourceGroupName: {},
                    resourceName: {},
                    terraformSourceName: {}
                }
            }
        },
        S8: {
            type: "structure",
            required: [ "identifier", "type" ],
            members: {
                awsAccountId: {},
                awsRegion: {},
                identifier: {},
                type: {}
            }
        },
        Si: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sm: {
            type: "structure",
            required: [ "appArn", "creationTime", "name" ],
            members: {
                appArn: {},
                assessmentSchedule: {},
                complianceStatus: {},
                creationTime: {
                    type: "timestamp"
                },
                description: {},
                lastAppComplianceEvaluationTime: {
                    type: "timestamp"
                },
                lastResiliencyScoreEvaluationTime: {
                    type: "timestamp"
                },
                name: {},
                policyArn: {},
                resiliencyScore: {
                    type: "double"
                },
                status: {},
                tags: {
                    shape: "Si"
                }
            }
        },
        St: {
            type: "list",
            member: {}
        },
        Sv: {
            type: "list",
            member: {}
        },
        Sy: {
            type: "structure",
            required: [ "assessmentArn", "format", "name", "recommendationTemplateArn", "recommendationTypes", "status" ],
            members: {
                appArn: {},
                assessmentArn: {},
                endTime: {
                    type: "timestamp"
                },
                format: {},
                message: {},
                name: {},
                needsReplacements: {
                    type: "boolean"
                },
                recommendationIds: {
                    shape: "St"
                },
                recommendationTemplateArn: {},
                recommendationTypes: {
                    shape: "Sv"
                },
                startTime: {
                    type: "timestamp"
                },
                status: {},
                tags: {
                    shape: "Si"
                },
                templatesLocation: {
                    type: "structure",
                    members: {
                        bucket: {},
                        prefix: {}
                    }
                }
            }
        },
        S15: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "rpoInSecs", "rtoInSecs" ],
                members: {
                    rpoInSecs: {
                        type: "integer"
                    },
                    rtoInSecs: {
                        type: "integer"
                    }
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                creationTime: {
                    type: "timestamp"
                },
                dataLocationConstraint: {},
                estimatedCostTier: {},
                policy: {
                    shape: "S15"
                },
                policyArn: {},
                policyDescription: {},
                policyName: {},
                tags: {
                    shape: "Si"
                },
                tier: {}
            }
        },
        S1q: {
            type: "structure",
            required: [ "assessmentArn", "assessmentStatus", "invoker" ],
            members: {
                appArn: {},
                appVersion: {},
                assessmentArn: {},
                assessmentName: {},
                assessmentStatus: {},
                compliance: {
                    shape: "S1r"
                },
                complianceStatus: {},
                cost: {
                    shape: "S1u"
                },
                endTime: {
                    type: "timestamp"
                },
                invoker: {},
                message: {},
                policy: {
                    shape: "S1b"
                },
                resiliencyScore: {
                    shape: "S1y"
                },
                resourceErrorsDetails: {
                    type: "structure",
                    members: {
                        hasMoreErrors: {
                            type: "boolean"
                        },
                        resourceErrors: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    logicalResourceId: {},
                                    physicalResourceId: {},
                                    reason: {}
                                }
                            }
                        }
                    }
                },
                startTime: {
                    type: "timestamp"
                },
                tags: {
                    shape: "Si"
                }
            }
        },
        S1r: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "complianceStatus" ],
                members: {
                    achievableRpoInSecs: {
                        type: "integer"
                    },
                    achievableRtoInSecs: {
                        type: "integer"
                    },
                    complianceStatus: {},
                    currentRpoInSecs: {
                        type: "integer"
                    },
                    currentRtoInSecs: {
                        type: "integer"
                    },
                    message: {},
                    rpoDescription: {},
                    rpoReferenceId: {},
                    rtoDescription: {},
                    rtoReferenceId: {}
                }
            }
        },
        S1u: {
            type: "structure",
            required: [ "amount", "currency", "frequency" ],
            members: {
                amount: {
                    type: "double"
                },
                currency: {},
                frequency: {}
            }
        },
        S1y: {
            type: "structure",
            required: [ "disruptionScore", "score" ],
            members: {
                disruptionScore: {
                    type: "map",
                    key: {},
                    value: {
                        type: "double"
                    }
                },
                score: {
                    type: "double"
                }
            }
        },
        S2g: {
            type: "list",
            member: {}
        },
        S2h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "s3StateFileUrl" ],
                members: {
                    s3StateFileUrl: {}
                }
            }
        },
        S2s: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    alreadyImplemented: {
                        type: "boolean"
                    },
                    resourceId: {},
                    targetAccountId: {},
                    targetRegion: {}
                }
            }
        },
        S3p: {
            type: "structure",
            required: [ "identifier" ],
            members: {
                identifier: {},
                logicalStackName: {},
                resourceGroupName: {},
                terraformSourceName: {}
            }
        },
        S44: {
            type: "list",
            member: {
                shape: "S1b"
            }
        },
        S4v: {
            type: "list",
            member: {}
        },
        S4w: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAlarmRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppAssessments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppComponentCompliances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppComponentRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppVersionResourceMappings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppVersionResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListAppVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListApps: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListRecommendationTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListResiliencyPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSopRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListSuggestedResiliencyPolicies: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTestRecommendations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListUnsupportedAppVersionResources: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["migrationhubstrategy"] = {};

AWS.MigrationHubStrategy = AWS.Service.defineService("migrationhubstrategy", [ "2020-02-19" ]);

AWS.apiLoader.services["migrationhubstrategy"]["2020-02-19"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-02-19",
        endpointPrefix: "migrationhub-strategy",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Migration Hub Strategy Recommendations",
        serviceId: "MigrationHubStrategy",
        signatureVersion: "v4",
        signingName: "migrationhub-strategy",
        uid: "migrationhubstrategy-2020-02-19"
    },
    operations: {
        GetApplicationComponentDetails: {
            http: {
                method: "GET",
                requestUri: "/get-applicationcomponent-details/{applicationComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationComponentId" ],
                members: {
                    applicationComponentId: {
                        location: "uri",
                        locationName: "applicationComponentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationComponentDetail: {
                        shape: "S4"
                    },
                    associatedApplications: {
                        shape: "Sy"
                    },
                    associatedServerIds: {
                        type: "list",
                        member: {}
                    },
                    moreApplicationResource: {
                        type: "boolean"
                    }
                }
            }
        },
        GetApplicationComponentStrategies: {
            http: {
                method: "GET",
                requestUri: "/get-applicationcomponent-strategies/{applicationComponentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationComponentId" ],
                members: {
                    applicationComponentId: {
                        location: "uri",
                        locationName: "applicationComponentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationComponentStrategies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                isPreferred: {
                                    type: "boolean"
                                },
                                recommendation: {
                                    shape: "So"
                                },
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        GetAssessment: {
            http: {
                method: "GET",
                requestUri: "/get-assessment/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    dataCollectionDetails: {
                        type: "structure",
                        members: {
                            completionTime: {
                                type: "timestamp"
                            },
                            failed: {
                                type: "integer"
                            },
                            inProgress: {
                                type: "integer"
                            },
                            servers: {
                                type: "integer"
                            },
                            startTime: {
                                type: "timestamp"
                            },
                            status: {},
                            success: {
                                type: "integer"
                            }
                        }
                    },
                    id: {}
                }
            }
        },
        GetImportFileTask: {
            http: {
                method: "GET",
                requestUri: "/get-import-file-task/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    completionTime: {
                        type: "timestamp"
                    },
                    id: {},
                    importName: {},
                    inputS3Bucket: {},
                    inputS3Key: {},
                    numberOfRecordsFailed: {
                        type: "integer"
                    },
                    numberOfRecordsSuccess: {
                        type: "integer"
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    status: {},
                    statusReportS3Bucket: {},
                    statusReportS3Key: {}
                }
            }
        },
        GetPortfolioPreferences: {
            http: {
                method: "GET",
                requestUri: "/get-portfolio-preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    applicationPreferences: {
                        shape: "S1i"
                    },
                    databasePreferences: {
                        shape: "S1t"
                    },
                    prioritizeBusinessGoals: {
                        shape: "S25"
                    }
                }
            }
        },
        GetPortfolioSummary: {
            http: {
                method: "GET",
                requestUri: "/get-portfolio-summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    assessmentSummary: {
                        type: "structure",
                        members: {
                            antipatternReportS3Object: {
                                shape: "S6"
                            },
                            antipatternReportStatus: {},
                            antipatternReportStatusMessage: {},
                            lastAnalyzedTimestamp: {
                                type: "timestamp"
                            },
                            listAntipatternSeveritySummary: {
                                shape: "Si"
                            },
                            listApplicationComponentStrategySummary: {
                                shape: "S2b"
                            },
                            listApplicationComponentSummary: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        appType: {},
                                        count: {
                                            type: "integer"
                                        }
                                    }
                                }
                            },
                            listServerStrategySummary: {
                                shape: "S2b"
                            },
                            listServerSummary: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        ServerOsType: {},
                                        count: {
                                            type: "integer"
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetRecommendationReportDetails: {
            http: {
                method: "GET",
                requestUri: "/get-recommendation-report-details/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    recommendationReportDetails: {
                        type: "structure",
                        members: {
                            completionTime: {
                                type: "timestamp"
                            },
                            s3Bucket: {},
                            s3Keys: {
                                type: "list",
                                member: {}
                            },
                            startTime: {
                                type: "timestamp"
                            },
                            status: {},
                            statusMessage: {}
                        }
                    }
                }
            }
        },
        GetServerDetails: {
            http: {
                method: "GET",
                requestUri: "/get-server-details/{serverId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serverId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    serverId: {
                        location: "uri",
                        locationName: "serverId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    associatedApplications: {
                        shape: "Sy"
                    },
                    nextToken: {},
                    serverDetail: {
                        shape: "S2u"
                    }
                }
            }
        },
        GetServerStrategies: {
            http: {
                method: "GET",
                requestUri: "/get-server-strategies/{serverId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serverId" ],
                members: {
                    serverId: {
                        location: "uri",
                        locationName: "serverId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    serverStrategies: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                isPreferred: {
                                    type: "boolean"
                                },
                                numberOfApplicationComponents: {
                                    type: "integer"
                                },
                                recommendation: {
                                    shape: "So"
                                },
                                status: {}
                            }
                        }
                    }
                }
            }
        },
        ListApplicationComponents: {
            http: {
                requestUri: "/list-applicationcomponents",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    applicationComponentCriteria: {},
                    filterValue: {},
                    groupIdFilter: {
                        shape: "S3d"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sort: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    applicationComponentInfos: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCollectors: {
            http: {
                method: "GET",
                requestUri: "/list-collectors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Collectors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                collectorHealth: {},
                                collectorId: {},
                                collectorVersion: {},
                                hostName: {},
                                ipAddress: {},
                                lastActivityTimeStamp: {},
                                registeredTimeStamp: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListImportFileTask: {
            http: {
                method: "GET",
                requestUri: "/list-import-file-task",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    taskInfos: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                completionTime: {
                                    type: "timestamp"
                                },
                                id: {},
                                importName: {},
                                inputS3Bucket: {},
                                inputS3Key: {},
                                numberOfRecordsFailed: {
                                    type: "integer"
                                },
                                numberOfRecordsSuccess: {
                                    type: "integer"
                                },
                                startTime: {
                                    type: "timestamp"
                                },
                                status: {},
                                statusReportS3Bucket: {},
                                statusReportS3Key: {}
                            }
                        }
                    }
                }
            }
        },
        ListServers: {
            http: {
                requestUri: "/list-servers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterValue: {},
                    groupIdFilter: {
                        shape: "S3d"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    serverCriteria: {},
                    sort: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    serverInfos: {
                        type: "list",
                        member: {
                            shape: "S2u"
                        }
                    }
                }
            }
        },
        PutPortfolioPreferences: {
            http: {
                requestUri: "/put-portfolio-preferences",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    applicationPreferences: {
                        shape: "S1i"
                    },
                    databasePreferences: {
                        shape: "S1t"
                    },
                    prioritizeBusinessGoals: {
                        shape: "S25"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartAssessment: {
            http: {
                requestUri: "/start-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    s3bucketForAnalysisData: {},
                    s3bucketForReportData: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    assessmentId: {}
                }
            }
        },
        StartImportFileTask: {
            http: {
                requestUri: "/start-import-file-task",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "S3Bucket", "name", "s3key" ],
                members: {
                    S3Bucket: {},
                    dataSourceType: {},
                    groupId: {
                        shape: "S3d"
                    },
                    name: {},
                    s3bucketForReportData: {},
                    s3key: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        StartRecommendationReportGeneration: {
            http: {
                requestUri: "/start-recommendation-report-generation",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    groupIdFilter: {
                        shape: "S3d"
                    },
                    outputFormat: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        StopAssessment: {
            http: {
                requestUri: "/stop-assessment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "assessmentId" ],
                members: {
                    assessmentId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplicationComponentConfig: {
            http: {
                requestUri: "/update-applicationcomponent-config/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationComponentId" ],
                members: {
                    applicationComponentId: {},
                    inclusionStatus: {},
                    secretsManagerKey: {
                        type: "string",
                        sensitive: true
                    },
                    sourceCodeList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                location: {},
                                sourceVersion: {},
                                versionControl: {}
                            }
                        }
                    },
                    strategyOption: {
                        shape: "S4j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateServerConfig: {
            http: {
                requestUri: "/update-server-config/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "serverId" ],
                members: {
                    serverId: {},
                    strategyOption: {
                        shape: "S4j"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                analysisStatus: {},
                antipatternReportS3Object: {
                    shape: "S6"
                },
                antipatternReportStatus: {},
                antipatternReportStatusMessage: {},
                appType: {},
                associatedServerId: {},
                databaseConfigDetail: {
                    type: "structure",
                    members: {
                        secretName: {}
                    }
                },
                id: {},
                inclusionStatus: {},
                lastAnalyzedTimestamp: {
                    type: "timestamp"
                },
                listAntipatternSeveritySummary: {
                    shape: "Si"
                },
                moreServerAssociationExists: {
                    type: "boolean"
                },
                name: {},
                osDriver: {},
                osVersion: {},
                recommendationSet: {
                    shape: "So"
                },
                resourceSubType: {},
                sourceCodeRepositories: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            branch: {},
                            repository: {},
                            versionControlType: {}
                        }
                    }
                },
                statusMessage: {}
            }
        },
        S6: {
            type: "structure",
            members: {
                s3Bucket: {},
                s3key: {}
            }
        },
        Si: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    count: {
                        type: "integer"
                    },
                    severity: {}
                }
            }
        },
        So: {
            type: "structure",
            members: {
                strategy: {},
                targetDestination: {},
                transformationTool: {
                    type: "structure",
                    members: {
                        description: {},
                        name: {},
                        tranformationToolInstallationLink: {}
                    }
                }
            }
        },
        Sy: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    id: {},
                    name: {}
                }
            }
        },
        S1i: {
            type: "structure",
            members: {
                managementPreference: {
                    type: "structure",
                    members: {
                        awsManagedResources: {
                            type: "structure",
                            required: [ "targetDestination" ],
                            members: {
                                targetDestination: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        noPreference: {
                            type: "structure",
                            required: [ "targetDestination" ],
                            members: {
                                targetDestination: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        selfManageResources: {
                            type: "structure",
                            required: [ "targetDestination" ],
                            members: {
                                targetDestination: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                databaseManagementPreference: {},
                databaseMigrationPreference: {
                    type: "structure",
                    members: {
                        heterogeneous: {
                            type: "structure",
                            required: [ "targetDatabaseEngine" ],
                            members: {
                                targetDatabaseEngine: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        homogeneous: {
                            type: "structure",
                            members: {
                                targetDatabaseEngine: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        },
                        noPreference: {
                            type: "structure",
                            required: [ "targetDatabaseEngine" ],
                            members: {
                                targetDatabaseEngine: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    union: true
                }
            }
        },
        S25: {
            type: "structure",
            members: {
                businessGoals: {
                    type: "structure",
                    members: {
                        licenseCostReduction: {
                            type: "integer"
                        },
                        modernizeInfrastructureWithCloudNativeTechnologies: {
                            type: "integer"
                        },
                        reduceOperationalOverheadWithManagedServices: {
                            type: "integer"
                        },
                        speedOfMigration: {
                            type: "integer"
                        }
                    }
                }
            }
        },
        S2b: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    count: {
                        type: "integer"
                    },
                    strategy: {}
                }
            }
        },
        S2u: {
            type: "structure",
            members: {
                antipatternReportS3Object: {
                    shape: "S6"
                },
                antipatternReportStatus: {},
                antipatternReportStatusMessage: {},
                applicationComponentStrategySummary: {
                    shape: "S2b"
                },
                dataCollectionStatus: {},
                id: {},
                lastAnalyzedTimestamp: {
                    type: "timestamp"
                },
                listAntipatternSeveritySummary: {
                    shape: "Si"
                },
                name: {},
                recommendationSet: {
                    shape: "So"
                },
                serverType: {},
                statusMessage: {},
                systemInfo: {
                    type: "structure",
                    members: {
                        cpuArchitecture: {},
                        fileSystemType: {},
                        networkInfoList: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "interfaceName", "ipAddress", "macAddress", "netMask" ],
                                members: {
                                    interfaceName: {},
                                    ipAddress: {},
                                    macAddress: {},
                                    netMask: {}
                                }
                            }
                        },
                        osInfo: {
                            type: "structure",
                            members: {
                                type: {},
                                version: {}
                            }
                        }
                    }
                }
            }
        },
        S3d: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    value: {}
                }
            }
        },
        S4j: {
            type: "structure",
            members: {
                isPreferred: {
                    type: "boolean"
                },
                strategy: {},
                targetDestination: {},
                toolName: {}
            }
        }
    },
    paginators: {
        GetServerDetails: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "associatedApplications"
        },
        ListApplicationComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applicationComponentInfos"
        },
        ListCollectors: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "Collectors"
        },
        ListImportFileTask: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "taskInfos"
        },
        ListServers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "serverInfos"
        }
    }
};

AWS.apiLoader.services["appconfigdata"] = {};

AWS.AppConfigData = AWS.Service.defineService("appconfigdata", [ "2021-11-11" ]);

AWS.apiLoader.services["appconfigdata"]["2021-11-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-11-11",
        endpointPrefix: "appconfigdata",
        jsonVersion: "1.0",
        protocol: "rest-json",
        serviceFullName: "AWS AppConfig Data",
        serviceId: "AppConfigData",
        signatureVersion: "v4",
        signingName: "appconfig",
        uid: "appconfigdata-2021-11-11"
    },
    operations: {
        GetLatestConfiguration: {
            http: {
                method: "GET",
                requestUri: "/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ConfigurationToken" ],
                members: {
                    ConfigurationToken: {
                        location: "querystring",
                        locationName: "configuration_token"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextPollConfigurationToken: {
                        location: "header",
                        locationName: "Next-Poll-Configuration-Token"
                    },
                    NextPollIntervalInSeconds: {
                        location: "header",
                        locationName: "Next-Poll-Interval-In-Seconds",
                        type: "integer"
                    },
                    ContentType: {
                        location: "header",
                        locationName: "Content-Type"
                    },
                    Configuration: {
                        type: "blob",
                        sensitive: true
                    }
                },
                payload: "Configuration"
            }
        },
        StartConfigurationSession: {
            http: {
                requestUri: "/configurationsessions",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "ConfigurationProfileIdentifier" ],
                members: {
                    ApplicationIdentifier: {},
                    EnvironmentIdentifier: {},
                    ConfigurationProfileIdentifier: {},
                    RequiredMinimumPollIntervalInSeconds: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    InitialConfigurationToken: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {}
};

AWS.apiLoader.services["drs"] = {};

AWS.Drs = AWS.Service.defineService("drs", [ "2020-02-26" ]);

AWS.apiLoader.services["drs"]["2020-02-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-02-26",
        endpointPrefix: "drs",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "drs",
        serviceFullName: "Elastic Disaster Recovery Service",
        serviceId: "drs",
        signatureVersion: "v4",
        signingName: "drs",
        uid: "drs-2020-02-26"
    },
    operations: {
        CreateExtendedSourceServer: {
            http: {
                requestUri: "/CreateExtendedSourceServer",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "sourceServerArn" ],
                members: {
                    sourceServerArn: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    sourceServer: {
                        shape: "S7"
                    }
                }
            }
        },
        CreateReplicationConfigurationTemplate: {
            http: {
                requestUri: "/CreateReplicationConfigurationTemplate",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "associateDefaultSecurityGroup", "bandwidthThrottling", "createPublicIP", "dataPlaneRouting", "defaultLargeStagingDiskType", "ebsEncryption", "pitPolicy", "replicationServerInstanceType", "replicationServersSecurityGroupsIDs", "stagingAreaSubnetId", "stagingAreaTags", "useDedicatedReplicationServer" ],
                members: {
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    pitPolicy: {
                        shape: "S1h"
                    },
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S1l"
                    },
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "S3"
                    },
                    tags: {
                        shape: "S3"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S1o"
            }
        },
        DeleteJob: {
            http: {
                requestUri: "/DeleteJob",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "jobID" ],
                members: {
                    jobID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteRecoveryInstance: {
            http: {
                requestUri: "/DeleteRecoveryInstance",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    recoveryInstanceID: {}
                }
            }
        },
        DeleteReplicationConfigurationTemplate: {
            http: {
                requestUri: "/DeleteReplicationConfigurationTemplate",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "replicationConfigurationTemplateID" ],
                members: {
                    replicationConfigurationTemplateID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSourceServer: {
            http: {
                requestUri: "/DeleteSourceServer",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DescribeJobLogItems: {
            http: {
                requestUri: "/DescribeJobLogItems",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "jobID" ],
                members: {
                    jobID: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                event: {},
                                eventData: {
                                    type: "structure",
                                    members: {
                                        conversionProperties: {
                                            type: "structure",
                                            members: {
                                                dataTimestamp: {},
                                                forceUefi: {
                                                    type: "boolean"
                                                },
                                                rootVolumeName: {},
                                                volumeToConversionMap: {
                                                    type: "map",
                                                    key: {},
                                                    value: {
                                                        type: "map",
                                                        key: {},
                                                        value: {}
                                                    }
                                                },
                                                volumeToVolumeSize: {
                                                    type: "map",
                                                    key: {},
                                                    value: {
                                                        type: "long"
                                                    }
                                                }
                                            }
                                        },
                                        conversionServerID: {},
                                        rawError: {},
                                        sourceServerID: {},
                                        targetInstanceID: {}
                                    }
                                },
                                logDateTime: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeJobs: {
            http: {
                requestUri: "/DescribeJobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            fromDate: {},
                            jobIDs: {
                                type: "list",
                                member: {}
                            },
                            toDate: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S2e"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeRecoveryInstances: {
            http: {
                requestUri: "/DescribeRecoveryInstances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            recoveryInstanceIDs: {
                                type: "list",
                                member: {}
                            },
                            sourceServerIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                dataReplicationInfo: {
                                    type: "structure",
                                    members: {
                                        dataReplicationError: {
                                            type: "structure",
                                            members: {
                                                error: {},
                                                rawError: {}
                                            }
                                        },
                                        dataReplicationInitiation: {
                                            type: "structure",
                                            members: {
                                                startDateTime: {},
                                                steps: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        members: {
                                                            name: {},
                                                            status: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        dataReplicationState: {},
                                        etaDateTime: {},
                                        lagDuration: {},
                                        replicatedDisks: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    backloggedStorageBytes: {
                                                        type: "long"
                                                    },
                                                    deviceName: {},
                                                    replicatedStorageBytes: {
                                                        type: "long"
                                                    },
                                                    rescannedStorageBytes: {
                                                        type: "long"
                                                    },
                                                    totalStorageBytes: {
                                                        type: "long"
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                ec2InstanceID: {},
                                ec2InstanceState: {},
                                failback: {
                                    type: "structure",
                                    members: {
                                        agentLastSeenByServiceDateTime: {},
                                        elapsedReplicationDuration: {},
                                        failbackClientID: {},
                                        failbackClientLastSeenByServiceDateTime: {},
                                        failbackInitiationTime: {},
                                        failbackJobID: {},
                                        failbackToOriginalServer: {
                                            type: "boolean"
                                        },
                                        firstByteDateTime: {},
                                        state: {}
                                    }
                                },
                                isDrill: {
                                    type: "boolean"
                                },
                                jobID: {},
                                pointInTimeSnapshotDateTime: {},
                                recoveryInstanceID: {},
                                recoveryInstanceProperties: {
                                    type: "structure",
                                    members: {
                                        cpus: {
                                            shape: "Sx"
                                        },
                                        disks: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                members: {
                                                    bytes: {
                                                        type: "long"
                                                    },
                                                    ebsVolumeID: {},
                                                    internalDeviceName: {}
                                                }
                                            }
                                        },
                                        identificationHints: {
                                            shape: "S11"
                                        },
                                        lastUpdatedDateTime: {},
                                        networkInterfaces: {
                                            shape: "S13"
                                        },
                                        os: {
                                            shape: "S17"
                                        },
                                        ramBytes: {
                                            type: "long"
                                        }
                                    }
                                },
                                sourceServerID: {},
                                tags: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeRecoverySnapshots: {
            http: {
                requestUri: "/DescribeRecoverySnapshots",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            fromDateTime: {},
                            toDateTime: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    order: {},
                    sourceServerID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "expectedTimestamp", "snapshotID", "sourceServerID" ],
                            members: {
                                ebsSnapshots: {
                                    type: "list",
                                    member: {}
                                },
                                expectedTimestamp: {},
                                snapshotID: {},
                                sourceServerID: {},
                                timestamp: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeReplicationConfigurationTemplates: {
            http: {
                requestUri: "/DescribeReplicationConfigurationTemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    replicationConfigurationTemplateIDs: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S1o"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DescribeSourceServers: {
            http: {
                requestUri: "/DescribeSourceServers",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            hardwareId: {},
                            sourceServerIDs: {
                                type: "list",
                                member: {}
                            },
                            stagingAccountIDs: {
                                type: "list",
                                member: {}
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            shape: "S7"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        DisconnectRecoveryInstance: {
            http: {
                requestUri: "/DisconnectRecoveryInstance",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    recoveryInstanceID: {}
                }
            }
        },
        DisconnectSourceServer: {
            http: {
                requestUri: "/DisconnectSourceServer",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S7"
            }
        },
        GetFailbackReplicationConfiguration: {
            http: {
                requestUri: "/GetFailbackReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    recoveryInstanceID: {}
                }
            },
            output: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    bandwidthThrottling: {
                        type: "long"
                    },
                    name: {},
                    recoveryInstanceID: {},
                    usePrivateIP: {
                        type: "boolean"
                    }
                }
            }
        },
        GetLaunchConfiguration: {
            http: {
                requestUri: "/GetLaunchConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S3x"
            }
        },
        GetReplicationConfiguration: {
            http: {
                requestUri: "/GetReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S43"
            }
        },
        InitializeService: {
            http: {
                requestUri: "/InitializeService",
                responseCode: 204
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        ListExtensibleSourceServers: {
            http: {
                requestUri: "/ListExtensibleSourceServers",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "stagingAccountID" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    stagingAccountID: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    items: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                hostname: {},
                                tags: {
                                    shape: "S3"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListStagingAccounts: {
            http: {
                method: "GET",
                requestUri: "/ListStagingAccounts",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    accounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountID: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S3"
                    }
                }
            }
        },
        RetryDataReplication: {
            http: {
                requestUri: "/RetryDataReplication",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    sourceServerID: {}
                }
            },
            output: {
                shape: "S7"
            }
        },
        StartFailbackLaunch: {
            http: {
                requestUri: "/StartFailbackLaunch",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceIDs" ],
                members: {
                    recoveryInstanceIDs: {
                        type: "list",
                        member: {}
                    },
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S2e"
                    }
                }
            }
        },
        StartRecovery: {
            http: {
                requestUri: "/StartRecovery",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "sourceServers" ],
                members: {
                    isDrill: {
                        type: "boolean"
                    },
                    sourceServers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "sourceServerID" ],
                            members: {
                                recoverySnapshotID: {},
                                sourceServerID: {}
                            }
                        }
                    },
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S2e"
                    }
                }
            }
        },
        StopFailback: {
            http: {
                requestUri: "/StopFailback",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    recoveryInstanceID: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S3"
                    }
                }
            },
            idempotent: true
        },
        TerminateRecoveryInstances: {
            http: {
                requestUri: "/TerminateRecoveryInstances",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceIDs" ],
                members: {
                    recoveryInstanceIDs: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    job: {
                        shape: "S2e"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            idempotent: true
        },
        UpdateFailbackReplicationConfiguration: {
            http: {
                requestUri: "/UpdateFailbackReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "recoveryInstanceID" ],
                members: {
                    bandwidthThrottling: {
                        type: "long"
                    },
                    name: {},
                    recoveryInstanceID: {},
                    usePrivateIP: {
                        type: "boolean"
                    }
                }
            }
        },
        UpdateLaunchConfiguration: {
            http: {
                requestUri: "/UpdateLaunchConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    copyPrivateIp: {
                        type: "boolean"
                    },
                    copyTags: {
                        type: "boolean"
                    },
                    launchDisposition: {},
                    licensing: {
                        shape: "S3z"
                    },
                    name: {},
                    sourceServerID: {},
                    targetInstanceTypeRightSizingMethod: {}
                }
            },
            output: {
                shape: "S3x"
            },
            idempotent: true
        },
        UpdateReplicationConfiguration: {
            http: {
                requestUri: "/UpdateReplicationConfiguration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sourceServerID" ],
                members: {
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    name: {},
                    pitPolicy: {
                        shape: "S1h"
                    },
                    replicatedDisks: {
                        shape: "S44"
                    },
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S1l"
                    },
                    sourceServerID: {},
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "S3"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S43"
            },
            idempotent: true
        },
        UpdateReplicationConfigurationTemplate: {
            http: {
                requestUri: "/UpdateReplicationConfigurationTemplate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "replicationConfigurationTemplateID" ],
                members: {
                    arn: {},
                    associateDefaultSecurityGroup: {
                        type: "boolean"
                    },
                    bandwidthThrottling: {
                        type: "long"
                    },
                    createPublicIP: {
                        type: "boolean"
                    },
                    dataPlaneRouting: {},
                    defaultLargeStagingDiskType: {},
                    ebsEncryption: {},
                    ebsEncryptionKeyArn: {},
                    pitPolicy: {
                        shape: "S1h"
                    },
                    replicationConfigurationTemplateID: {},
                    replicationServerInstanceType: {},
                    replicationServersSecurityGroupsIDs: {
                        shape: "S1l"
                    },
                    stagingAreaSubnetId: {},
                    stagingAreaTags: {
                        shape: "S3"
                    },
                    useDedicatedReplicationServer: {
                        type: "boolean"
                    }
                }
            },
            output: {
                shape: "S1o"
            }
        }
    },
    shapes: {
        S3: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        S7: {
            type: "structure",
            members: {
                arn: {},
                dataReplicationInfo: {
                    type: "structure",
                    members: {
                        dataReplicationError: {
                            type: "structure",
                            members: {
                                error: {},
                                rawError: {}
                            }
                        },
                        dataReplicationInitiation: {
                            type: "structure",
                            members: {
                                nextAttemptDateTime: {},
                                startDateTime: {},
                                steps: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            name: {},
                                            status: {}
                                        }
                                    }
                                }
                            }
                        },
                        dataReplicationState: {},
                        etaDateTime: {},
                        lagDuration: {},
                        replicatedDisks: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    backloggedStorageBytes: {
                                        type: "long"
                                    },
                                    deviceName: {},
                                    replicatedStorageBytes: {
                                        type: "long"
                                    },
                                    rescannedStorageBytes: {
                                        type: "long"
                                    },
                                    totalStorageBytes: {
                                        type: "long"
                                    }
                                }
                            }
                        }
                    }
                },
                lastLaunchResult: {},
                lifeCycle: {
                    type: "structure",
                    members: {
                        addedToServiceDateTime: {},
                        elapsedReplicationDuration: {},
                        firstByteDateTime: {},
                        lastLaunch: {
                            type: "structure",
                            members: {
                                initiated: {
                                    type: "structure",
                                    members: {
                                        apiCallDateTime: {},
                                        jobID: {},
                                        type: {}
                                    }
                                }
                            }
                        },
                        lastSeenByServiceDateTime: {}
                    }
                },
                recoveryInstanceId: {},
                sourceProperties: {
                    type: "structure",
                    members: {
                        cpus: {
                            shape: "Sx"
                        },
                        disks: {
                            type: "list",
                            member: {
                                type: "structure",
                                members: {
                                    bytes: {
                                        type: "long"
                                    },
                                    deviceName: {}
                                }
                            }
                        },
                        identificationHints: {
                            shape: "S11"
                        },
                        lastUpdatedDateTime: {},
                        networkInterfaces: {
                            shape: "S13"
                        },
                        os: {
                            shape: "S17"
                        },
                        ramBytes: {
                            type: "long"
                        },
                        recommendedInstanceType: {}
                    }
                },
                sourceServerID: {},
                stagingArea: {
                    type: "structure",
                    members: {
                        errorMessage: {},
                        stagingAccountID: {},
                        stagingSourceServerArn: {},
                        status: {}
                    }
                },
                tags: {
                    shape: "S3"
                }
            }
        },
        Sx: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    cores: {
                        type: "long"
                    },
                    modelName: {}
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                awsInstanceID: {},
                fqdn: {},
                hostname: {},
                vmWareUuid: {}
            }
        },
        S13: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    ips: {
                        type: "list",
                        member: {}
                    },
                    isPrimary: {
                        type: "boolean"
                    },
                    macAddress: {}
                }
            }
        },
        S17: {
            type: "structure",
            members: {
                fullString: {}
            }
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "interval", "retentionDuration", "units" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    interval: {
                        type: "integer"
                    },
                    retentionDuration: {
                        type: "integer"
                    },
                    ruleID: {
                        type: "long"
                    },
                    units: {}
                }
            }
        },
        S1l: {
            type: "list",
            member: {}
        },
        S1o: {
            type: "structure",
            required: [ "replicationConfigurationTemplateID" ],
            members: {
                arn: {},
                associateDefaultSecurityGroup: {
                    type: "boolean"
                },
                bandwidthThrottling: {
                    type: "long"
                },
                createPublicIP: {
                    type: "boolean"
                },
                dataPlaneRouting: {},
                defaultLargeStagingDiskType: {},
                ebsEncryption: {},
                ebsEncryptionKeyArn: {},
                pitPolicy: {
                    shape: "S1h"
                },
                replicationConfigurationTemplateID: {},
                replicationServerInstanceType: {},
                replicationServersSecurityGroupsIDs: {
                    shape: "S1l"
                },
                stagingAreaSubnetId: {},
                stagingAreaTags: {
                    shape: "S3"
                },
                tags: {
                    shape: "S3"
                },
                useDedicatedReplicationServer: {
                    type: "boolean"
                }
            }
        },
        S2e: {
            type: "structure",
            required: [ "jobID" ],
            members: {
                arn: {},
                creationDateTime: {},
                endDateTime: {},
                initiatedBy: {},
                jobID: {},
                participatingServers: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            launchStatus: {},
                            recoveryInstanceID: {},
                            sourceServerID: {}
                        }
                    }
                },
                status: {},
                tags: {
                    shape: "S3"
                },
                type: {}
            }
        },
        S3x: {
            type: "structure",
            members: {
                copyPrivateIp: {
                    type: "boolean"
                },
                copyTags: {
                    type: "boolean"
                },
                ec2LaunchTemplateID: {},
                launchDisposition: {},
                licensing: {
                    shape: "S3z"
                },
                name: {},
                sourceServerID: {},
                targetInstanceTypeRightSizingMethod: {}
            }
        },
        S3z: {
            type: "structure",
            members: {
                osByol: {
                    type: "boolean"
                }
            }
        },
        S43: {
            type: "structure",
            members: {
                associateDefaultSecurityGroup: {
                    type: "boolean"
                },
                bandwidthThrottling: {
                    type: "long"
                },
                createPublicIP: {
                    type: "boolean"
                },
                dataPlaneRouting: {},
                defaultLargeStagingDiskType: {},
                ebsEncryption: {},
                ebsEncryptionKeyArn: {},
                name: {},
                pitPolicy: {
                    shape: "S1h"
                },
                replicatedDisks: {
                    shape: "S44"
                },
                replicationServerInstanceType: {},
                replicationServersSecurityGroupsIDs: {
                    shape: "S1l"
                },
                sourceServerID: {},
                stagingAreaSubnetId: {},
                stagingAreaTags: {
                    shape: "S3"
                },
                useDedicatedReplicationServer: {
                    type: "boolean"
                }
            }
        },
        S44: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    deviceName: {},
                    iops: {
                        type: "long"
                    },
                    isBootDisk: {
                        type: "boolean"
                    },
                    optimizedStagingDiskType: {},
                    stagingDiskType: {},
                    throughput: {
                        type: "long"
                    }
                }
            }
        }
    },
    paginators: {
        DescribeJobLogItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeJobs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeRecoveryInstances: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeRecoverySnapshots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeReplicationConfigurationTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        DescribeSourceServers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListExtensibleSourceServers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "items"
        },
        ListStagingAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "accounts"
        }
    }
};

AWS.apiLoader.services["migrationhubrefactorspaces"] = {};

AWS.MigrationHubRefactorSpaces = AWS.Service.defineService("migrationhubrefactorspaces", [ "2021-10-26" ]);

AWS.apiLoader.services["migrationhubrefactorspaces"]["2021-10-26"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-10-26",
        endpointPrefix: "refactor-spaces",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Migration Hub Refactor Spaces",
        serviceId: "Migration Hub Refactor Spaces",
        signatureVersion: "v4",
        signingName: "refactor-spaces",
        uid: "migration-hub-refactor-spaces-2021-10-26"
    },
    operations: {
        CreateApplication: {
            http: {
                requestUri: "/environments/{EnvironmentIdentifier}/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier", "Name", "ProxyType", "VpcId" ],
                members: {
                    ApiGatewayProxy: {
                        shape: "S2"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    Name: {},
                    ProxyType: {},
                    Tags: {
                        shape: "S9"
                    },
                    VpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayProxy: {
                        shape: "S2"
                    },
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    OwnerAccountId: {},
                    ProxyType: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    VpcId: {}
                }
            }
        },
        CreateEnvironment: {
            http: {
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "NetworkFabricType" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    Name: {},
                    NetworkFabricType: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    NetworkFabricType: {},
                    OwnerAccountId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        CreateRoute: {
            http: {
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "RouteType", "ServiceIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    DefaultRoute: {
                        type: "structure",
                        members: {
                            ActivationState: {}
                        }
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    RouteType: {},
                    ServiceIdentifier: {},
                    Tags: {
                        shape: "S9"
                    },
                    UriPathRoute: {
                        shape: "Su"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    OwnerAccountId: {},
                    RouteId: {},
                    RouteType: {},
                    ServiceId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    UriPathRoute: {
                        shape: "Su"
                    }
                }
            }
        },
        CreateService: {
            http: {
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EndpointType", "EnvironmentIdentifier", "Name" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    },
                    Description: {},
                    EndpointType: {},
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    LambdaEndpoint: {
                        shape: "S14"
                    },
                    Name: {},
                    Tags: {
                        shape: "S9"
                    },
                    UrlEndpoint: {
                        shape: "S17"
                    },
                    VpcId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    EndpointType: {},
                    EnvironmentId: {},
                    LambdaEndpoint: {
                        shape: "S14"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    OwnerAccountId: {},
                    ServiceId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    UrlEndpoint: {
                        shape: "S17"
                    },
                    VpcId: {}
                }
            }
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    State: {}
                }
            },
            idempotent: true
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{EnvironmentIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier" ],
                members: {
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    State: {}
                }
            },
            idempotent: true
        },
        DeleteResourcePolicy: {
            http: {
                method: "DELETE",
                requestUri: "/resourcepolicy/{Identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteRoute: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes/{RouteIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "RouteIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    RouteIdentifier: {
                        location: "uri",
                        locationName: "RouteIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    RouteId: {},
                    ServiceId: {},
                    State: {}
                }
            },
            idempotent: true
        },
        DeleteService: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services/{ServiceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "ServiceIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    ServiceIdentifier: {
                        location: "uri",
                        locationName: "ServiceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    EnvironmentId: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    ServiceId: {},
                    State: {}
                }
            },
            idempotent: true
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApiGatewayProxy: {
                        type: "structure",
                        members: {
                            ApiGatewayId: {},
                            EndpointType: {},
                            NlbArn: {},
                            NlbName: {},
                            ProxyUrl: {},
                            StageName: {},
                            VpcLinkId: {}
                        }
                    },
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    EnvironmentId: {},
                    Error: {
                        shape: "S1t"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    OwnerAccountId: {},
                    ProxyType: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    VpcId: {}
                }
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier" ],
                members: {
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    EnvironmentId: {},
                    Error: {
                        shape: "S1t"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    NetworkFabricType: {},
                    OwnerAccountId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    TransitGatewayId: {}
                }
            }
        },
        GetResourcePolicy: {
            http: {
                method: "GET",
                requestUri: "/resourcepolicy/{Identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "Identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Policy: {}
                }
            }
        },
        GetRoute: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes/{RouteIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "RouteIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    RouteIdentifier: {
                        location: "uri",
                        locationName: "RouteIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    EnvironmentId: {},
                    Error: {
                        shape: "S1t"
                    },
                    IncludeChildPaths: {
                        type: "boolean"
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Methods: {
                        shape: "Sw"
                    },
                    OwnerAccountId: {},
                    PathResourceToId: {
                        shape: "S29"
                    },
                    RouteId: {},
                    RouteType: {},
                    ServiceId: {},
                    SourcePath: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        GetService: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services/{ServiceIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier", "ServiceIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    ServiceIdentifier: {
                        location: "uri",
                        locationName: "ServiceIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    CreatedByAccountId: {},
                    CreatedTime: {
                        type: "timestamp"
                    },
                    Description: {},
                    EndpointType: {},
                    EnvironmentId: {},
                    Error: {
                        shape: "S1t"
                    },
                    LambdaEndpoint: {
                        type: "structure",
                        members: {
                            Arn: {}
                        }
                    },
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    Name: {},
                    OwnerAccountId: {},
                    ServiceId: {},
                    State: {},
                    Tags: {
                        shape: "S9"
                    },
                    UrlEndpoint: {
                        type: "structure",
                        members: {
                            HealthUrl: {},
                            Url: {}
                        }
                    },
                    VpcId: {}
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier" ],
                members: {
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApiGatewayProxy: {
                                    type: "structure",
                                    members: {
                                        ApiGatewayId: {},
                                        EndpointType: {},
                                        NlbArn: {},
                                        NlbName: {},
                                        ProxyUrl: {},
                                        StageName: {},
                                        VpcLinkId: {}
                                    }
                                },
                                ApplicationId: {},
                                Arn: {},
                                CreatedByAccountId: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                EnvironmentId: {},
                                Error: {
                                    shape: "S1t"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                OwnerAccountId: {},
                                ProxyType: {},
                                State: {},
                                Tags: {
                                    shape: "S9"
                                },
                                VpcId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEnvironmentVpcs: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/vpcs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "EnvironmentIdentifier" ],
                members: {
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EnvironmentVpcList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                CidrBlocks: {
                                    type: "list",
                                    member: {}
                                },
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                EnvironmentId: {},
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                VpcId: {},
                                VpcName: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    EnvironmentSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Description: {},
                                EnvironmentId: {},
                                Error: {
                                    shape: "S1t"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                NetworkFabricType: {},
                                OwnerAccountId: {},
                                State: {},
                                Tags: {
                                    shape: "S9"
                                },
                                TransitGatewayId: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListRoutes: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    RouteSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                Arn: {},
                                CreatedByAccountId: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                EnvironmentId: {},
                                Error: {
                                    shape: "S1t"
                                },
                                IncludeChildPaths: {
                                    type: "boolean"
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Methods: {
                                    shape: "Sw"
                                },
                                OwnerAccountId: {},
                                PathResourceToId: {
                                    shape: "S29"
                                },
                                RouteId: {},
                                RouteType: {},
                                ServiceId: {},
                                SourcePath: {},
                                State: {},
                                Tags: {
                                    shape: "S9"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListServices: {
            http: {
                method: "GET",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/services",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ApplicationIdentifier", "EnvironmentIdentifier" ],
                members: {
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ServiceSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                ApplicationId: {},
                                Arn: {},
                                CreatedByAccountId: {},
                                CreatedTime: {
                                    type: "timestamp"
                                },
                                Description: {},
                                EndpointType: {},
                                EnvironmentId: {},
                                Error: {
                                    shape: "S1t"
                                },
                                LambdaEndpoint: {
                                    type: "structure",
                                    members: {
                                        Arn: {}
                                    }
                                },
                                LastUpdatedTime: {
                                    type: "timestamp"
                                },
                                Name: {},
                                OwnerAccountId: {},
                                ServiceId: {},
                                State: {},
                                Tags: {
                                    shape: "S9"
                                },
                                UrlEndpoint: {
                                    type: "structure",
                                    members: {
                                        HealthUrl: {},
                                        Url: {}
                                    }
                                },
                                VpcId: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        PutResourcePolicy: {
            http: {
                method: "PUT",
                requestUri: "/resourcepolicy",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Policy", "ResourceArn" ],
                members: {
                    Policy: {},
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateRoute: {
            http: {
                method: "PATCH",
                requestUri: "/environments/{EnvironmentIdentifier}/applications/{ApplicationIdentifier}/routes/{RouteIdentifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ActivationState", "ApplicationIdentifier", "EnvironmentIdentifier", "RouteIdentifier" ],
                members: {
                    ActivationState: {},
                    ApplicationIdentifier: {
                        location: "uri",
                        locationName: "ApplicationIdentifier"
                    },
                    EnvironmentIdentifier: {
                        location: "uri",
                        locationName: "EnvironmentIdentifier"
                    },
                    RouteIdentifier: {
                        location: "uri",
                        locationName: "RouteIdentifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ApplicationId: {},
                    Arn: {},
                    LastUpdatedTime: {
                        type: "timestamp"
                    },
                    RouteId: {},
                    ServiceId: {},
                    State: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {
                EndpointType: {},
                StageName: {}
            }
        },
        S9: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Su: {
            type: "structure",
            required: [ "ActivationState", "SourcePath" ],
            members: {
                ActivationState: {},
                IncludeChildPaths: {
                    type: "boolean"
                },
                Methods: {
                    shape: "Sw"
                },
                SourcePath: {}
            }
        },
        Sw: {
            type: "list",
            member: {}
        },
        S14: {
            type: "structure",
            required: [ "Arn" ],
            members: {
                Arn: {}
            }
        },
        S17: {
            type: "structure",
            required: [ "Url" ],
            members: {
                HealthUrl: {},
                Url: {}
            }
        },
        S1t: {
            type: "structure",
            members: {
                AccountId: {},
                AdditionalDetails: {
                    type: "map",
                    key: {},
                    value: {}
                },
                Code: {},
                Message: {},
                ResourceIdentifier: {},
                ResourceType: {}
            }
        },
        S29: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListApplications: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ApplicationSummaryList"
        },
        ListEnvironmentVpcs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EnvironmentVpcList"
        },
        ListEnvironments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "EnvironmentSummaryList"
        },
        ListRoutes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "RouteSummaryList"
        },
        ListServices: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ServiceSummaryList"
        }
    }
};

AWS.apiLoader.services["evidently"] = {};

AWS.Evidently = AWS.Service.defineService("evidently", [ "2021-02-01" ]);

AWS.apiLoader.services["evidently"]["2021-02-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-02-01",
        endpointPrefix: "evidently",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon CloudWatch Evidently",
        serviceId: "Evidently",
        signatureVersion: "v4",
        signingName: "evidently",
        uid: "evidently-2021-02-01"
    },
    operations: {
        BatchEvaluateFeature: {
            http: {
                requestUri: "/projects/{project}/evaluations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project", "requests" ],
                members: {
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    requests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entityId", "feature" ],
                            members: {
                                entityId: {},
                                evaluationContext: {
                                    jsonvalue: true
                                },
                                feature: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    results: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entityId", "feature" ],
                            members: {
                                details: {
                                    jsonvalue: true
                                },
                                entityId: {},
                                feature: {},
                                project: {},
                                reason: {},
                                value: {
                                    shape: "Sd"
                                },
                                variation: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "dataplane."
            }
        },
        CreateExperiment: {
            http: {
                requestUri: "/projects/{project}/experiments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "metricGoals", "name", "project", "treatments" ],
                members: {
                    description: {},
                    metricGoals: {
                        shape: "Sk"
                    },
                    name: {},
                    onlineAbConfig: {
                        shape: "St"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    randomizationSalt: {},
                    samplingRate: {
                        type: "long"
                    },
                    segment: {},
                    tags: {
                        shape: "Sz"
                    },
                    treatments: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "experiment" ],
                members: {
                    experiment: {
                        shape: "S16"
                    }
                }
            },
            idempotent: true
        },
        CreateFeature: {
            http: {
                requestUri: "/projects/{project}/features",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "project", "variations" ],
                members: {
                    defaultVariation: {},
                    description: {},
                    entityOverrides: {
                        shape: "S1n"
                    },
                    evaluationStrategy: {},
                    name: {},
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    tags: {
                        shape: "Sz"
                    },
                    variations: {
                        shape: "S1p"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    feature: {
                        shape: "S1s"
                    }
                }
            }
        },
        CreateLaunch: {
            http: {
                requestUri: "/projects/{project}/launches",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "groups", "name", "project" ],
                members: {
                    description: {},
                    groups: {
                        shape: "S23"
                    },
                    metricMonitors: {
                        shape: "S26"
                    },
                    name: {},
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    randomizationSalt: {},
                    scheduledSplitsConfig: {
                        shape: "S29"
                    },
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "launch" ],
                members: {
                    launch: {
                        shape: "S2h"
                    }
                }
            }
        },
        CreateProject: {
            http: {
                requestUri: "/projects",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    appConfigResource: {
                        shape: "S2u"
                    },
                    dataDelivery: {
                        type: "structure",
                        members: {
                            cloudWatchLogs: {
                                shape: "S2x"
                            },
                            s3Destination: {
                                shape: "S2z"
                            }
                        }
                    },
                    description: {},
                    name: {},
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        shape: "S34"
                    }
                }
            }
        },
        CreateSegment: {
            http: {
                requestUri: "/segments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "pattern" ],
                members: {
                    description: {},
                    name: {},
                    pattern: {
                        jsonvalue: true
                    },
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "segment" ],
                members: {
                    segment: {
                        shape: "S3e"
                    }
                }
            }
        },
        DeleteExperiment: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{project}/experiments/{experiment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "project" ],
                members: {
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteFeature: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{project}/features/{feature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "feature", "project" ],
                members: {
                    feature: {
                        location: "uri",
                        locationName: "feature"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteLaunch: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{project}/launches/{launch}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteProject: {
            http: {
                method: "DELETE",
                requestUri: "/projects/{project}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteSegment: {
            http: {
                method: "DELETE",
                requestUri: "/segments/{segment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "segment" ],
                members: {
                    segment: {
                        location: "uri",
                        locationName: "segment"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        EvaluateFeature: {
            http: {
                requestUri: "/projects/{project}/evaluations/{feature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "entityId", "feature", "project" ],
                members: {
                    entityId: {},
                    evaluationContext: {
                        jsonvalue: true
                    },
                    feature: {
                        location: "uri",
                        locationName: "feature"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {
                        jsonvalue: true
                    },
                    reason: {},
                    value: {
                        shape: "Sd"
                    },
                    variation: {}
                }
            },
            endpoint: {
                hostPrefix: "dataplane."
            }
        },
        GetExperiment: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/experiments/{experiment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "project" ],
                members: {
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiment: {
                        shape: "S16"
                    }
                }
            }
        },
        GetExperimentResults: {
            http: {
                requestUri: "/projects/{project}/experiments/{experiment}/results",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "metricNames", "project", "treatmentNames" ],
                members: {
                    baseStat: {},
                    endTime: {
                        type: "timestamp"
                    },
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    metricNames: {
                        type: "list",
                        member: {}
                    },
                    period: {
                        type: "long"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    reportNames: {
                        type: "list",
                        member: {}
                    },
                    resultStats: {
                        type: "list",
                        member: {}
                    },
                    startTime: {
                        type: "timestamp"
                    },
                    treatmentNames: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    details: {},
                    reports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                content: {
                                    jsonvalue: true
                                },
                                metricName: {},
                                reportName: {},
                                treatmentName: {}
                            }
                        }
                    },
                    resultsData: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                metricName: {},
                                resultStat: {},
                                treatmentName: {},
                                values: {
                                    type: "list",
                                    member: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    timestamps: {
                        type: "list",
                        member: {
                            type: "timestamp"
                        }
                    }
                }
            }
        },
        GetFeature: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/features/{feature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "feature", "project" ],
                members: {
                    feature: {
                        location: "uri",
                        locationName: "feature"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "feature" ],
                members: {
                    feature: {
                        shape: "S1s"
                    }
                }
            }
        },
        GetLaunch: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/launches/{launch}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launch: {
                        shape: "S2h"
                    }
                }
            }
        },
        GetProject: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        shape: "S34"
                    }
                }
            }
        },
        GetSegment: {
            http: {
                method: "GET",
                requestUri: "/segments/{segment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "segment" ],
                members: {
                    segment: {
                        location: "uri",
                        locationName: "segment"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "segment" ],
                members: {
                    segment: {
                        shape: "S3e"
                    }
                }
            }
        },
        ListExperiments: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/experiments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    experiments: {
                        type: "list",
                        member: {
                            shape: "S16"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFeatures: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/features",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    features: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdTime", "evaluationStrategy", "lastUpdatedTime", "name", "status" ],
                            members: {
                                arn: {},
                                createdTime: {
                                    type: "timestamp"
                                },
                                defaultVariation: {},
                                evaluationRules: {
                                    shape: "S1u"
                                },
                                evaluationStrategy: {},
                                lastUpdatedTime: {
                                    type: "timestamp"
                                },
                                name: {},
                                project: {},
                                status: {},
                                tags: {
                                    shape: "Sz"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLaunches: {
            http: {
                method: "GET",
                requestUri: "/projects/{project}/launches",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    launches: {
                        type: "list",
                        member: {
                            shape: "S2h"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProjects: {
            http: {
                method: "GET",
                requestUri: "/projects",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    projects: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "status" ],
                            members: {
                                activeExperimentCount: {
                                    type: "long"
                                },
                                activeLaunchCount: {
                                    type: "long"
                                },
                                arn: {},
                                createdTime: {
                                    type: "timestamp"
                                },
                                description: {},
                                experimentCount: {
                                    type: "long"
                                },
                                featureCount: {
                                    type: "long"
                                },
                                lastUpdatedTime: {
                                    type: "timestamp"
                                },
                                launchCount: {
                                    type: "long"
                                },
                                name: {},
                                status: {},
                                tags: {
                                    shape: "Sz"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListSegmentReferences: {
            http: {
                method: "GET",
                requestUri: "/segments/{segment}/references",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "segment", "type" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    segment: {
                        location: "uri",
                        locationName: "segment"
                    },
                    type: {
                        location: "querystring",
                        locationName: "type"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    referencedBy: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "type" ],
                            members: {
                                arn: {},
                                endTime: {},
                                lastUpdatedOn: {},
                                name: {},
                                startTime: {},
                                status: {},
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        ListSegments: {
            http: {
                method: "GET",
                requestUri: "/segments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    segments: {
                        type: "list",
                        member: {
                            shape: "S3e"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sz"
                    }
                }
            }
        },
        PutProjectEvents: {
            http: {
                requestUri: "/events/projects/{project}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "events", "project" ],
                members: {
                    events: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "data", "timestamp", "type" ],
                            members: {
                                data: {
                                    jsonvalue: true
                                },
                                timestamp: {
                                    type: "timestamp"
                                },
                                type: {}
                            }
                        }
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    eventResults: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                errorCode: {},
                                errorMessage: {},
                                eventId: {}
                            }
                        }
                    },
                    failedEventCount: {
                        type: "integer"
                    }
                }
            },
            endpoint: {
                hostPrefix: "dataplane."
            }
        },
        StartExperiment: {
            http: {
                requestUri: "/projects/{project}/experiments/{experiment}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "analysisCompleteTime", "experiment", "project" ],
                members: {
                    analysisCompleteTime: {
                        type: "timestamp"
                    },
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    startedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        StartLaunch: {
            http: {
                requestUri: "/projects/{project}/launches/{launch}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "launch" ],
                members: {
                    launch: {
                        shape: "S2h"
                    }
                }
            }
        },
        StopExperiment: {
            http: {
                requestUri: "/projects/{project}/experiments/{experiment}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "project" ],
                members: {
                    desiredState: {},
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    reason: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        StopLaunch: {
            http: {
                requestUri: "/projects/{project}/launches/{launch}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    desiredState: {},
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    reason: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endedTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TestSegmentPattern: {
            http: {
                requestUri: "/test-segment-pattern",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "pattern", "payload" ],
                members: {
                    pattern: {
                        jsonvalue: true
                    },
                    payload: {
                        jsonvalue: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "match" ],
                members: {
                    match: {
                        type: "boolean"
                    }
                }
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateExperiment: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}/experiments/{experiment}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "experiment", "project" ],
                members: {
                    description: {},
                    experiment: {
                        location: "uri",
                        locationName: "experiment"
                    },
                    metricGoals: {
                        shape: "Sk"
                    },
                    onlineAbConfig: {
                        shape: "St"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    randomizationSalt: {},
                    removeSegment: {
                        type: "boolean"
                    },
                    samplingRate: {
                        type: "long"
                    },
                    segment: {},
                    treatments: {
                        shape: "S12"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "experiment" ],
                members: {
                    experiment: {
                        shape: "S16"
                    }
                }
            }
        },
        UpdateFeature: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}/features/{feature}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "feature", "project" ],
                members: {
                    addOrUpdateVariations: {
                        shape: "S1p"
                    },
                    defaultVariation: {},
                    description: {},
                    entityOverrides: {
                        shape: "S1n"
                    },
                    evaluationStrategy: {},
                    feature: {
                        location: "uri",
                        locationName: "feature"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    removeVariations: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "feature" ],
                members: {
                    feature: {
                        shape: "S1s"
                    }
                }
            }
        },
        UpdateLaunch: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}/launches/{launch}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "launch", "project" ],
                members: {
                    description: {},
                    groups: {
                        shape: "S23"
                    },
                    launch: {
                        location: "uri",
                        locationName: "launch"
                    },
                    metricMonitors: {
                        shape: "S26"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    randomizationSalt: {},
                    scheduledSplitsConfig: {
                        shape: "S29"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "launch" ],
                members: {
                    launch: {
                        shape: "S2h"
                    }
                }
            }
        },
        UpdateProject: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    appConfigResource: {
                        shape: "S2u"
                    },
                    description: {},
                    project: {
                        location: "uri",
                        locationName: "project"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        shape: "S34"
                    }
                }
            }
        },
        UpdateProjectDataDelivery: {
            http: {
                method: "PATCH",
                requestUri: "/projects/{project}/data-delivery",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "project" ],
                members: {
                    cloudWatchLogs: {
                        shape: "S2x"
                    },
                    project: {
                        location: "uri",
                        locationName: "project"
                    },
                    s3Destination: {
                        shape: "S2z"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "project" ],
                members: {
                    project: {
                        shape: "S34"
                    }
                }
            }
        }
    },
    shapes: {
        Sd: {
            type: "structure",
            members: {
                boolValue: {
                    type: "boolean"
                },
                doubleValue: {
                    type: "double"
                },
                longValue: {
                    type: "long"
                },
                stringValue: {}
            },
            union: true
        },
        Sk: {
            type: "list",
            member: {
                type: "structure",
                required: [ "metricDefinition" ],
                members: {
                    desiredChange: {},
                    metricDefinition: {
                        shape: "Sn"
                    }
                }
            }
        },
        Sn: {
            type: "structure",
            required: [ "entityIdKey", "name", "valueKey" ],
            members: {
                entityIdKey: {},
                eventPattern: {
                    jsonvalue: true
                },
                name: {},
                unitLabel: {},
                valueKey: {}
            }
        },
        St: {
            type: "structure",
            members: {
                controlTreatmentName: {},
                treatmentWeights: {
                    shape: "Sv"
                }
            }
        },
        Sv: {
            type: "map",
            key: {},
            value: {
                type: "long"
            }
        },
        Sz: {
            type: "map",
            key: {},
            value: {}
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                required: [ "feature", "name", "variation" ],
                members: {
                    description: {},
                    feature: {},
                    name: {},
                    variation: {}
                }
            }
        },
        S16: {
            type: "structure",
            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "status", "type" ],
            members: {
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                description: {},
                execution: {
                    type: "structure",
                    members: {
                        endedTime: {
                            type: "timestamp"
                        },
                        startedTime: {
                            type: "timestamp"
                        }
                    }
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                metricGoals: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "metricDefinition" ],
                        members: {
                            desiredChange: {},
                            metricDefinition: {
                                shape: "S1c"
                            }
                        }
                    }
                },
                name: {},
                onlineAbDefinition: {
                    type: "structure",
                    members: {
                        controlTreatmentName: {},
                        treatmentWeights: {
                            shape: "Sv"
                        }
                    }
                },
                project: {},
                randomizationSalt: {},
                samplingRate: {
                    type: "long"
                },
                schedule: {
                    type: "structure",
                    members: {
                        analysisCompleteTime: {
                            type: "timestamp"
                        }
                    }
                },
                segment: {},
                status: {},
                statusReason: {},
                tags: {
                    shape: "Sz"
                },
                treatments: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            description: {},
                            featureVariations: {
                                shape: "S1k"
                            },
                            name: {}
                        }
                    }
                },
                type: {}
            }
        },
        S1c: {
            type: "structure",
            members: {
                entityIdKey: {},
                eventPattern: {
                    jsonvalue: true
                },
                name: {},
                unitLabel: {},
                valueKey: {}
            }
        },
        S1k: {
            type: "map",
            key: {},
            value: {}
        },
        S1n: {
            type: "map",
            key: {},
            value: {}
        },
        S1p: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "value" ],
                members: {
                    name: {},
                    value: {
                        shape: "Sd"
                    }
                }
            }
        },
        S1s: {
            type: "structure",
            required: [ "arn", "createdTime", "evaluationStrategy", "lastUpdatedTime", "name", "status", "valueType", "variations" ],
            members: {
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                defaultVariation: {},
                description: {},
                entityOverrides: {
                    shape: "S1n"
                },
                evaluationRules: {
                    shape: "S1u"
                },
                evaluationStrategy: {},
                lastUpdatedTime: {
                    type: "timestamp"
                },
                name: {},
                project: {},
                status: {},
                tags: {
                    shape: "Sz"
                },
                valueType: {},
                variations: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            name: {},
                            value: {
                                shape: "Sd"
                            }
                        }
                    }
                }
            }
        },
        S1u: {
            type: "list",
            member: {
                type: "structure",
                required: [ "type" ],
                members: {
                    name: {},
                    type: {}
                }
            }
        },
        S23: {
            type: "list",
            member: {
                type: "structure",
                required: [ "feature", "name", "variation" ],
                members: {
                    description: {},
                    feature: {},
                    name: {},
                    variation: {}
                }
            }
        },
        S26: {
            type: "list",
            member: {
                type: "structure",
                required: [ "metricDefinition" ],
                members: {
                    metricDefinition: {
                        shape: "Sn"
                    }
                }
            }
        },
        S29: {
            type: "structure",
            required: [ "steps" ],
            members: {
                steps: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "groupWeights", "startTime" ],
                        members: {
                            groupWeights: {
                                shape: "S2c"
                            },
                            segmentOverrides: {
                                shape: "S2d"
                            },
                            startTime: {
                                type: "timestamp"
                            }
                        }
                    }
                }
            }
        },
        S2c: {
            type: "map",
            key: {},
            value: {
                type: "long"
            }
        },
        S2d: {
            type: "list",
            member: {
                type: "structure",
                required: [ "evaluationOrder", "segment", "weights" ],
                members: {
                    evaluationOrder: {
                        type: "long"
                    },
                    segment: {},
                    weights: {
                        shape: "S2c"
                    }
                }
            }
        },
        S2h: {
            type: "structure",
            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "status", "type" ],
            members: {
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                description: {},
                execution: {
                    type: "structure",
                    members: {
                        endedTime: {
                            type: "timestamp"
                        },
                        startedTime: {
                            type: "timestamp"
                        }
                    }
                },
                groups: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "featureVariations", "name" ],
                        members: {
                            description: {},
                            featureVariations: {
                                shape: "S1k"
                            },
                            name: {}
                        }
                    }
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                metricMonitors: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "metricDefinition" ],
                        members: {
                            metricDefinition: {
                                shape: "S1c"
                            }
                        }
                    }
                },
                name: {},
                project: {},
                randomizationSalt: {},
                scheduledSplitsDefinition: {
                    type: "structure",
                    members: {
                        steps: {
                            type: "list",
                            member: {
                                type: "structure",
                                required: [ "startTime" ],
                                members: {
                                    groupWeights: {
                                        shape: "S2c"
                                    },
                                    segmentOverrides: {
                                        shape: "S2d"
                                    },
                                    startTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                },
                status: {},
                statusReason: {},
                tags: {
                    shape: "Sz"
                },
                type: {}
            }
        },
        S2u: {
            type: "structure",
            members: {
                applicationId: {},
                environmentId: {}
            }
        },
        S2x: {
            type: "structure",
            members: {
                logGroup: {}
            }
        },
        S2z: {
            type: "structure",
            members: {
                bucket: {},
                prefix: {}
            }
        },
        S34: {
            type: "structure",
            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "status" ],
            members: {
                activeExperimentCount: {
                    type: "long"
                },
                activeLaunchCount: {
                    type: "long"
                },
                appConfigResource: {
                    type: "structure",
                    required: [ "applicationId", "configurationProfileId", "environmentId" ],
                    members: {
                        applicationId: {},
                        configurationProfileId: {},
                        environmentId: {}
                    }
                },
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                dataDelivery: {
                    type: "structure",
                    members: {
                        cloudWatchLogs: {
                            type: "structure",
                            members: {
                                logGroup: {}
                            }
                        },
                        s3Destination: {
                            type: "structure",
                            members: {
                                bucket: {},
                                prefix: {}
                            }
                        }
                    }
                },
                description: {},
                experimentCount: {
                    type: "long"
                },
                featureCount: {
                    type: "long"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                launchCount: {
                    type: "long"
                },
                name: {},
                status: {},
                tags: {
                    shape: "Sz"
                }
            }
        },
        S3e: {
            type: "structure",
            required: [ "arn", "createdTime", "lastUpdatedTime", "name", "pattern" ],
            members: {
                arn: {},
                createdTime: {
                    type: "timestamp"
                },
                description: {},
                experimentCount: {
                    type: "long"
                },
                lastUpdatedTime: {
                    type: "timestamp"
                },
                launchCount: {
                    type: "long"
                },
                name: {},
                pattern: {
                    jsonvalue: true
                },
                tags: {
                    shape: "Sz"
                }
            }
        }
    },
    paginators: {
        ListExperiments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "experiments"
        },
        ListFeatures: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "features"
        },
        ListLaunches: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "launches"
        },
        ListProjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "projects"
        },
        ListSegmentReferences: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "referencedBy"
        },
        ListSegments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "segments"
        }
    }
};

AWS.apiLoader.services["inspector2"] = {};

AWS.Inspector2 = AWS.Service.defineService("inspector2", [ "2020-06-08" ]);

AWS.apiLoader.services["inspector2"]["2020-06-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-06-08",
        endpointPrefix: "inspector2",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "Inspector2",
        serviceFullName: "Inspector2",
        serviceId: "Inspector2",
        signatureVersion: "v4",
        signingName: "inspector2",
        uid: "inspector2-2020-06-08"
    },
    operations: {
        AssociateMember: {
            http: {
                requestUri: "/members/associate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            }
        },
        BatchGetAccountStatus: {
            http: {
                requestUri: "/status/batch/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accounts" ],
                members: {
                    accounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "resourceState", "state" ],
                            members: {
                                accountId: {},
                                resourceState: {
                                    type: "structure",
                                    required: [ "ec2", "ecr" ],
                                    members: {
                                        ec2: {
                                            shape: "Sa"
                                        },
                                        ecr: {
                                            shape: "Sa"
                                        }
                                    }
                                },
                                state: {
                                    shape: "Sa"
                                }
                            }
                        }
                    },
                    failedAccounts: {
                        shape: "Se"
                    }
                }
            }
        },
        BatchGetFreeTrialInfo: {
            http: {
                requestUri: "/freetrialinfo/batchget",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountIds" ],
                members: {
                    accountIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accounts", "failedAccounts" ],
                members: {
                    accounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "freeTrialInfo" ],
                            members: {
                                accountId: {},
                                freeTrialInfo: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "end", "start", "status", "type" ],
                                        members: {
                                            end: {
                                                type: "timestamp"
                                            },
                                            start: {
                                                type: "timestamp"
                                            },
                                            status: {},
                                            type: {}
                                        }
                                    }
                                }
                            }
                        }
                    },
                    failedAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "code", "message" ],
                            members: {
                                accountId: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        CancelFindingsReport: {
            http: {
                requestUri: "/reporting/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "reportId" ],
                members: {
                    reportId: {}
                }
            }
        },
        CreateFilter: {
            http: {
                requestUri: "/filters/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "action", "filterCriteria", "name" ],
                members: {
                    action: {},
                    description: {},
                    filterCriteria: {
                        shape: "S12"
                    },
                    name: {},
                    reason: {},
                    tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        CreateFindingsReport: {
            http: {
                requestUri: "/reporting/create",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "reportFormat", "s3Destination" ],
                members: {
                    filterCriteria: {
                        shape: "S12"
                    },
                    reportFormat: {},
                    s3Destination: {
                        shape: "S1t"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    reportId: {}
                }
            }
        },
        DeleteFilter: {
            http: {
                requestUri: "/filters/delete",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        DescribeOrganizationConfiguration: {
            http: {
                requestUri: "/organizationconfiguration/describe",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    autoEnable: {
                        shape: "S1z"
                    },
                    maxAccountLimitReached: {
                        type: "boolean"
                    }
                }
            }
        },
        Disable: {
            http: {
                requestUri: "/disable",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        shape: "S5"
                    },
                    resourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accounts" ],
                members: {
                    accounts: {
                        shape: "S25"
                    },
                    failedAccounts: {
                        shape: "Se"
                    }
                }
            }
        },
        DisableDelegatedAdminAccount: {
            http: {
                requestUri: "/delegatedadminaccounts/disable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "delegatedAdminAccountId" ],
                members: {
                    delegatedAdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "delegatedAdminAccountId" ],
                members: {
                    delegatedAdminAccountId: {}
                }
            }
        },
        DisassociateMember: {
            http: {
                requestUri: "/members/disassociate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            }
        },
        Enable: {
            http: {
                requestUri: "/enable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceTypes" ],
                members: {
                    accountIds: {
                        shape: "S5"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    resourceTypes: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accounts" ],
                members: {
                    accounts: {
                        shape: "S25"
                    },
                    failedAccounts: {
                        shape: "Se"
                    }
                }
            }
        },
        EnableDelegatedAdminAccount: {
            http: {
                requestUri: "/delegatedadminaccounts/enable",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "delegatedAdminAccountId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    delegatedAdminAccountId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "delegatedAdminAccountId" ],
                members: {
                    delegatedAdminAccountId: {}
                }
            }
        },
        GetConfiguration: {
            http: {
                requestUri: "/configuration/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    ecrConfiguration: {
                        type: "structure",
                        members: {
                            rescanDurationState: {
                                type: "structure",
                                members: {
                                    rescanDuration: {},
                                    status: {},
                                    updatedAt: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        GetDelegatedAdminAccount: {
            http: {
                requestUri: "/delegatedadminaccounts/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    delegatedAdmin: {
                        type: "structure",
                        members: {
                            accountId: {},
                            relationshipStatus: {}
                        }
                    }
                }
            }
        },
        GetFindingsReportStatus: {
            http: {
                requestUri: "/reporting/status/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    reportId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    destination: {
                        shape: "S1t"
                    },
                    errorCode: {},
                    errorMessage: {},
                    filterCriteria: {
                        shape: "S12"
                    },
                    reportId: {},
                    status: {}
                }
            }
        },
        GetMember: {
            http: {
                requestUri: "/members/get",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountId" ],
                members: {
                    accountId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    member: {
                        shape: "S2z"
                    }
                }
            }
        },
        ListAccountPermissions: {
            http: {
                requestUri: "/accountpermissions/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    service: {}
                }
            },
            output: {
                type: "structure",
                required: [ "permissions" ],
                members: {
                    nextToken: {},
                    permissions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "operation", "service" ],
                            members: {
                                operation: {},
                                service: {}
                            }
                        }
                    }
                }
            }
        },
        ListCoverage: {
            http: {
                requestUri: "/coverage/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterCriteria: {
                        shape: "S39"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    coveredResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "accountId", "resourceId", "resourceType", "scanType" ],
                            members: {
                                accountId: {},
                                resourceId: {},
                                resourceMetadata: {
                                    type: "structure",
                                    members: {
                                        ec2: {
                                            type: "structure",
                                            members: {
                                                amiId: {},
                                                platform: {},
                                                tags: {
                                                    shape: "S1o"
                                                }
                                            }
                                        },
                                        ecrImage: {
                                            type: "structure",
                                            members: {
                                                tags: {
                                                    type: "list",
                                                    member: {}
                                                }
                                            }
                                        },
                                        ecrRepository: {
                                            type: "structure",
                                            members: {
                                                name: {},
                                                scanFrequency: {}
                                            }
                                        }
                                    }
                                },
                                resourceType: {},
                                scanStatus: {
                                    type: "structure",
                                    required: [ "reason", "statusCode" ],
                                    members: {
                                        reason: {},
                                        statusCode: {}
                                    }
                                },
                                scanType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListCoverageStatistics: {
            http: {
                requestUri: "/coverage/statistics/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterCriteria: {
                        shape: "S39"
                    },
                    groupBy: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "totalCounts" ],
                members: {
                    countsByGroup: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                count: {
                                    default: 0,
                                    type: "long"
                                },
                                groupKey: {}
                            }
                        }
                    },
                    nextToken: {},
                    totalCounts: {
                        type: "long"
                    }
                }
            }
        },
        ListDelegatedAdminAccounts: {
            http: {
                requestUri: "/delegatedadminaccounts/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    delegatedAdminAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFilters: {
            http: {
                requestUri: "/filters/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    action: {},
                    arns: {
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "filters" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "action", "arn", "createdAt", "criteria", "name", "ownerId", "updatedAt" ],
                            members: {
                                action: {},
                                arn: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                criteria: {
                                    shape: "S12"
                                },
                                description: {},
                                name: {},
                                ownerId: {},
                                reason: {},
                                tags: {
                                    shape: "S1o"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFindingAggregations: {
            http: {
                requestUri: "/findings/aggregation/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "aggregationType" ],
                members: {
                    accountIds: {
                        shape: "S13"
                    },
                    aggregationRequest: {
                        type: "structure",
                        members: {
                            accountAggregation: {
                                type: "structure",
                                members: {
                                    findingType: {},
                                    resourceType: {},
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            amiAggregation: {
                                type: "structure",
                                members: {
                                    amis: {
                                        shape: "S13"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            awsEcrContainerAggregation: {
                                type: "structure",
                                members: {
                                    architectures: {
                                        shape: "S13"
                                    },
                                    imageShas: {
                                        shape: "S13"
                                    },
                                    imageTags: {
                                        shape: "S13"
                                    },
                                    repositories: {
                                        shape: "S13"
                                    },
                                    resourceIds: {
                                        shape: "S13"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            ec2InstanceAggregation: {
                                type: "structure",
                                members: {
                                    amis: {
                                        shape: "S13"
                                    },
                                    instanceIds: {
                                        shape: "S13"
                                    },
                                    instanceTags: {
                                        shape: "S1f"
                                    },
                                    operatingSystems: {
                                        shape: "S13"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            findingTypeAggregation: {
                                type: "structure",
                                members: {
                                    findingType: {},
                                    resourceType: {},
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            imageLayerAggregation: {
                                type: "structure",
                                members: {
                                    layerHashes: {
                                        shape: "S13"
                                    },
                                    repositories: {
                                        shape: "S13"
                                    },
                                    resourceIds: {
                                        shape: "S13"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            packageAggregation: {
                                type: "structure",
                                members: {
                                    packageNames: {
                                        shape: "S13"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            repositoryAggregation: {
                                type: "structure",
                                members: {
                                    repositories: {
                                        shape: "S13"
                                    },
                                    sortBy: {},
                                    sortOrder: {}
                                }
                            },
                            titleAggregation: {
                                type: "structure",
                                members: {
                                    resourceType: {},
                                    sortBy: {},
                                    sortOrder: {},
                                    titles: {
                                        shape: "S13"
                                    },
                                    vulnerabilityIds: {
                                        shape: "S13"
                                    }
                                }
                            }
                        },
                        union: true
                    },
                    aggregationType: {},
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "aggregationType" ],
                members: {
                    aggregationType: {},
                    nextToken: {},
                    responses: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountAggregation: {
                                    type: "structure",
                                    members: {
                                        accountId: {},
                                        severityCounts: {
                                            shape: "S5c"
                                        }
                                    }
                                },
                                amiAggregation: {
                                    type: "structure",
                                    required: [ "ami" ],
                                    members: {
                                        accountId: {},
                                        affectedInstances: {
                                            type: "long"
                                        },
                                        ami: {},
                                        severityCounts: {
                                            shape: "S5c"
                                        }
                                    }
                                },
                                awsEcrContainerAggregation: {
                                    type: "structure",
                                    required: [ "resourceId" ],
                                    members: {
                                        accountId: {},
                                        architecture: {},
                                        imageSha: {},
                                        imageTags: {
                                            type: "list",
                                            member: {}
                                        },
                                        repository: {},
                                        resourceId: {},
                                        severityCounts: {
                                            shape: "S5c"
                                        }
                                    }
                                },
                                ec2InstanceAggregation: {
                                    type: "structure",
                                    required: [ "instanceId" ],
                                    members: {
                                        accountId: {},
                                        ami: {},
                                        instanceId: {},
                                        instanceTags: {
                                            shape: "S1o"
                                        },
                                        networkFindings: {
                                            type: "long"
                                        },
                                        operatingSystem: {},
                                        severityCounts: {
                                            shape: "S5c"
                                        }
                                    }
                                },
                                findingTypeAggregation: {
                                    type: "structure",
                                    members: {
                                        accountId: {},
                                        severityCounts: {
                                            shape: "S5c"
                                        }
                                    }
                                },
                                imageLayerAggregation: {
                                    type: "structure",
                                    required: [ "accountId", "layerHash", "repository", "resourceId" ],
                                    members: {
                                        accountId: {},
                                        layerHash: {},
                                        repository: {},
                                        resourceId: {},
                                        severityCounts: {
                                            shape: "S5c"
                                        }
                                    }
                                },
                                packageAggregation: {
                                    type: "structure",
                                    required: [ "packageName" ],
                                    members: {
                                        accountId: {},
                                        packageName: {},
                                        severityCounts: {
                                            shape: "S5c"
                                        }
                                    }
                                },
                                repositoryAggregation: {
                                    type: "structure",
                                    required: [ "repository" ],
                                    members: {
                                        accountId: {},
                                        affectedImages: {
                                            type: "long"
                                        },
                                        repository: {},
                                        severityCounts: {
                                            shape: "S5c"
                                        }
                                    }
                                },
                                titleAggregation: {
                                    type: "structure",
                                    required: [ "title" ],
                                    members: {
                                        accountId: {},
                                        severityCounts: {
                                            shape: "S5c"
                                        },
                                        title: {},
                                        vulnerabilityId: {}
                                    }
                                }
                            },
                            union: true
                        }
                    }
                }
            }
        },
        ListFindings: {
            http: {
                requestUri: "/findings/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filterCriteria: {
                        shape: "S12"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    sortCriteria: {
                        type: "structure",
                        required: [ "field", "sortOrder" ],
                        members: {
                            field: {},
                            sortOrder: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    findings: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "awsAccountId", "description", "findingArn", "firstObservedAt", "lastObservedAt", "remediation", "resources", "severity", "status", "type" ],
                            members: {
                                awsAccountId: {},
                                description: {},
                                findingArn: {},
                                firstObservedAt: {
                                    type: "timestamp"
                                },
                                fixAvailable: {},
                                inspectorScore: {
                                    type: "double"
                                },
                                inspectorScoreDetails: {
                                    type: "structure",
                                    members: {
                                        adjustedCvss: {
                                            type: "structure",
                                            required: [ "score", "scoreSource", "scoringVector", "version" ],
                                            members: {
                                                adjustments: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "metric", "reason" ],
                                                        members: {
                                                            metric: {},
                                                            reason: {}
                                                        }
                                                    }
                                                },
                                                cvssSource: {},
                                                score: {
                                                    type: "double"
                                                },
                                                scoreSource: {},
                                                scoringVector: {},
                                                version: {}
                                            }
                                        }
                                    }
                                },
                                lastObservedAt: {
                                    type: "timestamp"
                                },
                                networkReachabilityDetails: {
                                    type: "structure",
                                    required: [ "networkPath", "openPortRange", "protocol" ],
                                    members: {
                                        networkPath: {
                                            type: "structure",
                                            members: {
                                                steps: {
                                                    type: "list",
                                                    member: {
                                                        type: "structure",
                                                        required: [ "componentId", "componentType" ],
                                                        members: {
                                                            componentId: {},
                                                            componentType: {}
                                                        }
                                                    }
                                                }
                                            }
                                        },
                                        openPortRange: {
                                            type: "structure",
                                            required: [ "begin", "end" ],
                                            members: {
                                                begin: {
                                                    type: "integer"
                                                },
                                                end: {
                                                    type: "integer"
                                                }
                                            }
                                        },
                                        protocol: {}
                                    }
                                },
                                packageVulnerabilityDetails: {
                                    type: "structure",
                                    required: [ "source", "vulnerabilityId" ],
                                    members: {
                                        cvss: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "baseScore", "scoringVector", "source", "version" ],
                                                members: {
                                                    baseScore: {
                                                        type: "double"
                                                    },
                                                    scoringVector: {},
                                                    source: {},
                                                    version: {}
                                                }
                                            }
                                        },
                                        referenceUrls: {
                                            type: "list",
                                            member: {}
                                        },
                                        relatedVulnerabilities: {
                                            type: "list",
                                            member: {}
                                        },
                                        source: {},
                                        sourceUrl: {},
                                        vendorCreatedAt: {
                                            type: "timestamp"
                                        },
                                        vendorSeverity: {},
                                        vendorUpdatedAt: {
                                            type: "timestamp"
                                        },
                                        vulnerabilityId: {},
                                        vulnerablePackages: {
                                            type: "list",
                                            member: {
                                                type: "structure",
                                                required: [ "name", "version" ],
                                                members: {
                                                    arch: {},
                                                    epoch: {
                                                        default: 0,
                                                        type: "integer"
                                                    },
                                                    filePath: {},
                                                    fixedInVersion: {},
                                                    name: {},
                                                    packageManager: {},
                                                    release: {},
                                                    remediation: {},
                                                    sourceLayerHash: {},
                                                    version: {}
                                                }
                                            }
                                        }
                                    }
                                },
                                remediation: {
                                    type: "structure",
                                    members: {
                                        recommendation: {
                                            type: "structure",
                                            members: {
                                                Url: {},
                                                text: {}
                                            }
                                        }
                                    }
                                },
                                resources: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "id", "type" ],
                                        members: {
                                            details: {
                                                type: "structure",
                                                members: {
                                                    awsEc2Instance: {
                                                        type: "structure",
                                                        members: {
                                                            iamInstanceProfileArn: {},
                                                            imageId: {},
                                                            ipV4Addresses: {
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            ipV6Addresses: {
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            keyName: {},
                                                            launchedAt: {
                                                                type: "timestamp"
                                                            },
                                                            platform: {},
                                                            subnetId: {},
                                                            type: {},
                                                            vpcId: {}
                                                        }
                                                    },
                                                    awsEcrContainerImage: {
                                                        type: "structure",
                                                        required: [ "imageHash", "registry", "repositoryName" ],
                                                        members: {
                                                            architecture: {},
                                                            author: {},
                                                            imageHash: {},
                                                            imageTags: {
                                                                type: "list",
                                                                member: {}
                                                            },
                                                            platform: {},
                                                            pushedAt: {
                                                                type: "timestamp"
                                                            },
                                                            registry: {},
                                                            repositoryName: {}
                                                        }
                                                    }
                                                }
                                            },
                                            id: {},
                                            partition: {},
                                            region: {},
                                            tags: {
                                                shape: "S1o"
                                            },
                                            type: {}
                                        }
                                    }
                                },
                                severity: {},
                                status: {},
                                title: {},
                                type: {},
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListMembers: {
            http: {
                requestUri: "/members/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    onlyAssociated: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    members: {
                        type: "list",
                        member: {
                            shape: "S2z"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S1o"
                    }
                }
            }
        },
        ListUsageTotals: {
            http: {
                requestUri: "/usage/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    accountIds: {
                        type: "list",
                        member: {}
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    totals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                accountId: {},
                                usage: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        members: {
                                            currency: {},
                                            estimatedMonthlyCost: {
                                                default: 0,
                                                type: "double"
                                            },
                                            total: {
                                                default: 0,
                                                type: "double"
                                            },
                                            type: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S1o"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateConfiguration: {
            http: {
                requestUri: "/configuration/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ecrConfiguration" ],
                members: {
                    ecrConfiguration: {
                        type: "structure",
                        required: [ "rescanDuration" ],
                        members: {
                            rescanDuration: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateFilter: {
            http: {
                requestUri: "/filters/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "filterArn" ],
                members: {
                    action: {},
                    description: {},
                    filterArn: {},
                    filterCriteria: {
                        shape: "S12"
                    },
                    name: {},
                    reason: {}
                }
            },
            output: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {}
                }
            }
        },
        UpdateOrganizationConfiguration: {
            http: {
                requestUri: "/organizationconfiguration/update",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "autoEnable" ],
                members: {
                    autoEnable: {
                        shape: "S1z"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "autoEnable" ],
                members: {
                    autoEnable: {
                        shape: "S1z"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "list",
            member: {}
        },
        Sa: {
            type: "structure",
            required: [ "errorCode", "errorMessage", "status" ],
            members: {
                errorCode: {},
                errorMessage: {},
                status: {}
            }
        },
        Se: {
            type: "list",
            member: {
                type: "structure",
                required: [ "accountId", "errorCode", "errorMessage" ],
                members: {
                    accountId: {},
                    errorCode: {},
                    errorMessage: {},
                    resourceStatus: {
                        shape: "Sg"
                    },
                    status: {}
                }
            }
        },
        Sg: {
            type: "structure",
            required: [ "ec2", "ecr" ],
            members: {
                ec2: {},
                ecr: {}
            }
        },
        S12: {
            type: "structure",
            members: {
                awsAccountId: {
                    shape: "S13"
                },
                componentId: {
                    shape: "S13"
                },
                componentType: {
                    shape: "S13"
                },
                ec2InstanceImageId: {
                    shape: "S13"
                },
                ec2InstanceSubnetId: {
                    shape: "S13"
                },
                ec2InstanceVpcId: {
                    shape: "S13"
                },
                ecrImageArchitecture: {
                    shape: "S13"
                },
                ecrImageHash: {
                    shape: "S13"
                },
                ecrImagePushedAt: {
                    shape: "S17"
                },
                ecrImageRegistry: {
                    shape: "S13"
                },
                ecrImageRepositoryName: {
                    shape: "S13"
                },
                ecrImageTags: {
                    shape: "S13"
                },
                findingArn: {
                    shape: "S13"
                },
                findingStatus: {
                    shape: "S13"
                },
                findingType: {
                    shape: "S13"
                },
                firstObservedAt: {
                    shape: "S17"
                },
                fixAvailable: {
                    shape: "S13"
                },
                inspectorScore: {
                    type: "list",
                    member: {
                        shape: "S1a"
                    }
                },
                lastObservedAt: {
                    shape: "S17"
                },
                networkProtocol: {
                    shape: "S13"
                },
                portRange: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            beginInclusive: {
                                type: "integer"
                            },
                            endInclusive: {
                                type: "integer"
                            }
                        }
                    }
                },
                relatedVulnerabilities: {
                    shape: "S13"
                },
                resourceId: {
                    shape: "S13"
                },
                resourceTags: {
                    shape: "S1f"
                },
                resourceType: {
                    shape: "S13"
                },
                severity: {
                    shape: "S13"
                },
                title: {
                    shape: "S13"
                },
                updatedAt: {
                    shape: "S17"
                },
                vendorSeverity: {
                    shape: "S13"
                },
                vulnerabilityId: {
                    shape: "S13"
                },
                vulnerabilitySource: {
                    shape: "S13"
                },
                vulnerablePackages: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            architecture: {
                                shape: "S14"
                            },
                            epoch: {
                                shape: "S1a"
                            },
                            name: {
                                shape: "S14"
                            },
                            release: {
                                shape: "S14"
                            },
                            sourceLayerHash: {
                                shape: "S14"
                            },
                            version: {
                                shape: "S14"
                            }
                        }
                    }
                }
            }
        },
        S13: {
            type: "list",
            member: {
                shape: "S14"
            }
        },
        S14: {
            type: "structure",
            required: [ "comparison", "value" ],
            members: {
                comparison: {},
                value: {}
            }
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    endInclusive: {
                        type: "timestamp"
                    },
                    startInclusive: {
                        type: "timestamp"
                    }
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                lowerInclusive: {
                    type: "double"
                },
                upperInclusive: {
                    type: "double"
                }
            }
        },
        S1f: {
            type: "list",
            member: {
                type: "structure",
                required: [ "comparison", "key" ],
                members: {
                    comparison: {},
                    key: {},
                    value: {}
                }
            }
        },
        S1o: {
            type: "map",
            key: {},
            value: {}
        },
        S1t: {
            type: "structure",
            required: [ "bucketName", "kmsKeyArn" ],
            members: {
                bucketName: {},
                keyPrefix: {},
                kmsKeyArn: {}
            }
        },
        S1z: {
            type: "structure",
            required: [ "ec2", "ecr" ],
            members: {
                ec2: {
                    type: "boolean"
                },
                ecr: {
                    type: "boolean"
                }
            }
        },
        S25: {
            type: "list",
            member: {
                type: "structure",
                required: [ "accountId", "resourceStatus", "status" ],
                members: {
                    accountId: {},
                    resourceStatus: {
                        shape: "Sg"
                    },
                    status: {}
                }
            }
        },
        S2z: {
            type: "structure",
            members: {
                accountId: {},
                delegatedAdminAccountId: {},
                relationshipStatus: {},
                updatedAt: {
                    type: "timestamp"
                }
            }
        },
        S39: {
            type: "structure",
            members: {
                accountId: {
                    shape: "S3a"
                },
                ec2InstanceTags: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "comparison", "key" ],
                        members: {
                            comparison: {},
                            key: {},
                            value: {}
                        }
                    }
                },
                ecrImageTags: {
                    shape: "S3a"
                },
                ecrRepositoryName: {
                    shape: "S3a"
                },
                resourceId: {
                    shape: "S3a"
                },
                resourceType: {
                    shape: "S3a"
                },
                scanStatusCode: {
                    shape: "S3a"
                },
                scanStatusReason: {
                    shape: "S3a"
                },
                scanType: {
                    shape: "S3a"
                }
            }
        },
        S3a: {
            type: "list",
            member: {
                type: "structure",
                required: [ "comparison", "value" ],
                members: {
                    comparison: {},
                    value: {}
                }
            }
        },
        S5c: {
            type: "structure",
            members: {
                all: {
                    type: "long"
                },
                critical: {
                    type: "long"
                },
                high: {
                    type: "long"
                },
                medium: {
                    type: "long"
                }
            }
        }
    },
    paginators: {
        ListAccountPermissions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "permissions"
        },
        ListCoverage: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "coveredResources"
        },
        ListCoverageStatistics: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "countsByGroup"
        },
        ListDelegatedAdminAccounts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "delegatedAdminAccounts"
        },
        ListFilters: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "filters"
        },
        ListFindingAggregations: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "responses"
        },
        ListFindings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "findings"
        },
        ListMembers: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "members"
        },
        ListUsageTotals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "totals"
        }
    }
};

AWS.apiLoader.services["rbin"] = {};

AWS.Rbin = AWS.Service.defineService("rbin", [ "2021-06-15" ]);

AWS.apiLoader.services["rbin"]["2021-06-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-06-15",
        endpointPrefix: "rbin",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon Recycle Bin",
        serviceId: "rbin",
        signatureVersion: "v4",
        signingName: "rbin",
        uid: "rbin-2021-06-15"
    },
    operations: {
        CreateRule: {
            http: {
                requestUri: "/rules",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "RetentionPeriod", "ResourceType" ],
                members: {
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    Description: {},
                    Tags: {
                        shape: "S6"
                    },
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Identifier: {},
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    Description: {},
                    Tags: {
                        shape: "S6"
                    },
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    },
                    Status: {}
                }
            }
        },
        DeleteRule: {
            http: {
                method: "DELETE",
                requestUri: "/rules/{identifier}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetRule: {
            http: {
                method: "GET",
                requestUri: "/rules/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Identifier: {},
                    Description: {},
                    ResourceType: {},
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    ResourceTags: {
                        shape: "Sb"
                    },
                    Status: {}
                }
            }
        },
        ListRules: {
            http: {
                requestUri: "/list-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceType" ],
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Rules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Identifier: {},
                                Description: {},
                                RetentionPeriod: {
                                    shape: "S2"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "S6"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    Tags: {
                        shape: "S6"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateRule: {
            http: {
                method: "PATCH",
                requestUri: "/rules/{identifier}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Identifier" ],
                members: {
                    Identifier: {
                        location: "uri",
                        locationName: "identifier"
                    },
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    Description: {},
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Identifier: {},
                    RetentionPeriod: {
                        shape: "S2"
                    },
                    Description: {},
                    ResourceType: {},
                    ResourceTags: {
                        shape: "Sb"
                    },
                    Status: {}
                }
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            required: [ "RetentionPeriodValue", "RetentionPeriodUnit" ],
            members: {
                RetentionPeriodValue: {
                    type: "integer"
                },
                RetentionPeriodUnit: {}
            }
        },
        S6: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sb: {
            type: "list",
            member: {
                type: "structure",
                required: [ "ResourceTagKey" ],
                members: {
                    ResourceTagKey: {},
                    ResourceTagValue: {}
                }
            }
        }
    },
    paginators: {
        ListRules: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Rules"
        }
    }
};

AWS.apiLoader.services["rum"] = {};

AWS.RUM = AWS.Service.defineService("rum", [ "2018-05-10" ]);

AWS.apiLoader.services["rum"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "rum",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "CloudWatch RUM",
        serviceId: "RUM",
        signatureVersion: "v4",
        signingName: "rum",
        uid: "rum-2018-05-10"
    },
    operations: {
        CreateAppMonitor: {
            http: {
                requestUri: "/appmonitor",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Domain", "Name" ],
                members: {
                    AppMonitorConfiguration: {
                        shape: "S2"
                    },
                    CwLogEnabled: {
                        type: "boolean"
                    },
                    Domain: {},
                    Name: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Id: {}
                }
            },
            idempotent: true
        },
        DeleteAppMonitor: {
            http: {
                method: "DELETE",
                requestUri: "/appmonitor/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetAppMonitor: {
            http: {
                method: "GET",
                requestUri: "/appmonitor/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppMonitor: {
                        type: "structure",
                        members: {
                            AppMonitorConfiguration: {
                                shape: "S2"
                            },
                            Created: {},
                            DataStorage: {
                                type: "structure",
                                members: {
                                    CwLog: {
                                        type: "structure",
                                        members: {
                                            CwLogEnabled: {
                                                type: "boolean"
                                            },
                                            CwLogGroup: {}
                                        }
                                    }
                                }
                            },
                            Domain: {},
                            Id: {},
                            LastModified: {},
                            Name: {},
                            State: {},
                            Tags: {
                                shape: "Sf"
                            }
                        }
                    }
                }
            }
        },
        GetAppMonitorData: {
            http: {
                requestUri: "/appmonitor/{Name}/data",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "TimeRange" ],
                members: {
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {},
                                Values: {
                                    type: "list",
                                    member: {}
                                }
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    NextToken: {},
                    TimeRange: {
                        type: "structure",
                        required: [ "After" ],
                        members: {
                            After: {
                                type: "long"
                            },
                            Before: {
                                type: "long"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Events: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {}
                }
            }
        },
        ListAppMonitors: {
            http: {
                requestUri: "/appmonitors",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AppMonitorSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Created: {},
                                Id: {},
                                LastModified: {},
                                Name: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sf"
                    }
                }
            }
        },
        PutRumEvents: {
            http: {
                requestUri: "/appmonitors/{Id}/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "AppMonitorDetails", "BatchId", "Id", "RumEvents", "UserDetails" ],
                members: {
                    AppMonitorDetails: {
                        type: "structure",
                        members: {
                            id: {},
                            name: {},
                            version: {}
                        }
                    },
                    BatchId: {},
                    Id: {
                        location: "uri",
                        locationName: "Id"
                    },
                    RumEvents: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "details", "id", "timestamp", "type" ],
                            members: {
                                details: {
                                    jsonvalue: true
                                },
                                id: {},
                                metadata: {
                                    jsonvalue: true
                                },
                                timestamp: {
                                    type: "timestamp"
                                },
                                type: {}
                            }
                        }
                    },
                    UserDetails: {
                        type: "structure",
                        members: {
                            sessionId: {},
                            userId: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "dataplane."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateAppMonitor: {
            http: {
                method: "PATCH",
                requestUri: "/appmonitor/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    AppMonitorConfiguration: {
                        shape: "S2"
                    },
                    CwLogEnabled: {
                        type: "boolean"
                    },
                    Domain: {},
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S2: {
            type: "structure",
            members: {
                AllowCookies: {
                    type: "boolean"
                },
                EnableXRay: {
                    type: "boolean"
                },
                ExcludedPages: {
                    shape: "S4"
                },
                FavoritePages: {
                    type: "list",
                    member: {}
                },
                GuestRoleArn: {},
                IdentityPoolId: {},
                IncludedPages: {
                    shape: "S4"
                },
                SessionSampleRate: {
                    type: "double"
                },
                Telemetries: {
                    type: "list",
                    member: {}
                }
            }
        },
        S4: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        GetAppMonitorData: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Events"
        },
        ListAppMonitors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AppMonitorSummaries"
        }
    }
};

AWS.apiLoader.services["backupgateway"] = {};

AWS.BackupGateway = AWS.Service.defineService("backupgateway", [ "2021-01-01" ]);

AWS.apiLoader.services["backupgateway"]["2021-01-01"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-01-01",
        endpointPrefix: "backup-gateway",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS Backup Gateway",
        serviceId: "Backup Gateway",
        signatureVersion: "v4",
        signingName: "backup-gateway",
        targetPrefix: "BackupOnPremises_v20210101",
        uid: "backup-gateway-2021-01-01"
    },
    operations: {
        AssociateGatewayToServer: {
            input: {
                type: "structure",
                required: [ "GatewayArn", "ServerArn" ],
                members: {
                    GatewayArn: {},
                    ServerArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        CreateGateway: {
            input: {
                type: "structure",
                required: [ "ActivationKey", "GatewayDisplayName", "GatewayType" ],
                members: {
                    ActivationKey: {},
                    GatewayDisplayName: {},
                    GatewayType: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        DeleteGateway: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            },
            idempotent: true
        },
        DeleteHypervisor: {
            input: {
                type: "structure",
                required: [ "HypervisorArn" ],
                members: {
                    HypervisorArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    HypervisorArn: {}
                }
            },
            idempotent: true
        },
        DisassociateGatewayFromServer: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        GetGateway: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateway: {
                        type: "structure",
                        members: {
                            GatewayArn: {},
                            GatewayDisplayName: {},
                            GatewayType: {},
                            HypervisorId: {},
                            LastSeenTime: {
                                type: "timestamp"
                            },
                            MaintenanceStartTime: {
                                type: "structure",
                                required: [ "HourOfDay", "MinuteOfHour" ],
                                members: {
                                    DayOfMonth: {
                                        type: "integer"
                                    },
                                    DayOfWeek: {
                                        type: "integer"
                                    },
                                    HourOfDay: {
                                        type: "integer"
                                    },
                                    MinuteOfHour: {
                                        type: "integer"
                                    }
                                }
                            },
                            NextUpdateAvailabilityTime: {
                                type: "timestamp"
                            },
                            VpcEndpoint: {}
                        }
                    }
                }
            }
        },
        GetVirtualMachine: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    VirtualMachine: {
                        type: "structure",
                        members: {
                            HostName: {},
                            HypervisorId: {},
                            LastBackupDate: {
                                type: "timestamp"
                            },
                            Name: {},
                            Path: {},
                            ResourceArn: {}
                        }
                    }
                }
            }
        },
        ImportHypervisorConfiguration: {
            input: {
                type: "structure",
                required: [ "Host", "Name" ],
                members: {
                    Host: {},
                    KmsKeyArn: {},
                    Name: {},
                    Password: {
                        shape: "S14"
                    },
                    Tags: {
                        shape: "S9"
                    },
                    Username: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HypervisorArn: {}
                }
            }
        },
        ListGateways: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Gateways: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                GatewayArn: {},
                                GatewayDisplayName: {},
                                GatewayType: {},
                                HypervisorId: {},
                                LastSeenTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListHypervisors: {
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Hypervisors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Host: {},
                                HypervisorArn: {},
                                KmsKeyArn: {},
                                Name: {},
                                State: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            }
        },
        ListVirtualMachines: {
            input: {
                type: "structure",
                members: {
                    HypervisorArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    VirtualMachines: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                HostName: {},
                                HypervisorId: {},
                                LastBackupDate: {
                                    type: "timestamp"
                                },
                                Name: {},
                                Path: {},
                                ResourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        PutMaintenanceStartTime: {
            input: {
                type: "structure",
                required: [ "GatewayArn", "HourOfDay", "MinuteOfHour" ],
                members: {
                    DayOfMonth: {
                        type: "integer"
                    },
                    DayOfWeek: {
                        type: "integer"
                    },
                    GatewayArn: {},
                    HourOfDay: {
                        type: "integer"
                    },
                    MinuteOfHour: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "S9"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceARN: {}
                }
            }
        },
        TestHypervisorConfiguration: {
            input: {
                type: "structure",
                required: [ "GatewayArn", "Host" ],
                members: {
                    GatewayArn: {},
                    Host: {},
                    Password: {
                        shape: "S14"
                    },
                    Username: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceARN: {}
                }
            }
        },
        UpdateGatewayInformation: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {},
                    GatewayDisplayName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        UpdateGatewaySoftwareNow: {
            input: {
                type: "structure",
                required: [ "GatewayArn" ],
                members: {
                    GatewayArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    GatewayArn: {}
                }
            }
        },
        UpdateHypervisor: {
            input: {
                type: "structure",
                required: [ "HypervisorArn" ],
                members: {
                    Host: {},
                    HypervisorArn: {},
                    Name: {},
                    Password: {
                        shape: "S14"
                    },
                    Username: {
                        shape: "S15"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    HypervisorArn: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S14: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ListGateways: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Gateways"
        },
        ListHypervisors: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Hypervisors"
        },
        ListVirtualMachines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "VirtualMachines"
        }
    }
};

AWS.apiLoader.services["iottwinmaker"] = {};

AWS.IoTTwinMaker = AWS.Service.defineService("iottwinmaker", [ "2021-11-29" ]);

AWS.apiLoader.services["iottwinmaker"]["2021-11-29"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-11-29",
        endpointPrefix: "iottwinmaker",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS IoT TwinMaker",
        serviceId: "IoTTwinMaker",
        signatureVersion: "v4",
        signingName: "iottwinmaker",
        uid: "iottwinmaker-2021-11-29"
    },
    operations: {
        BatchPutPropertyValues: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entity-properties",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "entries", "workspaceId" ],
                members: {
                    entries: {
                        type: "list",
                        member: {
                            shape: "S3"
                        }
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errorEntries" ],
                members: {
                    errorEntries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errors" ],
                            members: {
                                errors: {
                                    type: "list",
                                    member: {
                                        type: "structure",
                                        required: [ "entry", "errorCode", "errorMessage" ],
                                        members: {
                                            entry: {
                                                shape: "S3"
                                            },
                                            errorCode: {},
                                            errorMessage: {}
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        CreateComponentType: {
            http: {
                requestUri: "/workspaces/{workspaceId}/component-types/{componentTypeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "componentTypeId", "workspaceId" ],
                members: {
                    componentTypeId: {
                        location: "uri",
                        locationName: "componentTypeId"
                    },
                    description: {},
                    extendsFrom: {
                        shape: "Sv"
                    },
                    functions: {
                        shape: "Sw"
                    },
                    isSingleton: {
                        type: "boolean"
                    },
                    propertyDefinitions: {
                        shape: "S13"
                    },
                    tags: {
                        shape: "S1a"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime", "state" ],
                members: {
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateEntity: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entities",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "entityName", "workspaceId" ],
                members: {
                    components: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                componentTypeId: {},
                                description: {},
                                properties: {
                                    shape: "S1j"
                                }
                            }
                        }
                    },
                    description: {},
                    entityId: {},
                    entityName: {},
                    parentEntityId: {},
                    tags: {
                        shape: "S1a"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime", "entityId", "state" ],
                members: {
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    entityId: {},
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateScene: {
            http: {
                requestUri: "/workspaces/{workspaceId}/scenes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contentLocation", "sceneId", "workspaceId" ],
                members: {
                    capabilities: {
                        shape: "S1q"
                    },
                    contentLocation: {},
                    description: {},
                    sceneId: {},
                    tags: {
                        shape: "S1a"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime" ],
                members: {
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        CreateWorkspace: {
            http: {
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "role", "s3Location", "workspaceId" ],
                members: {
                    description: {},
                    role: {},
                    s3Location: {},
                    tags: {
                        shape: "S1a"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime" ],
                members: {
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteComponentType: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/component-types/{componentTypeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "componentTypeId", "workspaceId" ],
                members: {
                    componentTypeId: {
                        location: "uri",
                        locationName: "componentTypeId"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "state" ],
                members: {
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteEntity: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/entities/{entityId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "entityId", "workspaceId" ],
                members: {
                    entityId: {
                        location: "uri",
                        locationName: "entityId"
                    },
                    isRecursive: {
                        location: "querystring",
                        locationName: "isRecursive",
                        type: "boolean"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "state" ],
                members: {
                    state: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteScene: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}/scenes/{sceneId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sceneId", "workspaceId" ],
                members: {
                    sceneId: {
                        location: "uri",
                        locationName: "sceneId"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        DeleteWorkspace: {
            http: {
                method: "DELETE",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetComponentType: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/component-types/{componentTypeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "componentTypeId", "workspaceId" ],
                members: {
                    componentTypeId: {
                        location: "uri",
                        locationName: "componentTypeId"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "componentTypeId", "creationDateTime", "updateDateTime", "workspaceId" ],
                members: {
                    arn: {},
                    componentTypeId: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    description: {},
                    extendsFrom: {
                        shape: "Sv"
                    },
                    functions: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                implementedBy: {
                                    shape: "Sy"
                                },
                                isInherited: {
                                    type: "boolean"
                                },
                                requiredProperties: {
                                    shape: "S11"
                                },
                                scope: {}
                            }
                        }
                    },
                    isAbstract: {
                        type: "boolean"
                    },
                    isSchemaInitialized: {
                        type: "boolean"
                    },
                    isSingleton: {
                        type: "boolean"
                    },
                    propertyDefinitions: {
                        type: "map",
                        key: {},
                        value: {
                            shape: "S2b"
                        }
                    },
                    status: {
                        shape: "S2c"
                    },
                    updateDateTime: {
                        type: "timestamp"
                    },
                    workspaceId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetEntity: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/entities/{entityId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "entityId", "workspaceId" ],
                members: {
                    entityId: {
                        location: "uri",
                        locationName: "entityId"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime", "entityId", "entityName", "hasChildEntities", "parentEntityId", "status", "updateDateTime", "workspaceId" ],
                members: {
                    arn: {},
                    components: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                componentName: {},
                                componentTypeId: {},
                                definedIn: {},
                                description: {},
                                properties: {
                                    type: "map",
                                    key: {},
                                    value: {
                                        type: "structure",
                                        members: {
                                            definition: {
                                                shape: "S2b"
                                            },
                                            value: {
                                                shape: "Sd"
                                            }
                                        }
                                    }
                                },
                                status: {
                                    shape: "S2c"
                                }
                            }
                        }
                    },
                    creationDateTime: {
                        type: "timestamp"
                    },
                    description: {},
                    entityId: {},
                    entityName: {},
                    hasChildEntities: {
                        type: "boolean"
                    },
                    parentEntityId: {},
                    status: {
                        shape: "S2c"
                    },
                    updateDateTime: {
                        type: "timestamp"
                    },
                    workspaceId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetPropertyValue: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entity-properties/value",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "selectedProperties", "workspaceId" ],
                members: {
                    componentName: {},
                    componentTypeId: {},
                    entityId: {},
                    selectedProperties: {
                        shape: "S2n"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "propertyValues" ],
                members: {
                    propertyValues: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            required: [ "propertyReference" ],
                            members: {
                                propertyReference: {
                                    shape: "S4"
                                },
                                propertyValue: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetPropertyValueHistory: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entity-properties/history",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "selectedProperties", "workspaceId" ],
                members: {
                    componentName: {},
                    componentTypeId: {},
                    endDateTime: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated and will throw an error in the future. Use endTime instead.",
                        type: "timestamp"
                    },
                    endTime: {},
                    entityId: {},
                    interpolation: {
                        type: "structure",
                        members: {
                            interpolationType: {},
                            intervalInSeconds: {
                                type: "long"
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    orderByTime: {},
                    propertyFilters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                operator: {},
                                propertyName: {},
                                value: {
                                    shape: "Sd"
                                }
                            }
                        }
                    },
                    selectedProperties: {
                        shape: "S2n"
                    },
                    startDateTime: {
                        deprecated: true,
                        deprecatedMessage: "This field is deprecated and will throw an error in the future. Use startTime instead.",
                        type: "timestamp"
                    },
                    startTime: {},
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "propertyValues" ],
                members: {
                    nextToken: {},
                    propertyValues: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "entityPropertyReference" ],
                            members: {
                                entityPropertyReference: {
                                    shape: "S4"
                                },
                                values: {
                                    type: "list",
                                    member: {
                                        shape: "Sa"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "data."
            }
        },
        GetScene: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}/scenes/{sceneId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sceneId", "workspaceId" ],
                members: {
                    sceneId: {
                        location: "uri",
                        locationName: "sceneId"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "contentLocation", "creationDateTime", "sceneId", "updateDateTime", "workspaceId" ],
                members: {
                    arn: {},
                    capabilities: {
                        shape: "S1q"
                    },
                    contentLocation: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    description: {},
                    sceneId: {},
                    updateDateTime: {
                        type: "timestamp"
                    },
                    workspaceId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        GetWorkspace: {
            http: {
                method: "GET",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "creationDateTime", "role", "s3Location", "updateDateTime", "workspaceId" ],
                members: {
                    arn: {},
                    creationDateTime: {
                        type: "timestamp"
                    },
                    description: {},
                    role: {},
                    s3Location: {},
                    updateDateTime: {
                        type: "timestamp"
                    },
                    workspaceId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListComponentTypes: {
            http: {
                requestUri: "/workspaces/{workspaceId}/component-types-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                extendsFrom: {},
                                isAbstract: {
                                    type: "boolean"
                                },
                                namespace: {}
                            },
                            union: true
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "componentTypeSummaries", "workspaceId" ],
                members: {
                    componentTypeSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "componentTypeId", "creationDateTime", "updateDateTime" ],
                            members: {
                                arn: {},
                                componentTypeId: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                description: {},
                                status: {
                                    shape: "S2c"
                                },
                                updateDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    workspaceId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListEntities: {
            http: {
                requestUri: "/workspaces/{workspaceId}/entities-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                componentTypeId: {},
                                externalId: {},
                                parentEntityId: {}
                            },
                            union: true
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    entitySummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "creationDateTime", "entityId", "entityName", "status", "updateDateTime" ],
                            members: {
                                arn: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                description: {},
                                entityId: {},
                                entityName: {},
                                hasChildEntities: {
                                    type: "boolean"
                                },
                                parentEntityId: {},
                                status: {
                                    shape: "S2c"
                                },
                                updateDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListScenes: {
            http: {
                requestUri: "/workspaces/{workspaceId}/scenes-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    sceneSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "contentLocation", "creationDateTime", "sceneId", "updateDateTime" ],
                            members: {
                                arn: {},
                                contentLocation: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                description: {},
                                sceneId: {},
                                updateDateTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListTagsForResource: {
            http: {
                requestUri: "/tags-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    tags: {
                        shape: "S1a"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        ListWorkspaces: {
            http: {
                requestUri: "/workspaces-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    workspaceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "creationDateTime", "updateDateTime", "workspaceId" ],
                            members: {
                                arn: {},
                                creationDateTime: {
                                    type: "timestamp"
                                },
                                description: {},
                                updateDateTime: {
                                    type: "timestamp"
                                },
                                workspaceId: {}
                            }
                        }
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tags" ],
                members: {
                    resourceARN: {},
                    tags: {
                        shape: "S1a"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceARN", "tagKeys" ],
                members: {
                    resourceARN: {
                        location: "querystring",
                        locationName: "resourceARN"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateComponentType: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/component-types/{componentTypeId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "componentTypeId", "workspaceId" ],
                members: {
                    componentTypeId: {
                        location: "uri",
                        locationName: "componentTypeId"
                    },
                    description: {},
                    extendsFrom: {
                        shape: "Sv"
                    },
                    functions: {
                        shape: "Sw"
                    },
                    isSingleton: {
                        type: "boolean"
                    },
                    propertyDefinitions: {
                        shape: "S13"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "arn", "componentTypeId", "state", "workspaceId" ],
                members: {
                    arn: {},
                    componentTypeId: {},
                    state: {},
                    workspaceId: {}
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateEntity: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/entities/{entityId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "entityId", "workspaceId" ],
                members: {
                    componentUpdates: {
                        type: "map",
                        key: {},
                        value: {
                            type: "structure",
                            members: {
                                componentTypeId: {},
                                description: {},
                                propertyUpdates: {
                                    shape: "S1j"
                                },
                                updateType: {}
                            }
                        }
                    },
                    description: {},
                    entityId: {
                        location: "uri",
                        locationName: "entityId"
                    },
                    entityName: {},
                    parentEntityUpdate: {
                        type: "structure",
                        required: [ "updateType" ],
                        members: {
                            parentEntityId: {},
                            updateType: {}
                        }
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "state", "updateDateTime" ],
                members: {
                    state: {},
                    updateDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateScene: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}/scenes/{sceneId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "sceneId", "workspaceId" ],
                members: {
                    capabilities: {
                        shape: "S1q"
                    },
                    contentLocation: {},
                    description: {},
                    sceneId: {
                        location: "uri",
                        locationName: "sceneId"
                    },
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "updateDateTime" ],
                members: {
                    updateDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        },
        UpdateWorkspace: {
            http: {
                method: "PUT",
                requestUri: "/workspaces/{workspaceId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workspaceId" ],
                members: {
                    description: {},
                    role: {},
                    workspaceId: {
                        location: "uri",
                        locationName: "workspaceId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "updateDateTime" ],
                members: {
                    updateDateTime: {
                        type: "timestamp"
                    }
                }
            },
            endpoint: {
                hostPrefix: "api."
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            required: [ "entityPropertyReference" ],
            members: {
                entityPropertyReference: {
                    shape: "S4"
                },
                propertyValues: {
                    type: "list",
                    member: {
                        shape: "Sa"
                    }
                }
            }
        },
        S4: {
            type: "structure",
            required: [ "propertyName" ],
            members: {
                componentName: {},
                entityId: {},
                externalIdProperty: {
                    type: "map",
                    key: {},
                    value: {}
                },
                propertyName: {}
            }
        },
        Sa: {
            type: "structure",
            required: [ "value" ],
            members: {
                time: {},
                timestamp: {
                    deprecated: true,
                    deprecatedMessage: "This field is deprecated and will throw an error in the future. Use time instead.",
                    type: "timestamp"
                },
                value: {
                    shape: "Sd"
                }
            }
        },
        Sd: {
            type: "structure",
            members: {
                booleanValue: {
                    type: "boolean"
                },
                doubleValue: {
                    type: "double"
                },
                expression: {},
                integerValue: {
                    type: "integer"
                },
                listValue: {
                    shape: "Si"
                },
                longValue: {
                    type: "long"
                },
                mapValue: {
                    type: "map",
                    key: {},
                    value: {
                        shape: "Sd"
                    }
                },
                relationshipValue: {
                    type: "structure",
                    members: {
                        targetComponentName: {},
                        targetEntityId: {}
                    }
                },
                stringValue: {}
            }
        },
        Si: {
            type: "list",
            member: {
                shape: "Sd"
            }
        },
        Sv: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    implementedBy: {
                        shape: "Sy"
                    },
                    requiredProperties: {
                        shape: "S11"
                    },
                    scope: {}
                }
            }
        },
        Sy: {
            type: "structure",
            members: {
                isNative: {
                    type: "boolean"
                },
                lambda: {
                    type: "structure",
                    required: [ "arn" ],
                    members: {
                        arn: {}
                    }
                }
            }
        },
        S11: {
            type: "list",
            member: {}
        },
        S13: {
            type: "map",
            key: {},
            value: {
                shape: "S14"
            }
        },
        S14: {
            type: "structure",
            members: {
                configuration: {
                    shape: "S15"
                },
                dataType: {
                    shape: "S17"
                },
                defaultValue: {
                    shape: "Sd"
                },
                isExternalId: {
                    type: "boolean"
                },
                isRequiredInEntity: {
                    type: "boolean"
                },
                isStoredExternally: {
                    type: "boolean"
                },
                isTimeSeries: {
                    type: "boolean"
                }
            }
        },
        S15: {
            type: "map",
            key: {},
            value: {}
        },
        S17: {
            type: "structure",
            required: [ "type" ],
            members: {
                allowedValues: {
                    shape: "Si"
                },
                nestedType: {
                    shape: "S17"
                },
                relationship: {
                    type: "structure",
                    members: {
                        relationshipType: {},
                        targetComponentTypeId: {}
                    }
                },
                type: {},
                unitOfMeasure: {}
            }
        },
        S1a: {
            type: "map",
            key: {},
            value: {}
        },
        S1j: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    definition: {
                        shape: "S14"
                    },
                    updateType: {},
                    value: {
                        shape: "Sd"
                    }
                }
            }
        },
        S1q: {
            type: "list",
            member: {}
        },
        S2b: {
            type: "structure",
            required: [ "dataType", "isExternalId", "isFinal", "isImported", "isInherited", "isRequiredInEntity", "isStoredExternally", "isTimeSeries" ],
            members: {
                configuration: {
                    shape: "S15"
                },
                dataType: {
                    shape: "S17"
                },
                defaultValue: {
                    shape: "Sd"
                },
                isExternalId: {
                    type: "boolean"
                },
                isFinal: {
                    type: "boolean"
                },
                isImported: {
                    type: "boolean"
                },
                isInherited: {
                    type: "boolean"
                },
                isRequiredInEntity: {
                    type: "boolean"
                },
                isStoredExternally: {
                    type: "boolean"
                },
                isTimeSeries: {
                    type: "boolean"
                }
            }
        },
        S2c: {
            type: "structure",
            members: {
                error: {
                    type: "structure",
                    members: {
                        code: {},
                        message: {}
                    }
                },
                state: {}
            }
        },
        S2n: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetPropertyValueHistory: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListComponentTypes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListEntities: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListScenes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListWorkspaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["workspacesweb"] = {};

AWS.WorkSpacesWeb = AWS.Service.defineService("workspacesweb", [ "2020-07-08" ]);

AWS.apiLoader.services["workspacesweb"]["2020-07-08"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-08",
        endpointPrefix: "workspaces-web",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "Amazon WorkSpaces Web",
        serviceId: "WorkSpaces Web",
        signatureVersion: "v4",
        signingName: "workspaces-web",
        uid: "workspaces-web-2020-07-08"
    },
    operations: {
        AssociateBrowserSettings: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/browserSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserSettingsArn", "portalArn" ],
                members: {
                    browserSettingsArn: {
                        location: "querystring",
                        locationName: "browserSettingsArn"
                    },
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "browserSettingsArn", "portalArn" ],
                members: {
                    browserSettingsArn: {},
                    portalArn: {}
                }
            },
            idempotent: true
        },
        AssociateNetworkSettings: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/networkSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSettingsArn", "portalArn" ],
                members: {
                    networkSettingsArn: {
                        location: "querystring",
                        locationName: "networkSettingsArn"
                    },
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "networkSettingsArn", "portalArn" ],
                members: {
                    networkSettingsArn: {},
                    portalArn: {}
                }
            },
            idempotent: true
        },
        AssociateTrustStore: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/trustStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn", "trustStoreArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    },
                    trustStoreArn: {
                        location: "querystring",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalArn", "trustStoreArn" ],
                members: {
                    portalArn: {},
                    trustStoreArn: {}
                }
            },
            idempotent: true
        },
        AssociateUserSettings: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}/userSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn", "userSettingsArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    },
                    userSettingsArn: {
                        location: "querystring",
                        locationName: "userSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalArn", "userSettingsArn" ],
                members: {
                    portalArn: {},
                    userSettingsArn: {}
                }
            },
            idempotent: true
        },
        CreateBrowserSettings: {
            http: {
                requestUri: "/browserSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserPolicy" ],
                members: {
                    additionalEncryptionContext: {
                        shape: "Sb"
                    },
                    browserPolicy: {
                        shape: "Sd"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    customerManagedKey: {},
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "browserSettingsArn" ],
                members: {
                    browserSettingsArn: {}
                }
            }
        },
        CreateIdentityProvider: {
            http: {
                requestUri: "/identityProviders",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityProviderDetails", "identityProviderName", "identityProviderType", "portalArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    identityProviderDetails: {
                        shape: "Sm"
                    },
                    identityProviderName: {
                        shape: "Sn"
                    },
                    identityProviderType: {},
                    portalArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "identityProviderArn" ],
                members: {
                    identityProviderArn: {}
                }
            }
        },
        CreateNetworkSettings: {
            http: {
                requestUri: "/networkSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "securityGroupIds", "subnetIds", "vpcId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    securityGroupIds: {
                        shape: "Sr"
                    },
                    subnetIds: {
                        shape: "St"
                    },
                    tags: {
                        shape: "Sg"
                    },
                    vpcId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "networkSettingsArn" ],
                members: {
                    networkSettingsArn: {}
                }
            }
        },
        CreatePortal: {
            http: {
                requestUri: "/portals",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    additionalEncryptionContext: {
                        shape: "Sb"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    customerManagedKey: {},
                    displayName: {
                        shape: "Sy"
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalArn", "portalEndpoint" ],
                members: {
                    portalArn: {},
                    portalEndpoint: {}
                }
            }
        },
        CreateTrustStore: {
            http: {
                requestUri: "/trustStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "certificateList" ],
                members: {
                    certificateList: {
                        shape: "S12"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    trustStoreArn: {}
                }
            }
        },
        CreateUserSettings: {
            http: {
                requestUri: "/userSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "copyAllowed", "downloadAllowed", "pasteAllowed", "printAllowed", "uploadAllowed" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    copyAllowed: {},
                    disconnectTimeoutInMinutes: {
                        type: "integer"
                    },
                    downloadAllowed: {},
                    idleDisconnectTimeoutInMinutes: {
                        type: "integer"
                    },
                    pasteAllowed: {},
                    printAllowed: {},
                    tags: {
                        shape: "Sg"
                    },
                    uploadAllowed: {}
                }
            },
            output: {
                type: "structure",
                required: [ "userSettingsArn" ],
                members: {
                    userSettingsArn: {}
                }
            }
        },
        DeleteBrowserSettings: {
            http: {
                method: "DELETE",
                requestUri: "/browserSettings/{browserSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserSettingsArn" ],
                members: {
                    browserSettingsArn: {
                        location: "uri",
                        locationName: "browserSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteIdentityProvider: {
            http: {
                method: "DELETE",
                requestUri: "/identityProviders/{identityProviderArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityProviderArn" ],
                members: {
                    identityProviderArn: {
                        location: "uri",
                        locationName: "identityProviderArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteNetworkSettings: {
            http: {
                method: "DELETE",
                requestUri: "/networkSettings/{networkSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSettingsArn" ],
                members: {
                    networkSettingsArn: {
                        location: "uri",
                        locationName: "networkSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeletePortal: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteTrustStore: {
            http: {
                method: "DELETE",
                requestUri: "/trustStores/{trustStoreArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteUserSettings: {
            http: {
                method: "DELETE",
                requestUri: "/userSettings/{userSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "userSettingsArn" ],
                members: {
                    userSettingsArn: {
                        location: "uri",
                        locationName: "userSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateBrowserSettings: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/browserSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateNetworkSettings: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/networkSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateTrustStore: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/trustStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisassociateUserSettings: {
            http: {
                method: "DELETE",
                requestUri: "/portals/{portalArn+}/userSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetBrowserSettings: {
            http: {
                method: "GET",
                requestUri: "/browserSettings/{browserSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserSettingsArn" ],
                members: {
                    browserSettingsArn: {
                        location: "uri",
                        locationName: "browserSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    browserSettings: {
                        shape: "S1w"
                    }
                }
            }
        },
        GetIdentityProvider: {
            http: {
                method: "GET",
                requestUri: "/identityProviders/{identityProviderArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityProviderArn" ],
                members: {
                    identityProviderArn: {
                        location: "uri",
                        locationName: "identityProviderArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    identityProvider: {
                        shape: "S20"
                    }
                }
            }
        },
        GetNetworkSettings: {
            http: {
                method: "GET",
                requestUri: "/networkSettings/{networkSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSettingsArn" ],
                members: {
                    networkSettingsArn: {
                        location: "uri",
                        locationName: "networkSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSettings: {
                        shape: "S23"
                    }
                }
            }
        },
        GetPortal: {
            http: {
                method: "GET",
                requestUri: "/portals/{portalArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    portal: {
                        shape: "S26"
                    }
                }
            }
        },
        GetPortalServiceProviderMetadata: {
            http: {
                method: "GET",
                requestUri: "/portalIdp/{portalArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    portalArn: {},
                    serviceProviderSamlMetadata: {}
                }
            }
        },
        GetTrustStore: {
            http: {
                method: "GET",
                requestUri: "/trustStores/{trustStoreArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    trustStore: {
                        type: "structure",
                        members: {
                            associatedPortalArns: {
                                shape: "S1x"
                            },
                            trustStoreArn: {}
                        }
                    }
                }
            }
        },
        GetTrustStoreCertificate: {
            http: {
                method: "GET",
                requestUri: "/trustStores/{trustStoreArn+}/certificate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "thumbprint", "trustStoreArn" ],
                members: {
                    thumbprint: {
                        location: "querystring",
                        locationName: "thumbprint"
                    },
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificate: {
                        type: "structure",
                        members: {
                            body: {
                                type: "blob"
                            },
                            issuer: {},
                            notValidAfter: {
                                type: "timestamp"
                            },
                            notValidBefore: {
                                type: "timestamp"
                            },
                            subject: {},
                            thumbprint: {}
                        }
                    },
                    trustStoreArn: {}
                }
            }
        },
        GetUserSettings: {
            http: {
                method: "GET",
                requestUri: "/userSettings/{userSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "userSettingsArn" ],
                members: {
                    userSettingsArn: {
                        location: "uri",
                        locationName: "userSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    userSettings: {
                        shape: "S2p"
                    }
                }
            }
        },
        ListBrowserSettings: {
            http: {
                method: "GET",
                requestUri: "/browserSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    browserSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                browserSettingsArn: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListIdentityProviders: {
            http: {
                method: "GET",
                requestUri: "/portals/{portalArn+}/identityProviders",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    identityProviders: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                identityProviderArn: {},
                                identityProviderName: {
                                    shape: "Sn"
                                },
                                identityProviderType: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNetworkSettings: {
            http: {
                method: "GET",
                requestUri: "/networkSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                networkSettingsArn: {},
                                vpcId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListPortals: {
            http: {
                method: "GET",
                requestUri: "/portals",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    portals: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                browserSettingsArn: {},
                                browserType: {},
                                creationDate: {
                                    type: "timestamp"
                                },
                                displayName: {
                                    shape: "Sy"
                                },
                                networkSettingsArn: {},
                                portalArn: {},
                                portalEndpoint: {},
                                portalStatus: {},
                                rendererType: {},
                                trustStoreArn: {},
                                userSettingsArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sg"
                    }
                }
            }
        },
        ListTrustStoreCertificates: {
            http: {
                method: "GET",
                requestUri: "/trustStores/{trustStoreArn+}/certificates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    certificateList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                issuer: {},
                                notValidAfter: {
                                    type: "timestamp"
                                },
                                notValidBefore: {
                                    type: "timestamp"
                                },
                                subject: {},
                                thumbprint: {}
                            }
                        }
                    },
                    nextToken: {},
                    trustStoreArn: {}
                }
            }
        },
        ListTrustStores: {
            http: {
                method: "GET",
                requestUri: "/trustStores",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    trustStores: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                trustStoreArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListUserSettings: {
            http: {
                method: "GET",
                requestUri: "/userSettings",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    userSettings: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                copyAllowed: {},
                                disconnectTimeoutInMinutes: {
                                    type: "integer"
                                },
                                downloadAllowed: {},
                                idleDisconnectTimeoutInMinutes: {
                                    type: "integer"
                                },
                                pasteAllowed: {},
                                printAllowed: {},
                                uploadAllowed: {},
                                userSettingsArn: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateBrowserSettings: {
            http: {
                method: "PATCH",
                requestUri: "/browserSettings/{browserSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "browserSettingsArn" ],
                members: {
                    browserPolicy: {
                        shape: "Sd"
                    },
                    browserSettingsArn: {
                        location: "uri",
                        locationName: "browserSettingsArn"
                    },
                    clientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "browserSettings" ],
                members: {
                    browserSettings: {
                        shape: "S1w"
                    }
                }
            }
        },
        UpdateIdentityProvider: {
            http: {
                method: "PATCH",
                requestUri: "/identityProviders/{identityProviderArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identityProviderArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    identityProviderArn: {
                        location: "uri",
                        locationName: "identityProviderArn"
                    },
                    identityProviderDetails: {
                        shape: "Sm"
                    },
                    identityProviderName: {
                        shape: "Sn"
                    },
                    identityProviderType: {}
                }
            },
            output: {
                type: "structure",
                required: [ "identityProvider" ],
                members: {
                    identityProvider: {
                        shape: "S20"
                    }
                }
            }
        },
        UpdateNetworkSettings: {
            http: {
                method: "PATCH",
                requestUri: "/networkSettings/{networkSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSettingsArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    networkSettingsArn: {
                        location: "uri",
                        locationName: "networkSettingsArn"
                    },
                    securityGroupIds: {
                        shape: "Sr"
                    },
                    subnetIds: {
                        shape: "St"
                    },
                    vpcId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "networkSettings" ],
                members: {
                    networkSettings: {
                        shape: "S23"
                    }
                }
            }
        },
        UpdatePortal: {
            http: {
                method: "PUT",
                requestUri: "/portals/{portalArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "portalArn" ],
                members: {
                    displayName: {
                        shape: "Sy"
                    },
                    portalArn: {
                        location: "uri",
                        locationName: "portalArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    portal: {
                        shape: "S26"
                    }
                }
            },
            idempotent: true
        },
        UpdateTrustStore: {
            http: {
                method: "PATCH",
                requestUri: "/trustStores/{trustStoreArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    certificatesToAdd: {
                        shape: "S12"
                    },
                    certificatesToDelete: {
                        type: "list",
                        member: {}
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    trustStoreArn: {
                        location: "uri",
                        locationName: "trustStoreArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "trustStoreArn" ],
                members: {
                    trustStoreArn: {}
                }
            }
        },
        UpdateUserSettings: {
            http: {
                method: "PATCH",
                requestUri: "/userSettings/{userSettingsArn+}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "userSettingsArn" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    copyAllowed: {},
                    disconnectTimeoutInMinutes: {
                        type: "integer"
                    },
                    downloadAllowed: {},
                    idleDisconnectTimeoutInMinutes: {
                        type: "integer"
                    },
                    pasteAllowed: {},
                    printAllowed: {},
                    uploadAllowed: {},
                    userSettingsArn: {
                        location: "uri",
                        locationName: "userSettingsArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "userSettings" ],
                members: {
                    userSettings: {
                        shape: "S2p"
                    }
                }
            }
        }
    },
    shapes: {
        Sb: {
            type: "map",
            key: {},
            value: {}
        },
        Sd: {
            type: "string",
            sensitive: true
        },
        Sg: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {
                        shape: "Si"
                    },
                    Value: {
                        type: "string",
                        sensitive: true
                    }
                },
                sensitive: true
            }
        },
        Si: {
            type: "string",
            sensitive: true
        },
        Sm: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sn: {
            type: "string",
            sensitive: true
        },
        Sr: {
            type: "list",
            member: {}
        },
        St: {
            type: "list",
            member: {}
        },
        Sy: {
            type: "string",
            sensitive: true
        },
        S12: {
            type: "list",
            member: {
                type: "blob"
            }
        },
        S1w: {
            type: "structure",
            required: [ "browserSettingsArn" ],
            members: {
                associatedPortalArns: {
                    shape: "S1x"
                },
                browserPolicy: {
                    shape: "Sd"
                },
                browserSettingsArn: {}
            }
        },
        S1x: {
            type: "list",
            member: {}
        },
        S20: {
            type: "structure",
            required: [ "identityProviderArn" ],
            members: {
                identityProviderArn: {},
                identityProviderDetails: {
                    shape: "Sm"
                },
                identityProviderName: {
                    shape: "Sn"
                },
                identityProviderType: {}
            }
        },
        S23: {
            type: "structure",
            required: [ "networkSettingsArn" ],
            members: {
                associatedPortalArns: {
                    shape: "S1x"
                },
                networkSettingsArn: {},
                securityGroupIds: {
                    shape: "Sr"
                },
                subnetIds: {
                    shape: "St"
                },
                vpcId: {}
            }
        },
        S26: {
            type: "structure",
            members: {
                browserSettingsArn: {},
                browserType: {},
                creationDate: {
                    type: "timestamp"
                },
                displayName: {
                    shape: "Sy"
                },
                networkSettingsArn: {},
                portalArn: {},
                portalEndpoint: {},
                portalStatus: {},
                rendererType: {},
                statusReason: {},
                trustStoreArn: {},
                userSettingsArn: {}
            }
        },
        S2p: {
            type: "structure",
            required: [ "userSettingsArn" ],
            members: {
                associatedPortalArns: {
                    shape: "S1x"
                },
                copyAllowed: {},
                disconnectTimeoutInMinutes: {
                    type: "integer"
                },
                downloadAllowed: {},
                idleDisconnectTimeoutInMinutes: {
                    type: "integer"
                },
                pasteAllowed: {},
                printAllowed: {},
                uploadAllowed: {},
                userSettingsArn: {}
            }
        }
    },
    paginators: {
        ListBrowserSettings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListIdentityProviders: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListNetworkSettings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListPortals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTrustStoreCertificates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTrustStores: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListUserSettings: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["amplifyuibuilder"] = {};

AWS.AmplifyUIBuilder = AWS.Service.defineService("amplifyuibuilder", [ "2021-08-11" ]);

AWS.apiLoader.services["amplifyuibuilder"]["2021-08-11"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-11",
        endpointPrefix: "amplifyuibuilder",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Amplify UI Builder",
        serviceId: "AmplifyUIBuilder",
        signatureVersion: "v4",
        signingName: "amplifyuibuilder",
        uid: "amplifyuibuilder-2021-08-11"
    },
    operations: {
        CreateComponent: {
            http: {
                requestUri: "/app/{appId}/environment/{environmentName}/components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "componentToCreate", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    componentToCreate: {
                        type: "structure",
                        required: [ "bindingProperties", "componentType", "name", "overrides", "properties", "variants" ],
                        members: {
                            bindingProperties: {
                                shape: "S4"
                            },
                            children: {
                                shape: "S9"
                            },
                            collectionProperties: {
                                shape: "Sn"
                            },
                            componentType: {},
                            events: {
                                shape: "Sb"
                            },
                            name: {},
                            overrides: {
                                shape: "Sv"
                            },
                            properties: {
                                shape: "Sl"
                            },
                            schemaVersion: {},
                            sourceId: {},
                            tags: {
                                shape: "Sx"
                            },
                            variants: {
                                shape: "S10"
                            }
                        }
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    }
                },
                payload: "componentToCreate"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S14"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        CreateForm: {
            http: {
                requestUri: "/app/{appId}/environment/{environmentName}/forms",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "formToCreate" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    formToCreate: {
                        type: "structure",
                        required: [ "dataType", "fields", "formActionType", "name", "schemaVersion", "sectionalElements", "style" ],
                        members: {
                            cta: {
                                shape: "S19"
                            },
                            dataType: {
                                shape: "S1e"
                            },
                            fields: {
                                shape: "S1g"
                            },
                            formActionType: {},
                            name: {},
                            schemaVersion: {},
                            sectionalElements: {
                                shape: "S1v"
                            },
                            style: {
                                shape: "S1x"
                            },
                            tags: {
                                shape: "Sx"
                            }
                        }
                    }
                },
                payload: "formToCreate"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S20"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        CreateTheme: {
            http: {
                requestUri: "/app/{appId}/environment/{environmentName}/themes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "themeToCreate" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    themeToCreate: {
                        type: "structure",
                        required: [ "name", "values" ],
                        members: {
                            name: {},
                            overrides: {
                                shape: "S24"
                            },
                            tags: {
                                shape: "Sx"
                            },
                            values: {
                                shape: "S24"
                            }
                        }
                    }
                },
                payload: "themeToCreate"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S28"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        DeleteComponent: {
            http: {
                method: "DELETE",
                requestUri: "/app/{appId}/environment/{environmentName}/components/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        },
        DeleteForm: {
            http: {
                method: "DELETE",
                requestUri: "/app/{appId}/environment/{environmentName}/forms/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        },
        DeleteTheme: {
            http: {
                method: "DELETE",
                requestUri: "/app/{appId}/environment/{environmentName}/themes/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        },
        ExchangeCodeForToken: {
            http: {
                requestUri: "/tokens/{provider}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "provider", "request" ],
                members: {
                    provider: {
                        location: "uri",
                        locationName: "provider"
                    },
                    request: {
                        type: "structure",
                        required: [ "code", "redirectUri" ],
                        members: {
                            code: {
                                shape: "S2f"
                            },
                            redirectUri: {}
                        }
                    }
                },
                payload: "request"
            },
            output: {
                type: "structure",
                required: [ "accessToken", "expiresIn", "refreshToken" ],
                members: {
                    accessToken: {
                        shape: "S2f"
                    },
                    expiresIn: {
                        type: "integer"
                    },
                    refreshToken: {
                        shape: "S2f"
                    }
                }
            }
        },
        ExportComponents: {
            http: {
                method: "GET",
                requestUri: "/export/app/{appId}/environment/{environmentName}/components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            shape: "S14"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ExportForms: {
            http: {
                method: "GET",
                requestUri: "/export/app/{appId}/environment/{environmentName}/forms",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            shape: "S20"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ExportThemes: {
            http: {
                method: "GET",
                requestUri: "/export/app/{appId}/environment/{environmentName}/themes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            shape: "S28"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        GetComponent: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/components/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    component: {
                        shape: "S14"
                    }
                },
                payload: "component"
            }
        },
        GetForm: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/forms/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    form: {
                        shape: "S20"
                    }
                },
                payload: "form"
            }
        },
        GetMetadata: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/metadata",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "features" ],
                members: {
                    features: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        GetTheme: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/themes/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    theme: {
                        shape: "S28"
                    }
                },
                payload: "theme"
            }
        },
        ListComponents: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/components",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appId", "componentType", "environmentName", "id", "name" ],
                            members: {
                                appId: {},
                                componentType: {},
                                environmentName: {},
                                id: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListForms: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/forms",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appId", "dataType", "environmentName", "formActionType", "id", "name" ],
                            members: {
                                appId: {},
                                dataType: {
                                    shape: "S1e"
                                },
                                environmentName: {},
                                formActionType: {},
                                id: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListThemes: {
            http: {
                method: "GET",
                requestUri: "/app/{appId}/environment/{environmentName}/themes",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "entities" ],
                members: {
                    entities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "appId", "environmentName", "id", "name" ],
                            members: {
                                appId: {},
                                environmentName: {},
                                id: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        PutMetadataFlag: {
            http: {
                method: "PUT",
                requestUri: "/app/{appId}/environment/{environmentName}/metadata/features/{featureName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "body", "environmentName", "featureName" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    body: {
                        type: "structure",
                        required: [ "newValue" ],
                        members: {
                            newValue: {}
                        }
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    featureName: {
                        location: "uri",
                        locationName: "featureName"
                    }
                },
                payload: "body"
            }
        },
        RefreshToken: {
            http: {
                requestUri: "/tokens/{provider}/refresh",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "provider", "refreshTokenBody" ],
                members: {
                    provider: {
                        location: "uri",
                        locationName: "provider"
                    },
                    refreshTokenBody: {
                        type: "structure",
                        required: [ "token" ],
                        members: {
                            token: {
                                shape: "S2f"
                            }
                        }
                    }
                },
                payload: "refreshTokenBody"
            },
            output: {
                type: "structure",
                required: [ "accessToken", "expiresIn" ],
                members: {
                    accessToken: {
                        shape: "S2f"
                    },
                    expiresIn: {
                        type: "integer"
                    }
                }
            }
        },
        UpdateComponent: {
            http: {
                method: "PATCH",
                requestUri: "/app/{appId}/environment/{environmentName}/components/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id", "updatedComponent" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    updatedComponent: {
                        type: "structure",
                        members: {
                            bindingProperties: {
                                shape: "S4"
                            },
                            children: {
                                shape: "S9"
                            },
                            collectionProperties: {
                                shape: "Sn"
                            },
                            componentType: {},
                            events: {
                                shape: "Sb"
                            },
                            id: {},
                            name: {},
                            overrides: {
                                shape: "Sv"
                            },
                            properties: {
                                shape: "Sl"
                            },
                            schemaVersion: {},
                            sourceId: {},
                            variants: {
                                shape: "S10"
                            }
                        }
                    }
                },
                payload: "updatedComponent"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S14"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        UpdateForm: {
            http: {
                method: "PATCH",
                requestUri: "/app/{appId}/environment/{environmentName}/forms/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id", "updatedForm" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    updatedForm: {
                        type: "structure",
                        members: {
                            cta: {
                                shape: "S19"
                            },
                            dataType: {
                                shape: "S1e"
                            },
                            fields: {
                                shape: "S1g"
                            },
                            formActionType: {},
                            name: {},
                            schemaVersion: {},
                            sectionalElements: {
                                shape: "S1v"
                            },
                            style: {
                                shape: "S1x"
                            }
                        }
                    }
                },
                payload: "updatedForm"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S20"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        },
        UpdateTheme: {
            http: {
                method: "PATCH",
                requestUri: "/app/{appId}/environment/{environmentName}/themes/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "appId", "environmentName", "id", "updatedTheme" ],
                members: {
                    appId: {
                        location: "uri",
                        locationName: "appId"
                    },
                    clientToken: {
                        idempotencyToken: true,
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    environmentName: {
                        location: "uri",
                        locationName: "environmentName"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    updatedTheme: {
                        type: "structure",
                        required: [ "values" ],
                        members: {
                            id: {},
                            name: {},
                            overrides: {
                                shape: "S24"
                            },
                            values: {
                                shape: "S24"
                            }
                        }
                    }
                },
                payload: "updatedTheme"
            },
            output: {
                type: "structure",
                members: {
                    entity: {
                        shape: "S28"
                    }
                },
                payload: "entity"
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    bindingProperties: {
                        type: "structure",
                        members: {
                            bucket: {},
                            defaultValue: {},
                            field: {},
                            key: {},
                            model: {},
                            predicates: {
                                shape: "S7"
                            },
                            slotName: {},
                            userAttribute: {}
                        }
                    },
                    defaultValue: {},
                    type: {}
                }
            }
        },
        S7: {
            type: "list",
            member: {
                shape: "S8"
            }
        },
        S8: {
            type: "structure",
            members: {
                and: {
                    shape: "S7"
                },
                field: {},
                operand: {},
                operator: {},
                or: {
                    shape: "S7"
                }
            }
        },
        S9: {
            type: "list",
            member: {
                type: "structure",
                required: [ "componentType", "name", "properties" ],
                members: {
                    children: {
                        shape: "S9"
                    },
                    componentType: {},
                    events: {
                        shape: "Sb"
                    },
                    name: {},
                    properties: {
                        shape: "Sl"
                    },
                    sourceId: {}
                }
            }
        },
        Sb: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    action: {},
                    bindingEvent: {},
                    parameters: {
                        type: "structure",
                        members: {
                            anchor: {
                                shape: "Se"
                            },
                            fields: {
                                shape: "Sl"
                            },
                            global: {
                                shape: "Se"
                            },
                            id: {
                                shape: "Se"
                            },
                            model: {},
                            state: {
                                type: "structure",
                                required: [ "componentName", "property", "set" ],
                                members: {
                                    componentName: {},
                                    property: {},
                                    set: {
                                        shape: "Se"
                                    }
                                }
                            },
                            target: {
                                shape: "Se"
                            },
                            type: {
                                shape: "Se"
                            },
                            url: {
                                shape: "Se"
                            }
                        }
                    }
                }
            }
        },
        Se: {
            type: "structure",
            members: {
                bindingProperties: {
                    shape: "Sf"
                },
                bindings: {
                    type: "map",
                    key: {},
                    value: {
                        type: "structure",
                        required: [ "element", "property" ],
                        members: {
                            element: {},
                            property: {}
                        }
                    }
                },
                collectionBindingProperties: {
                    shape: "Sf"
                },
                componentName: {},
                concat: {
                    type: "list",
                    member: {
                        shape: "Se"
                    }
                },
                condition: {
                    type: "structure",
                    members: {
                        else: {
                            shape: "Se"
                        },
                        field: {},
                        operand: {},
                        operandType: {},
                        operator: {},
                        property: {},
                        then: {
                            shape: "Se"
                        }
                    }
                },
                configured: {
                    type: "boolean"
                },
                defaultValue: {},
                event: {},
                importedValue: {},
                model: {},
                property: {},
                type: {},
                userAttribute: {},
                value: {}
            }
        },
        Sf: {
            type: "structure",
            required: [ "property" ],
            members: {
                field: {},
                property: {}
            }
        },
        Sl: {
            type: "map",
            key: {},
            value: {
                shape: "Se"
            }
        },
        Sn: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "model" ],
                members: {
                    identifiers: {
                        type: "list",
                        member: {}
                    },
                    model: {},
                    predicate: {
                        shape: "S8"
                    },
                    sort: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "direction", "field" ],
                            members: {
                                direction: {},
                                field: {}
                            }
                        }
                    }
                }
            }
        },
        Sv: {
            type: "map",
            key: {},
            value: {
                type: "map",
                key: {},
                value: {}
            }
        },
        Sx: {
            type: "map",
            key: {},
            value: {}
        },
        S10: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    overrides: {
                        shape: "Sv"
                    },
                    variantValues: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            }
        },
        S14: {
            type: "structure",
            required: [ "appId", "bindingProperties", "componentType", "createdAt", "environmentName", "id", "name", "overrides", "properties", "variants" ],
            members: {
                appId: {},
                bindingProperties: {
                    shape: "S4"
                },
                children: {
                    shape: "S9"
                },
                collectionProperties: {
                    shape: "Sn"
                },
                componentType: {},
                createdAt: {
                    shape: "S15"
                },
                environmentName: {},
                events: {
                    shape: "Sb"
                },
                id: {},
                modifiedAt: {
                    shape: "S15"
                },
                name: {},
                overrides: {
                    shape: "Sv"
                },
                properties: {
                    shape: "Sl"
                },
                schemaVersion: {},
                sourceId: {},
                tags: {
                    shape: "Sx"
                },
                variants: {
                    shape: "S10"
                }
            }
        },
        S15: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S19: {
            type: "structure",
            members: {
                cancel: {
                    shape: "S1a"
                },
                clear: {
                    shape: "S1a"
                },
                position: {},
                submit: {
                    shape: "S1a"
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                children: {},
                excluded: {
                    type: "boolean"
                },
                position: {
                    shape: "S1b"
                }
            }
        },
        S1b: {
            type: "structure",
            members: {
                below: {},
                fixed: {},
                rightOf: {}
            },
            union: true
        },
        S1e: {
            type: "structure",
            required: [ "dataSourceType", "dataTypeName" ],
            members: {
                dataSourceType: {},
                dataTypeName: {}
            }
        },
        S1g: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    excluded: {
                        type: "boolean"
                    },
                    inputType: {
                        type: "structure",
                        required: [ "type" ],
                        members: {
                            defaultChecked: {
                                type: "boolean"
                            },
                            defaultCountryCode: {},
                            defaultValue: {},
                            descriptiveText: {},
                            isArray: {
                                type: "boolean"
                            },
                            maxValue: {
                                type: "float"
                            },
                            minValue: {
                                type: "float"
                            },
                            name: {},
                            placeholder: {},
                            readOnly: {
                                type: "boolean"
                            },
                            required: {
                                type: "boolean"
                            },
                            step: {
                                type: "float"
                            },
                            type: {},
                            value: {},
                            valueMappings: {
                                type: "structure",
                                required: [ "values" ],
                                members: {
                                    values: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "value" ],
                                            members: {
                                                displayValue: {
                                                    shape: "S1n"
                                                },
                                                value: {
                                                    shape: "S1n"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    },
                    label: {},
                    position: {
                        shape: "S1b"
                    },
                    validations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "type" ],
                            members: {
                                numValues: {
                                    type: "list",
                                    member: {
                                        type: "integer"
                                    }
                                },
                                strValues: {
                                    type: "list",
                                    member: {}
                                },
                                type: {},
                                validationMessage: {}
                            }
                        }
                    }
                }
            }
        },
        S1n: {
            type: "structure",
            members: {
                value: {}
            }
        },
        S1v: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "type" ],
                members: {
                    level: {
                        type: "integer"
                    },
                    orientation: {},
                    position: {
                        shape: "S1b"
                    },
                    text: {},
                    type: {}
                }
            }
        },
        S1x: {
            type: "structure",
            members: {
                horizontalGap: {
                    shape: "S1y"
                },
                outerPadding: {
                    shape: "S1y"
                },
                verticalGap: {
                    shape: "S1y"
                }
            }
        },
        S1y: {
            type: "structure",
            members: {
                tokenReference: {},
                value: {}
            },
            union: true
        },
        S20: {
            type: "structure",
            required: [ "appId", "dataType", "environmentName", "fields", "formActionType", "id", "name", "schemaVersion", "sectionalElements", "style" ],
            members: {
                appId: {},
                cta: {
                    shape: "S19"
                },
                dataType: {
                    shape: "S1e"
                },
                environmentName: {},
                fields: {
                    shape: "S1g"
                },
                formActionType: {},
                id: {},
                name: {},
                schemaVersion: {},
                sectionalElements: {
                    shape: "S1v"
                },
                style: {
                    shape: "S1x"
                },
                tags: {
                    shape: "Sx"
                }
            }
        },
        S24: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    key: {},
                    value: {
                        type: "structure",
                        members: {
                            children: {
                                shape: "S24"
                            },
                            value: {}
                        }
                    }
                }
            }
        },
        S28: {
            type: "structure",
            required: [ "appId", "createdAt", "environmentName", "id", "name", "values" ],
            members: {
                appId: {},
                createdAt: {
                    shape: "S15"
                },
                environmentName: {},
                id: {},
                modifiedAt: {
                    shape: "S15"
                },
                name: {},
                overrides: {
                    shape: "S24"
                },
                tags: {
                    shape: "Sx"
                },
                values: {
                    shape: "S24"
                }
            }
        },
        S2f: {
            type: "string",
            sensitive: true
        }
    },
    paginators: {
        ExportComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "entities"
        },
        ExportForms: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "entities"
        },
        ExportThemes: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "entities"
        },
        ListComponents: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "entities"
        },
        ListForms: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "entities"
        },
        ListThemes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "entities"
        }
    }
};

AWS.apiLoader.services["keyspaces"] = {};

AWS.Keyspaces = AWS.Service.defineService("keyspaces", [ "2022-02-10" ]);

AWS.apiLoader.services["keyspaces"]["2022-02-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-02-10",
        endpointPrefix: "cassandra",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Amazon Keyspaces",
        serviceId: "Keyspaces",
        signatureVersion: "v4",
        signingName: "cassandra",
        targetPrefix: "KeyspacesService",
        uid: "keyspaces-2022-02-10"
    },
    operations: {
        CreateKeyspace: {
            input: {
                type: "structure",
                required: [ "keyspaceName" ],
                members: {
                    keyspaceName: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            }
        },
        CreateTable: {
            input: {
                type: "structure",
                required: [ "keyspaceName", "tableName", "schemaDefinition" ],
                members: {
                    keyspaceName: {},
                    tableName: {},
                    schemaDefinition: {
                        shape: "Sb"
                    },
                    comment: {
                        shape: "Sm"
                    },
                    capacitySpecification: {
                        shape: "So"
                    },
                    encryptionSpecification: {
                        shape: "Sr"
                    },
                    pointInTimeRecovery: {
                        shape: "Su"
                    },
                    ttl: {
                        shape: "Sw"
                    },
                    defaultTimeToLive: {
                        type: "integer"
                    },
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            }
        },
        DeleteKeyspace: {
            input: {
                type: "structure",
                required: [ "keyspaceName" ],
                members: {
                    keyspaceName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteTable: {
            input: {
                type: "structure",
                required: [ "keyspaceName", "tableName" ],
                members: {
                    keyspaceName: {},
                    tableName: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetKeyspace: {
            input: {
                type: "structure",
                required: [ "keyspaceName" ],
                members: {
                    keyspaceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "keyspaceName", "resourceArn" ],
                members: {
                    keyspaceName: {},
                    resourceArn: {}
                }
            }
        },
        GetTable: {
            input: {
                type: "structure",
                required: [ "keyspaceName", "tableName" ],
                members: {
                    keyspaceName: {},
                    tableName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "keyspaceName", "tableName", "resourceArn" ],
                members: {
                    keyspaceName: {},
                    tableName: {},
                    resourceArn: {},
                    creationTimestamp: {
                        type: "timestamp"
                    },
                    status: {},
                    schemaDefinition: {
                        shape: "Sb"
                    },
                    capacitySpecification: {
                        type: "structure",
                        required: [ "throughputMode" ],
                        members: {
                            throughputMode: {},
                            readCapacityUnits: {
                                type: "long"
                            },
                            writeCapacityUnits: {
                                type: "long"
                            },
                            lastUpdateToPayPerRequestTimestamp: {
                                type: "timestamp"
                            }
                        }
                    },
                    encryptionSpecification: {
                        shape: "Sr"
                    },
                    pointInTimeRecovery: {
                        type: "structure",
                        required: [ "status" ],
                        members: {
                            status: {},
                            earliestRestorableTimestamp: {
                                type: "timestamp"
                            }
                        }
                    },
                    ttl: {
                        shape: "Sw"
                    },
                    defaultTimeToLive: {
                        type: "integer"
                    },
                    comment: {
                        shape: "Sm"
                    }
                }
            }
        },
        ListKeyspaces: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "keyspaces" ],
                members: {
                    nextToken: {},
                    keyspaces: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "keyspaceName", "resourceArn" ],
                            members: {
                                keyspaceName: {},
                                resourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTables: {
            input: {
                type: "structure",
                required: [ "keyspaceName" ],
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    keyspaceName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    tables: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "keyspaceName", "tableName", "resourceArn" ],
                            members: {
                                keyspaceName: {},
                                tableName: {},
                                resourceArn: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    tags: {
                        shape: "S3"
                    }
                }
            }
        },
        RestoreTable: {
            input: {
                type: "structure",
                required: [ "sourceKeyspaceName", "sourceTableName", "targetKeyspaceName", "targetTableName" ],
                members: {
                    sourceKeyspaceName: {},
                    sourceTableName: {},
                    targetKeyspaceName: {},
                    targetTableName: {},
                    restoreTimestamp: {
                        type: "timestamp"
                    },
                    capacitySpecificationOverride: {
                        shape: "So"
                    },
                    encryptionSpecificationOverride: {
                        shape: "Sr"
                    },
                    pointInTimeRecoveryOverride: {
                        shape: "Su"
                    },
                    tagsOverride: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "restoredTableARN" ],
                members: {
                    restoredTableARN: {}
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateTable: {
            input: {
                type: "structure",
                required: [ "keyspaceName", "tableName" ],
                members: {
                    keyspaceName: {},
                    tableName: {},
                    addColumns: {
                        shape: "Sc"
                    },
                    capacitySpecification: {
                        shape: "So"
                    },
                    encryptionSpecification: {
                        shape: "Sr"
                    },
                    pointInTimeRecovery: {
                        shape: "Su"
                    },
                    ttl: {
                        shape: "Sw"
                    },
                    defaultTimeToLive: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        Sb: {
            type: "structure",
            required: [ "allColumns", "partitionKeys" ],
            members: {
                allColumns: {
                    shape: "Sc"
                },
                partitionKeys: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            name: {}
                        }
                    }
                },
                clusteringKeys: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name", "orderBy" ],
                        members: {
                            name: {},
                            orderBy: {}
                        }
                    }
                },
                staticColumns: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            name: {}
                        }
                    }
                }
            }
        },
        Sc: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name", "type" ],
                members: {
                    name: {},
                    type: {}
                }
            }
        },
        Sm: {
            type: "structure",
            required: [ "message" ],
            members: {
                message: {}
            }
        },
        So: {
            type: "structure",
            required: [ "throughputMode" ],
            members: {
                throughputMode: {},
                readCapacityUnits: {
                    type: "long"
                },
                writeCapacityUnits: {
                    type: "long"
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "type" ],
            members: {
                type: {},
                kmsKeyIdentifier: {}
            }
        },
        Su: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {}
            }
        },
        Sw: {
            type: "structure",
            required: [ "status" ],
            members: {
                status: {}
            }
        }
    },
    paginators: {
        ListKeyspaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "keyspaces"
        },
        ListTables: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tables"
        },
        ListTagsForResource: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "tags"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["billingconductor"] = {};

AWS.Billingconductor = AWS.Service.defineService("billingconductor", [ "2021-07-30" ]);

AWS.apiLoader.services["billingconductor"]["2021-07-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-07-30",
        endpointPrefix: "billingconductor",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWSBillingConductor",
        serviceId: "billingconductor",
        signatureVersion: "v4",
        signingName: "billingconductor",
        uid: "billingconductor-2021-07-30"
    },
    operations: {
        AssociateAccounts: {
            http: {
                requestUri: "/associate-accounts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "AccountIds" ],
                members: {
                    Arn: {},
                    AccountIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        AssociatePricingRules: {
            http: {
                method: "PUT",
                requestUri: "/associate-pricing-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "PricingRuleArns" ],
                members: {
                    Arn: {},
                    PricingRuleArns: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        BatchAssociateResourcesToCustomLineItem: {
            http: {
                method: "PUT",
                requestUri: "/batch-associate-resources-to-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TargetArn", "ResourceArns" ],
                members: {
                    TargetArn: {},
                    ResourceArns: {
                        type: "list",
                        member: {}
                    },
                    BillingPeriodRange: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfullyAssociatedResources: {
                        shape: "Si"
                    },
                    FailedAssociatedResources: {
                        shape: "Si"
                    }
                }
            },
            idempotent: true
        },
        BatchDisassociateResourcesFromCustomLineItem: {
            http: {
                method: "PUT",
                requestUri: "/batch-disassociate-resources-from-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "TargetArn", "ResourceArns" ],
                members: {
                    TargetArn: {},
                    ResourceArns: {
                        type: "list",
                        member: {}
                    },
                    BillingPeriodRange: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SuccessfullyDisassociatedResources: {
                        shape: "Sq"
                    },
                    FailedDisassociatedResources: {
                        shape: "Sq"
                    }
                }
            },
            idempotent: true
        },
        CreateBillingGroup: {
            http: {
                requestUri: "/create-billing-group",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "AccountGrouping", "ComputationPreference" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Name: {
                        shape: "Su"
                    },
                    AccountGrouping: {
                        type: "structure",
                        required: [ "LinkedAccountIds" ],
                        members: {
                            LinkedAccountIds: {
                                shape: "S3"
                            }
                        }
                    },
                    ComputationPreference: {
                        shape: "Sw"
                    },
                    PrimaryAccountId: {},
                    Description: {
                        shape: "Sy"
                    },
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        CreateCustomLineItem: {
            http: {
                requestUri: "/create-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "Description", "BillingGroupArn", "ChargeDetails" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Name: {
                        shape: "S14"
                    },
                    Description: {
                        shape: "S15"
                    },
                    BillingGroupArn: {},
                    BillingPeriodRange: {
                        shape: "Sf"
                    },
                    Tags: {
                        shape: "Sz"
                    },
                    ChargeDetails: {
                        type: "structure",
                        required: [ "Type" ],
                        members: {
                            Flat: {
                                type: "structure",
                                required: [ "ChargeValue" ],
                                members: {
                                    ChargeValue: {
                                        type: "double"
                                    }
                                }
                            },
                            Percentage: {
                                type: "structure",
                                required: [ "PercentageValue" ],
                                members: {
                                    PercentageValue: {
                                        type: "double"
                                    },
                                    AssociatedValues: {
                                        type: "list",
                                        member: {}
                                    }
                                }
                            },
                            Type: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            }
        },
        CreatePricingPlan: {
            http: {
                requestUri: "/create-pricing-plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Name: {
                        shape: "S1f"
                    },
                    Description: {
                        shape: "S1g"
                    },
                    PricingRuleArns: {
                        type: "list",
                        member: {}
                    },
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        CreatePricingRule: {
            http: {
                requestUri: "/create-pricing-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "Scope", "Type", "ModifierPercentage" ],
                members: {
                    ClientToken: {
                        idempotencyToken: true,
                        location: "header",
                        locationName: "X-Amzn-Client-Token"
                    },
                    Name: {
                        shape: "S1k"
                    },
                    Description: {
                        shape: "S1l"
                    },
                    Scope: {},
                    Type: {},
                    ModifierPercentage: {
                        type: "double"
                    },
                    Service: {},
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DeleteBillingGroup: {
            http: {
                requestUri: "/delete-billing-group",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DeleteCustomLineItem: {
            http: {
                requestUri: "/delete-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    BillingPeriodRange: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DeletePricingPlan: {
            http: {
                requestUri: "/delete-pricing-plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DeletePricingRule: {
            http: {
                requestUri: "/delete-pricing-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DisassociateAccounts: {
            http: {
                requestUri: "/disassociate-accounts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "AccountIds" ],
                members: {
                    Arn: {},
                    AccountIds: {
                        shape: "S3"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        DisassociatePricingRules: {
            http: {
                method: "PUT",
                requestUri: "/disassociate-pricing-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn", "PricingRuleArns" ],
                members: {
                    Arn: {},
                    PricingRuleArns: {
                        shape: "S8"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {}
                }
            },
            idempotent: true
        },
        ListAccountAssociations: {
            http: {
                requestUri: "/list-account-associations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Association: {},
                            AccountId: {}
                        }
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    LinkedAccounts: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                AccountId: {},
                                BillingGroupArn: {},
                                AccountName: {
                                    type: "string",
                                    sensitive: true
                                },
                                AccountEmail: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListBillingGroupCostReports: {
            http: {
                requestUri: "/list-billing-group-cost-reports",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            BillingGroupArns: {
                                shape: "S2f"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingGroupCostReports: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                AWSCost: {},
                                ProformaCost: {},
                                Margin: {},
                                MarginPercentage: {},
                                Currency: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListBillingGroups: {
            http: {
                requestUri: "/list-billing-groups",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Arns: {
                                shape: "S2f"
                            },
                            PricingPlan: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    shape: "Su"
                                },
                                Arn: {},
                                Description: {
                                    shape: "Sy"
                                },
                                PrimaryAccountId: {},
                                ComputationPreference: {
                                    shape: "Sw"
                                },
                                Size: {
                                    type: "long"
                                },
                                CreationTime: {
                                    type: "long"
                                },
                                LastModifiedTime: {
                                    type: "long"
                                },
                                Status: {},
                                StatusReason: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListCustomLineItems: {
            http: {
                requestUri: "/list-custom-line-items",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Names: {
                                type: "list",
                                member: {
                                    shape: "S14"
                                }
                            },
                            BillingGroups: {
                                shape: "S2f"
                            },
                            Arns: {
                                type: "list",
                                member: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    CustomLineItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Name: {
                                    shape: "S14"
                                },
                                ChargeDetails: {
                                    shape: "S34"
                                },
                                CurrencyCode: {},
                                Description: {
                                    shape: "S15"
                                },
                                ProductCode: {},
                                BillingGroupArn: {},
                                CreationTime: {
                                    type: "long"
                                },
                                LastModifiedTime: {
                                    type: "long"
                                },
                                AssociationSize: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPricingPlans: {
            http: {
                requestUri: "/list-pricing-plans",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Arns: {
                                shape: "S3c"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    PricingPlans: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    shape: "S1f"
                                },
                                Arn: {},
                                Description: {
                                    shape: "S1g"
                                },
                                Size: {
                                    type: "long"
                                },
                                CreationTime: {
                                    type: "long"
                                },
                                LastModifiedTime: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPricingPlansAssociatedWithPricingRule: {
            http: {
                requestUri: "/list-pricing-plans-associated-with-pricing-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PricingRuleArn" ],
                members: {
                    BillingPeriod: {},
                    PricingRuleArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    PricingRuleArn: {},
                    PricingPlanArns: {
                        shape: "S3c"
                    },
                    NextToken: {}
                }
            }
        },
        ListPricingRules: {
            http: {
                requestUri: "/list-pricing-rules",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Arns: {
                                shape: "S3n"
                            }
                        }
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    PricingRules: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Name: {
                                    shape: "S1k"
                                },
                                Arn: {},
                                Description: {
                                    shape: "S1l"
                                },
                                Scope: {},
                                Type: {},
                                ModifierPercentage: {
                                    type: "double"
                                },
                                Service: {},
                                AssociatedPricingPlanCount: {
                                    type: "long"
                                },
                                CreationTime: {
                                    type: "long"
                                },
                                LastModifiedTime: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListPricingRulesAssociatedToPricingPlan: {
            http: {
                requestUri: "/list-pricing-rules-associated-to-pricing-plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "PricingPlanArn" ],
                members: {
                    BillingPeriod: {},
                    PricingPlanArn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    BillingPeriod: {},
                    PricingPlanArn: {},
                    PricingRuleArns: {
                        shape: "S3n"
                    },
                    NextToken: {}
                }
            }
        },
        ListResourcesAssociatedToCustomLineItem: {
            http: {
                requestUri: "/list-resources-associated-to-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    BillingPeriod: {},
                    Arn: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Filters: {
                        type: "structure",
                        members: {
                            Relationship: {}
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    AssociatedResources: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Arn: {},
                                Relationship: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sz"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    Tags: {
                        shape: "Sz"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    TagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateBillingGroup: {
            http: {
                requestUri: "/update-billing-group",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "Su"
                    },
                    Status: {},
                    ComputationPreference: {
                        shape: "Sw"
                    },
                    Description: {
                        shape: "Sy"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {
                        shape: "Su"
                    },
                    Description: {
                        shape: "Sy"
                    },
                    PrimaryAccountId: {},
                    PricingPlanArn: {},
                    Size: {
                        type: "long"
                    },
                    LastModifiedTime: {
                        type: "long"
                    },
                    Status: {},
                    StatusReason: {}
                }
            },
            idempotent: true
        },
        UpdateCustomLineItem: {
            http: {
                requestUri: "/update-custom-line-item",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "Su"
                    },
                    Description: {
                        shape: "S15"
                    },
                    ChargeDetails: {
                        type: "structure",
                        members: {
                            Flat: {
                                type: "structure",
                                required: [ "ChargeValue" ],
                                members: {
                                    ChargeValue: {
                                        type: "double"
                                    }
                                }
                            },
                            Percentage: {
                                type: "structure",
                                required: [ "PercentageValue" ],
                                members: {
                                    PercentageValue: {
                                        type: "double"
                                    }
                                }
                            }
                        }
                    },
                    BillingPeriodRange: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    BillingGroupArn: {},
                    Name: {
                        shape: "S14"
                    },
                    Description: {
                        shape: "S15"
                    },
                    ChargeDetails: {
                        shape: "S34"
                    },
                    LastModifiedTime: {
                        type: "long"
                    },
                    AssociationSize: {
                        type: "long"
                    }
                }
            },
            idempotent: true
        },
        UpdatePricingPlan: {
            http: {
                method: "PUT",
                requestUri: "/update-pricing-plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "S1f"
                    },
                    Description: {
                        shape: "S1g"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {
                        shape: "S1f"
                    },
                    Description: {
                        shape: "S1g"
                    },
                    Size: {
                        type: "long"
                    },
                    LastModifiedTime: {
                        type: "long"
                    }
                }
            },
            idempotent: true
        },
        UpdatePricingRule: {
            http: {
                method: "PUT",
                requestUri: "/update-pricing-rule",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Arn" ],
                members: {
                    Arn: {},
                    Name: {
                        shape: "S1k"
                    },
                    Description: {
                        shape: "S1l"
                    },
                    Type: {},
                    ModifierPercentage: {
                        type: "double"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Arn: {},
                    Name: {
                        shape: "S1k"
                    },
                    Description: {
                        shape: "S1l"
                    },
                    Scope: {},
                    Type: {},
                    ModifierPercentage: {
                        type: "double"
                    },
                    Service: {},
                    AssociatedPricingPlanCount: {
                        type: "long"
                    },
                    LastModifiedTime: {
                        type: "long"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "list",
            member: {}
        },
        S8: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "structure",
            required: [ "InclusiveStartBillingPeriod", "ExclusiveEndBillingPeriod" ],
            members: {
                InclusiveStartBillingPeriod: {},
                ExclusiveEndBillingPeriod: {}
            }
        },
        Si: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    Error: {
                        shape: "Sk"
                    }
                }
            }
        },
        Sk: {
            type: "structure",
            members: {
                Message: {},
                Reason: {}
            }
        },
        Sq: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Arn: {},
                    Error: {
                        shape: "Sk"
                    }
                }
            }
        },
        Su: {
            type: "string",
            sensitive: true
        },
        Sw: {
            type: "structure",
            required: [ "PricingPlanArn" ],
            members: {
                PricingPlanArn: {}
            }
        },
        Sy: {
            type: "string",
            sensitive: true
        },
        Sz: {
            type: "map",
            key: {},
            value: {}
        },
        S14: {
            type: "string",
            sensitive: true
        },
        S15: {
            type: "string",
            sensitive: true
        },
        S1f: {
            type: "string",
            sensitive: true
        },
        S1g: {
            type: "string",
            sensitive: true
        },
        S1k: {
            type: "string",
            sensitive: true
        },
        S1l: {
            type: "string",
            sensitive: true
        },
        S2f: {
            type: "list",
            member: {}
        },
        S34: {
            type: "structure",
            required: [ "Type" ],
            members: {
                Flat: {
                    type: "structure",
                    required: [ "ChargeValue" ],
                    members: {
                        ChargeValue: {
                            type: "double"
                        }
                    }
                },
                Percentage: {
                    type: "structure",
                    required: [ "PercentageValue" ],
                    members: {
                        PercentageValue: {
                            type: "double"
                        }
                    }
                },
                Type: {}
            }
        },
        S3c: {
            type: "list",
            member: {}
        },
        S3n: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListAccountAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            result_key: "LinkedAccounts"
        },
        ListBillingGroupCostReports: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "BillingGroupCostReports"
        },
        ListBillingGroups: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "BillingGroups"
        },
        ListCustomLineItems: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            output_token: "NextToken",
            result_key: "CustomLineItems"
        },
        ListPricingPlans: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "BillingPeriod" ],
            output_token: "NextToken",
            result_key: "PricingPlans"
        },
        ListPricingPlansAssociatedWithPricingRule: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "BillingPeriod", "PricingRuleArn" ],
            output_token: "NextToken",
            result_key: "PricingPlanArns"
        },
        ListPricingRules: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "BillingPeriod" ],
            output_token: "NextToken",
            result_key: "PricingRules"
        },
        ListPricingRulesAssociatedToPricingPlan: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "BillingPeriod", "PricingPlanArn" ],
            output_token: "NextToken",
            result_key: "PricingRuleArns"
        },
        ListResourcesAssociatedToCustomLineItem: {
            input_token: "NextToken",
            limit_key: "MaxResults",
            non_aggregate_keys: [ "Arn" ],
            output_token: "NextToken",
            result_key: "AssociatedResources"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["gamesparks"] = {};

AWS.GameSparks = AWS.Service.defineService("gamesparks", [ "2021-08-17" ]);

AWS.apiLoader.services["gamesparks"]["2021-08-17"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-17",
        endpointPrefix: "gamesparks",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "GameSparks",
        serviceId: "GameSparks",
        signatureVersion: "v4",
        signingName: "gamesparks",
        uid: "gamesparks-2021-08-17"
    },
    operations: {
        CreateGame: {
            http: {
                requestUri: "/game",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName" ],
                members: {
                    ClientToken: {},
                    Description: {},
                    GameName: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Game: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        },
        CreateSnapshot: {
            http: {
                requestUri: "/game/{GameName}/snapshot",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName" ],
                members: {
                    Description: {},
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "Sh"
                    }
                }
            }
        },
        CreateStage: {
            http: {
                requestUri: "/game/{GameName}/stage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "Role", "StageName" ],
                members: {
                    ClientToken: {},
                    Description: {},
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    Role: {},
                    StageName: {},
                    Tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Stage: {
                        shape: "St"
                    }
                }
            },
            idempotent: true
        },
        DeleteGame: {
            http: {
                method: "DELETE",
                requestUri: "/game/{GameName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteStage: {
            http: {
                method: "DELETE",
                requestUri: "/game/{GameName}/stage/{StageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "StageName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "StageName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DisconnectPlayer: {
            http: {
                requestUri: "/runtime/game/{GameName}/stage/{StageName}/player/{PlayerId}/disconnect",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "PlayerId", "StageName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    PlayerId: {
                        location: "uri",
                        locationName: "PlayerId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "StageName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    DisconnectFailures: {
                        shape: "S14"
                    },
                    DisconnectSuccesses: {
                        shape: "S14"
                    }
                }
            },
            idempotent: true
        },
        ExportSnapshot: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/snapshot/{SnapshotId}/export",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "SnapshotId" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    SnapshotId: {
                        location: "uri",
                        locationName: "SnapshotId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    S3Url: {}
                }
            }
        },
        GetExtension: {
            http: {
                method: "GET",
                requestUri: "/extension/{Namespace}/{Name}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "Namespace" ],
                members: {
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Extension: {
                        shape: "S1d"
                    }
                }
            }
        },
        GetExtensionVersion: {
            http: {
                method: "GET",
                requestUri: "/extension/{Namespace}/{Name}/version/{ExtensionVersion}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ExtensionVersion", "Name", "Namespace" ],
                members: {
                    ExtensionVersion: {
                        location: "uri",
                        locationName: "ExtensionVersion"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExtensionVersion: {
                        shape: "S1i"
                    }
                }
            }
        },
        GetGame: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Game: {
                        shape: "S9"
                    }
                }
            }
        },
        GetGameConfiguration: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    Sections: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "Sections"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GameConfiguration: {
                        shape: "S1p"
                    }
                }
            }
        },
        GetGeneratedCodeJob: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/snapshot/{SnapshotId}/generated-sdk-code-job/{JobId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "JobId", "SnapshotId" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    JobId: {
                        location: "uri",
                        locationName: "JobId"
                    },
                    SnapshotId: {
                        location: "uri",
                        locationName: "SnapshotId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GeneratedCodeJob: {
                        shape: "S1t"
                    }
                }
            }
        },
        GetPlayerConnectionStatus: {
            http: {
                method: "GET",
                requestUri: "/runtime/game/{GameName}/stage/{StageName}/player/{PlayerId}/connection",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "PlayerId", "StageName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    PlayerId: {
                        location: "uri",
                        locationName: "PlayerId"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "StageName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Connections: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Created: {
                                    shape: "Sb"
                                },
                                Id: {}
                            }
                        }
                    }
                }
            }
        },
        GetSnapshot: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/snapshot/{SnapshotId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "SnapshotId" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    Sections: {
                        shape: "S1n",
                        location: "querystring",
                        locationName: "Sections"
                    },
                    SnapshotId: {
                        location: "uri",
                        locationName: "SnapshotId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "Sh"
                    }
                }
            }
        },
        GetStage: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/stage/{StageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "StageName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "StageName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Stage: {
                        shape: "St"
                    }
                }
            }
        },
        GetStageDeployment: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/stage/{StageName}/deployment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "StageName" ],
                members: {
                    DeploymentId: {
                        location: "querystring",
                        locationName: "DeploymentId"
                    },
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "StageName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StageDeployment: {
                        shape: "S27"
                    }
                }
            }
        },
        ImportGameConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/game/{GameName}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "ImportSource" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    ImportSource: {
                        type: "structure",
                        required: [ "File" ],
                        members: {
                            File: {
                                type: "blob"
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GameConfiguration: {
                        shape: "S1p"
                    }
                }
            },
            idempotent: true
        },
        ListExtensionVersions: {
            http: {
                method: "GET",
                requestUri: "/extension/{Namespace}/{Name}/version",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "Name", "Namespace" ],
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    Name: {
                        location: "uri",
                        locationName: "Name"
                    },
                    Namespace: {
                        location: "uri",
                        locationName: "Namespace"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ExtensionVersions: {
                        type: "list",
                        member: {
                            shape: "S1i"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListExtensions: {
            http: {
                method: "GET",
                requestUri: "/extension",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Extensions: {
                        type: "list",
                        member: {
                            shape: "S1d"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListGames: {
            http: {
                method: "GET",
                requestUri: "/game",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Games: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Description: {},
                                Name: {},
                                State: {},
                                Tags: {
                                    shape: "S5"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListGeneratedCodeJobs: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/snapshot/{SnapshotId}/generated-sdk-code-jobs",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "SnapshotId" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    SnapshotId: {
                        location: "uri",
                        locationName: "SnapshotId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GeneratedCodeJobs: {
                        type: "list",
                        member: {
                            shape: "S1t"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListSnapshots: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/snapshot",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Snapshots: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Created: {
                                    shape: "Sb"
                                },
                                Description: {},
                                Id: {},
                                LastUpdated: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListStageDeployments: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/stage/{StageName}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "StageName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    },
                    StageName: {
                        location: "uri",
                        locationName: "StageName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    StageDeployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                DeploymentAction: {},
                                DeploymentId: {},
                                DeploymentResult: {
                                    shape: "S29"
                                },
                                DeploymentState: {},
                                LastUpdated: {
                                    shape: "Sb"
                                },
                                SnapshotId: {}
                            }
                        }
                    }
                }
            }
        },
        ListStages: {
            http: {
                method: "GET",
                requestUri: "/game/{GameName}/stage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "MaxResults",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "NextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    Stages: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                Description: {},
                                GameKey: {},
                                Name: {},
                                State: {},
                                Tags: {
                                    shape: "S5"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S5"
                    }
                }
            }
        },
        StartGeneratedCodeJob: {
            http: {
                requestUri: "/game/{GameName}/snapshot/{SnapshotId}/generated-sdk-code-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "Generator", "SnapshotId" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    Generator: {
                        type: "structure",
                        members: {
                            GameSdkVersion: {},
                            Language: {},
                            TargetPlatform: {}
                        }
                    },
                    SnapshotId: {
                        location: "uri",
                        locationName: "SnapshotId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GeneratedCodeJobId: {}
                }
            }
        },
        StartStageDeployment: {
            http: {
                requestUri: "/game/{GameName}/stage/{StageName}/deployment",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "SnapshotId", "StageName" ],
                members: {
                    ClientToken: {},
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    SnapshotId: {},
                    StageName: {
                        location: "uri",
                        locationName: "StageName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    StageDeployment: {
                        shape: "S27"
                    }
                }
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "tags" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    tags: {
                        shape: "S5"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{ResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceArn", "tagKeys" ],
                members: {
                    ResourceArn: {
                        location: "uri",
                        locationName: "ResourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateGame: {
            http: {
                method: "PATCH",
                requestUri: "/game/{GameName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName" ],
                members: {
                    Description: {},
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Game: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        },
        UpdateGameConfiguration: {
            http: {
                method: "PATCH",
                requestUri: "/game/{GameName}/configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "Modifications" ],
                members: {
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    Modifications: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Operation", "Path", "Section" ],
                            members: {
                                Operation: {},
                                Path: {},
                                Section: {},
                                Value: {
                                    shape: "Sm"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    GameConfiguration: {
                        shape: "S1p"
                    }
                }
            },
            idempotent: true
        },
        UpdateSnapshot: {
            http: {
                method: "PATCH",
                requestUri: "/game/{GameName}/snapshot/{SnapshotId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "SnapshotId" ],
                members: {
                    Description: {},
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    SnapshotId: {
                        location: "uri",
                        locationName: "SnapshotId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Snapshot: {
                        shape: "Sh"
                    }
                }
            },
            idempotent: true
        },
        UpdateStage: {
            http: {
                method: "PATCH",
                requestUri: "/game/{GameName}/stage/{StageName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "GameName", "StageName" ],
                members: {
                    Description: {},
                    GameName: {
                        location: "uri",
                        locationName: "GameName"
                    },
                    Role: {},
                    StageName: {
                        location: "uri",
                        locationName: "StageName"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Stage: {
                        shape: "St"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S5: {
            type: "map",
            key: {},
            value: {}
        },
        S9: {
            type: "structure",
            members: {
                Arn: {},
                Created: {
                    shape: "Sb"
                },
                Description: {},
                EnableTerminationProtection: {
                    type: "boolean"
                },
                LastUpdated: {
                    shape: "Sb"
                },
                Name: {},
                State: {},
                Tags: {
                    shape: "S5"
                }
            }
        },
        Sb: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sh: {
            type: "structure",
            members: {
                Created: {
                    shape: "Sb"
                },
                Description: {},
                Id: {},
                LastUpdated: {
                    shape: "Sb"
                },
                Sections: {
                    shape: "Sj"
                }
            }
        },
        Sj: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    Attributes: {
                        shape: "Sm"
                    },
                    Name: {},
                    Size: {
                        type: "integer"
                    }
                }
            }
        },
        Sm: {
            type: "structure",
            members: {},
            document: true
        },
        St: {
            type: "structure",
            members: {
                Arn: {},
                Created: {
                    shape: "Sb"
                },
                Description: {},
                GameKey: {},
                LastUpdated: {
                    shape: "Sb"
                },
                LogGroup: {},
                Name: {},
                Role: {},
                State: {},
                Tags: {
                    shape: "S5"
                }
            }
        },
        S14: {
            type: "list",
            member: {}
        },
        S1d: {
            type: "structure",
            members: {
                Description: {},
                Name: {},
                Namespace: {}
            }
        },
        S1i: {
            type: "structure",
            members: {
                Name: {},
                Namespace: {},
                Schema: {},
                Version: {}
            }
        },
        S1n: {
            type: "list",
            member: {}
        },
        S1p: {
            type: "structure",
            members: {
                Created: {
                    shape: "Sb"
                },
                LastUpdated: {
                    shape: "Sb"
                },
                Sections: {
                    shape: "Sj"
                }
            }
        },
        S1t: {
            type: "structure",
            members: {
                Description: {},
                ExpirationTime: {
                    shape: "Sb"
                },
                GeneratedCodeJobId: {},
                S3Url: {},
                Status: {}
            }
        },
        S27: {
            type: "structure",
            members: {
                Created: {
                    shape: "Sb"
                },
                DeploymentAction: {},
                DeploymentId: {},
                DeploymentResult: {
                    shape: "S29"
                },
                DeploymentState: {},
                LastUpdated: {
                    shape: "Sb"
                },
                SnapshotId: {}
            }
        },
        S29: {
            type: "structure",
            members: {
                Message: {},
                ResultCode: {}
            }
        }
    },
    paginators: {
        ListExtensionVersions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ExtensionVersions"
        },
        ListExtensions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Extensions"
        },
        ListGames: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Games"
        },
        ListGeneratedCodeJobs: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "GeneratedCodeJobs"
        },
        ListSnapshots: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Snapshots"
        },
        ListStageDeployments: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "StageDeployments"
        },
        ListStages: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Stages"
        }
    }
};

AWS.apiLoader.services["pinpointsmsvoicev2"] = {};

AWS.PinpointSMSVoiceV2 = AWS.Service.defineService("pinpointsmsvoicev2", [ "2022-03-31" ]);

AWS.apiLoader.services["pinpointsmsvoicev2"]["2022-03-31"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-03-31",
        endpointPrefix: "sms-voice",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "Amazon Pinpoint SMS Voice V2",
        serviceId: "Pinpoint SMS Voice V2",
        signatureVersion: "v4",
        signingName: "sms-voice",
        targetPrefix: "PinpointSMSVoiceV2",
        uid: "pinpoint-sms-voice-v2-2022-03-31"
    },
    operations: {
        AssociateOriginationIdentity: {
            input: {
                type: "structure",
                required: [ "PoolId", "OriginationIdentity", "IsoCountryCode" ],
                members: {
                    PoolId: {},
                    OriginationIdentity: {},
                    IsoCountryCode: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    IsoCountryCode: {}
                }
            }
        },
        CreateConfigurationSet: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {},
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreateEventDestination: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName", "MatchingEventTypes" ],
                members: {
                    ConfigurationSetName: {},
                    EventDestinationName: {},
                    MatchingEventTypes: {
                        shape: "Sj"
                    },
                    CloudWatchLogsDestination: {
                        shape: "Sl"
                    },
                    KinesisFirehoseDestination: {
                        shape: "So"
                    },
                    SnsDestination: {
                        shape: "Sq"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    EventDestination: {
                        shape: "St"
                    }
                }
            }
        },
        CreateOptOutList: {
            input: {
                type: "structure",
                required: [ "OptOutListName" ],
                members: {
                    OptOutListName: {},
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        CreatePool: {
            input: {
                type: "structure",
                required: [ "OriginationIdentity", "IsoCountryCode", "MessageType" ],
                members: {
                    OriginationIdentity: {},
                    IsoCountryCode: {},
                    MessageType: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    Status: {},
                    MessageType: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    SharedRoutesEnabled: {
                        type: "boolean"
                    },
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteConfigurationSet: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    EventDestinations: {
                        shape: "S16"
                    },
                    DefaultMessageType: {},
                    DefaultSenderId: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteDefaultMessageType: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    MessageType: {}
                }
            }
        },
        DeleteDefaultSenderId: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName" ],
                members: {
                    ConfigurationSetName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    SenderId: {}
                }
            }
        },
        DeleteEventDestination: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {},
                    EventDestinationName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    EventDestination: {
                        shape: "St"
                    }
                }
            }
        },
        DeleteKeyword: {
            input: {
                type: "structure",
                required: [ "OriginationIdentity", "Keyword" ],
                members: {
                    OriginationIdentity: {},
                    Keyword: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    Keyword: {},
                    KeywordMessage: {},
                    KeywordAction: {}
                }
            }
        },
        DeleteOptOutList: {
            input: {
                type: "structure",
                required: [ "OptOutListName" ],
                members: {
                    OptOutListName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteOptedOutNumber: {
            input: {
                type: "structure",
                required: [ "OptOutListName", "OptedOutNumber" ],
                members: {
                    OptOutListName: {},
                    OptedOutNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    OptedOutNumber: {},
                    OptedOutTimestamp: {
                        type: "timestamp"
                    },
                    EndUserOptedOut: {
                        type: "boolean"
                    }
                }
            }
        },
        DeletePool: {
            input: {
                type: "structure",
                required: [ "PoolId" ],
                members: {
                    PoolId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    Status: {},
                    MessageType: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    SharedRoutesEnabled: {
                        type: "boolean"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteTextMessageSpendLimitOverride: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            }
        },
        DeleteVoiceMessageSpendLimitOverride: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            }
        },
        DescribeAccountAttributes: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountAttributes: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Value" ],
                            members: {
                                Name: {},
                                Value: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeAccountLimits: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    AccountLimits: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Used", "Max" ],
                            members: {
                                Name: {},
                                Used: {
                                    type: "long"
                                },
                                Max: {
                                    type: "long"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeConfigurationSets: {
            input: {
                type: "structure",
                members: {
                    ConfigurationSetNames: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2f"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "ConfigurationSetArn", "ConfigurationSetName", "EventDestinations", "CreatedTimestamp" ],
                            members: {
                                ConfigurationSetArn: {},
                                ConfigurationSetName: {},
                                EventDestinations: {
                                    shape: "S16"
                                },
                                DefaultMessageType: {},
                                DefaultSenderId: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeKeywords: {
            input: {
                type: "structure",
                required: [ "OriginationIdentity" ],
                members: {
                    OriginationIdentity: {},
                    Keywords: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2f"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    Keywords: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Keyword", "KeywordMessage", "KeywordAction" ],
                            members: {
                                Keyword: {},
                                KeywordMessage: {},
                                KeywordAction: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeOptOutLists: {
            input: {
                type: "structure",
                members: {
                    OptOutListNames: {
                        type: "list",
                        member: {}
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutLists: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OptOutListArn", "OptOutListName", "CreatedTimestamp" ],
                            members: {
                                OptOutListArn: {},
                                OptOutListName: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeOptedOutNumbers: {
            input: {
                type: "structure",
                required: [ "OptOutListName" ],
                members: {
                    OptOutListName: {},
                    OptedOutNumbers: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2f"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    OptedOutNumbers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OptedOutNumber", "OptedOutTimestamp", "EndUserOptedOut" ],
                            members: {
                                OptedOutNumber: {},
                                OptedOutTimestamp: {
                                    type: "timestamp"
                                },
                                EndUserOptedOut: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePhoneNumbers: {
            input: {
                type: "structure",
                members: {
                    PhoneNumberIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2f"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumbers: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PhoneNumberArn", "PhoneNumber", "Status", "IsoCountryCode", "MessageType", "NumberCapabilities", "NumberType", "MonthlyLeasingPrice", "TwoWayEnabled", "SelfManagedOptOutsEnabled", "OptOutListName", "DeletionProtectionEnabled", "CreatedTimestamp" ],
                            members: {
                                PhoneNumberArn: {},
                                PhoneNumberId: {},
                                PhoneNumber: {},
                                Status: {},
                                IsoCountryCode: {},
                                MessageType: {},
                                NumberCapabilities: {
                                    shape: "S3f"
                                },
                                NumberType: {},
                                MonthlyLeasingPrice: {},
                                TwoWayEnabled: {
                                    type: "boolean"
                                },
                                TwoWayChannelArn: {},
                                SelfManagedOptOutsEnabled: {
                                    type: "boolean"
                                },
                                OptOutListName: {},
                                DeletionProtectionEnabled: {
                                    type: "boolean"
                                },
                                PoolId: {},
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribePools: {
            input: {
                type: "structure",
                members: {
                    PoolIds: {
                        type: "list",
                        member: {}
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2f"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Pools: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "PoolArn", "PoolId", "Status", "MessageType", "TwoWayEnabled", "SelfManagedOptOutsEnabled", "OptOutListName", "SharedRoutesEnabled", "DeletionProtectionEnabled", "CreatedTimestamp" ],
                            members: {
                                PoolArn: {},
                                PoolId: {},
                                Status: {},
                                MessageType: {},
                                TwoWayEnabled: {
                                    type: "boolean"
                                },
                                TwoWayChannelArn: {},
                                SelfManagedOptOutsEnabled: {
                                    type: "boolean"
                                },
                                OptOutListName: {},
                                SharedRoutesEnabled: {
                                    type: "boolean"
                                },
                                DeletionProtectionEnabled: {
                                    type: "boolean"
                                },
                                CreatedTimestamp: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSenderIds: {
            input: {
                type: "structure",
                members: {
                    SenderIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SenderId", "IsoCountryCode" ],
                            members: {
                                SenderId: {},
                                IsoCountryCode: {}
                            }
                        }
                    },
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2f"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SenderIds: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "SenderIdArn", "SenderId", "IsoCountryCode", "MessageTypes", "MonthlyLeasingPrice" ],
                            members: {
                                SenderIdArn: {},
                                SenderId: {},
                                IsoCountryCode: {},
                                MessageTypes: {
                                    type: "list",
                                    member: {}
                                },
                                MonthlyLeasingPrice: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DescribeSpendLimits: {
            input: {
                type: "structure",
                members: {
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    SpendLimits: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "EnforcedLimit", "MaxLimit", "Overridden" ],
                            members: {
                                Name: {},
                                EnforcedLimit: {
                                    type: "long"
                                },
                                MaxLimit: {
                                    type: "long"
                                },
                                Overridden: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        DisassociateOriginationIdentity: {
            input: {
                type: "structure",
                required: [ "PoolId", "OriginationIdentity", "IsoCountryCode" ],
                members: {
                    PoolId: {},
                    OriginationIdentity: {},
                    IsoCountryCode: {},
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    IsoCountryCode: {}
                }
            }
        },
        ListPoolOriginationIdentities: {
            input: {
                type: "structure",
                required: [ "PoolId" ],
                members: {
                    PoolId: {},
                    Filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "Values" ],
                            members: {
                                Name: {},
                                Values: {
                                    shape: "S2f"
                                }
                            }
                        }
                    },
                    NextToken: {},
                    MaxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    OriginationIdentities: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "OriginationIdentityArn", "OriginationIdentity", "IsoCountryCode", "NumberCapabilities" ],
                            members: {
                                OriginationIdentityArn: {},
                                OriginationIdentity: {},
                                IsoCountryCode: {},
                                NumberCapabilities: {
                                    shape: "S3f"
                                }
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn" ],
                members: {
                    ResourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ResourceArn: {},
                    Tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        PutKeyword: {
            input: {
                type: "structure",
                required: [ "OriginationIdentity", "Keyword", "KeywordMessage" ],
                members: {
                    OriginationIdentity: {},
                    Keyword: {},
                    KeywordMessage: {},
                    KeywordAction: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OriginationIdentityArn: {},
                    OriginationIdentity: {},
                    Keyword: {},
                    KeywordMessage: {},
                    KeywordAction: {}
                }
            }
        },
        PutOptedOutNumber: {
            input: {
                type: "structure",
                required: [ "OptOutListName", "OptedOutNumber" ],
                members: {
                    OptOutListName: {},
                    OptedOutNumber: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    OptOutListArn: {},
                    OptOutListName: {},
                    OptedOutNumber: {},
                    OptedOutTimestamp: {
                        type: "timestamp"
                    },
                    EndUserOptedOut: {
                        type: "boolean"
                    }
                }
            }
        },
        ReleasePhoneNumber: {
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberArn: {},
                    PhoneNumberId: {},
                    PhoneNumber: {},
                    Status: {},
                    IsoCountryCode: {},
                    MessageType: {},
                    NumberCapabilities: {
                        shape: "S3f"
                    },
                    NumberType: {},
                    MonthlyLeasingPrice: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        RequestPhoneNumber: {
            input: {
                type: "structure",
                required: [ "IsoCountryCode", "MessageType", "NumberCapabilities", "NumberType" ],
                members: {
                    IsoCountryCode: {},
                    MessageType: {},
                    NumberCapabilities: {
                        shape: "S3f"
                    },
                    NumberType: {},
                    OptOutListName: {},
                    PoolId: {},
                    RegistrationId: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    Tags: {
                        shape: "Sa"
                    },
                    ClientToken: {
                        idempotencyToken: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberArn: {},
                    PhoneNumberId: {},
                    PhoneNumber: {},
                    Status: {},
                    IsoCountryCode: {},
                    MessageType: {},
                    NumberCapabilities: {
                        shape: "S3f"
                    },
                    NumberType: {},
                    MonthlyLeasingPrice: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    PoolId: {},
                    Tags: {
                        shape: "Sa"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        SendTextMessage: {
            input: {
                type: "structure",
                required: [ "DestinationPhoneNumber" ],
                members: {
                    DestinationPhoneNumber: {},
                    OriginationIdentity: {},
                    MessageBody: {},
                    MessageType: {},
                    Keyword: {},
                    ConfigurationSetName: {},
                    MaxPrice: {},
                    TimeToLive: {
                        type: "integer"
                    },
                    Context: {
                        shape: "S4x"
                    },
                    DestinationCountryParameters: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SendVoiceMessage: {
            input: {
                type: "structure",
                required: [ "DestinationPhoneNumber", "OriginationIdentity" ],
                members: {
                    DestinationPhoneNumber: {},
                    OriginationIdentity: {},
                    MessageBody: {},
                    MessageBodyTextType: {},
                    VoiceId: {},
                    ConfigurationSetName: {},
                    MaxPricePerMinute: {},
                    TimeToLive: {
                        type: "integer"
                    },
                    Context: {
                        shape: "S4x"
                    },
                    DryRun: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MessageId: {}
                }
            }
        },
        SetDefaultMessageType: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "MessageType" ],
                members: {
                    ConfigurationSetName: {},
                    MessageType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    MessageType: {}
                }
            }
        },
        SetDefaultSenderId: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "SenderId" ],
                members: {
                    ConfigurationSetName: {},
                    SenderId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    SenderId: {}
                }
            }
        },
        SetTextMessageSpendLimitOverride: {
            input: {
                type: "structure",
                required: [ "MonthlyLimit" ],
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            }
        },
        SetVoiceMessageSpendLimitOverride: {
            input: {
                type: "structure",
                required: [ "MonthlyLimit" ],
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MonthlyLimit: {
                        type: "long"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "Tags" ],
                members: {
                    ResourceArn: {},
                    Tags: {
                        type: "list",
                        member: {
                            shape: "Sb"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceArn", "TagKeys" ],
                members: {
                    ResourceArn: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEventDestination: {
            input: {
                type: "structure",
                required: [ "ConfigurationSetName", "EventDestinationName" ],
                members: {
                    ConfigurationSetName: {},
                    EventDestinationName: {},
                    Enabled: {
                        type: "boolean"
                    },
                    MatchingEventTypes: {
                        shape: "Sj"
                    },
                    CloudWatchLogsDestination: {
                        shape: "Sl"
                    },
                    KinesisFirehoseDestination: {
                        shape: "So"
                    },
                    SnsDestination: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    ConfigurationSetArn: {},
                    ConfigurationSetName: {},
                    EventDestination: {
                        shape: "St"
                    }
                }
            }
        },
        UpdatePhoneNumber: {
            input: {
                type: "structure",
                required: [ "PhoneNumberId" ],
                members: {
                    PhoneNumberId: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PhoneNumberArn: {},
                    PhoneNumberId: {},
                    PhoneNumber: {},
                    Status: {},
                    IsoCountryCode: {},
                    MessageType: {},
                    NumberCapabilities: {
                        shape: "S3f"
                    },
                    NumberType: {},
                    MonthlyLeasingPrice: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        },
        UpdatePool: {
            input: {
                type: "structure",
                required: [ "PoolId" ],
                members: {
                    PoolId: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    SharedRoutesEnabled: {
                        type: "boolean"
                    },
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    PoolArn: {},
                    PoolId: {},
                    Status: {},
                    MessageType: {},
                    TwoWayEnabled: {
                        type: "boolean"
                    },
                    TwoWayChannelArn: {},
                    SelfManagedOptOutsEnabled: {
                        type: "boolean"
                    },
                    OptOutListName: {},
                    SharedRoutesEnabled: {
                        type: "boolean"
                    },
                    DeletionProtectionEnabled: {
                        type: "boolean"
                    },
                    CreatedTimestamp: {
                        type: "timestamp"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "list",
            member: {
                shape: "Sb"
            }
        },
        Sb: {
            type: "structure",
            required: [ "Key", "Value" ],
            members: {
                Key: {},
                Value: {}
            }
        },
        Sj: {
            type: "list",
            member: {}
        },
        Sl: {
            type: "structure",
            required: [ "IamRoleArn", "LogGroupArn" ],
            members: {
                IamRoleArn: {},
                LogGroupArn: {}
            }
        },
        So: {
            type: "structure",
            required: [ "IamRoleArn", "DeliveryStreamArn" ],
            members: {
                IamRoleArn: {},
                DeliveryStreamArn: {}
            }
        },
        Sq: {
            type: "structure",
            required: [ "TopicArn" ],
            members: {
                TopicArn: {}
            }
        },
        St: {
            type: "structure",
            required: [ "EventDestinationName", "Enabled", "MatchingEventTypes" ],
            members: {
                EventDestinationName: {},
                Enabled: {
                    type: "boolean"
                },
                MatchingEventTypes: {
                    shape: "Sj"
                },
                CloudWatchLogsDestination: {
                    shape: "Sl"
                },
                KinesisFirehoseDestination: {
                    shape: "So"
                },
                SnsDestination: {
                    shape: "Sq"
                }
            }
        },
        S16: {
            type: "list",
            member: {
                shape: "St"
            }
        },
        S2f: {
            type: "list",
            member: {}
        },
        S3f: {
            type: "list",
            member: {}
        },
        S4x: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        DescribeAccountAttributes: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccountAttributes"
        },
        DescribeAccountLimits: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "AccountLimits"
        },
        DescribeConfigurationSets: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ConfigurationSets"
        },
        DescribeKeywords: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Keywords"
        },
        DescribeOptOutLists: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "OptOutLists"
        },
        DescribeOptedOutNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "OptedOutNumbers"
        },
        DescribePhoneNumbers: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "PhoneNumbers"
        },
        DescribePools: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "Pools"
        },
        DescribeSenderIds: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SenderIds"
        },
        DescribeSpendLimits: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "SpendLimits"
        },
        ListPoolOriginationIdentities: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "OriginationIdentities"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["ivschat"] = {};

AWS.Ivschat = AWS.Service.defineService("ivschat", [ "2020-07-14" ]);

AWS.apiLoader.services["ivschat"]["2020-07-14"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2020-07-14",
        endpointPrefix: "ivschat",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "ivschat",
        serviceFullName: "Amazon Interactive Video Service Chat",
        serviceId: "ivschat",
        signatureVersion: "v4",
        signingName: "ivschat",
        uid: "ivschat-2020-07-14"
    },
    operations: {
        CreateChatToken: {
            http: {
                requestUri: "/CreateChatToken",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "roomIdentifier", "userId" ],
                members: {
                    attributes: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    capabilities: {
                        type: "list",
                        member: {}
                    },
                    roomIdentifier: {},
                    sessionDurationInMinutes: {
                        type: "integer"
                    },
                    userId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    sessionExpirationTime: {
                        shape: "Sa"
                    },
                    token: {},
                    tokenExpirationTime: {
                        shape: "Sa"
                    }
                }
            }
        },
        CreateRoom: {
            http: {
                requestUri: "/CreateRoom",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sf"
                    },
                    name: {},
                    tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createTime: {
                        shape: "Sa"
                    },
                    id: {},
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sf"
                    },
                    name: {},
                    tags: {
                        shape: "Sj"
                    },
                    updateTime: {
                        shape: "Sa"
                    }
                }
            }
        },
        DeleteMessage: {
            http: {
                requestUri: "/DeleteMessage",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "roomIdentifier" ],
                members: {
                    id: {},
                    reason: {},
                    roomIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        DeleteRoom: {
            http: {
                requestUri: "/DeleteRoom",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    identifier: {}
                }
            }
        },
        DisconnectUser: {
            http: {
                requestUri: "/DisconnectUser",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "roomIdentifier", "userId" ],
                members: {
                    reason: {},
                    roomIdentifier: {},
                    userId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetRoom: {
            http: {
                requestUri: "/GetRoom",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    identifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createTime: {
                        shape: "Sa"
                    },
                    id: {},
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sf"
                    },
                    name: {},
                    tags: {
                        shape: "Sj"
                    },
                    updateTime: {
                        shape: "Sa"
                    }
                }
            }
        },
        ListRooms: {
            http: {
                requestUri: "/ListRooms",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    messageReviewHandlerUri: {},
                    name: {},
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "rooms" ],
                members: {
                    nextToken: {},
                    rooms: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                arn: {},
                                createTime: {
                                    shape: "Sa"
                                },
                                id: {},
                                messageReviewHandler: {
                                    shape: "Sf"
                                },
                                name: {},
                                tags: {
                                    shape: "Sj"
                                },
                                updateTime: {
                                    shape: "Sa"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Sj"
                    }
                }
            }
        },
        SendEvent: {
            http: {
                requestUri: "/SendEvent",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "eventName", "roomIdentifier" ],
                members: {
                    attributes: {
                        type: "map",
                        key: {},
                        value: {}
                    },
                    eventName: {},
                    roomIdentifier: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateRoom: {
            http: {
                requestUri: "/UpdateRoom",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "identifier" ],
                members: {
                    identifier: {},
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sf"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    createTime: {
                        shape: "Sa"
                    },
                    id: {},
                    maximumMessageLength: {
                        type: "integer"
                    },
                    maximumMessageRatePerSecond: {
                        type: "integer"
                    },
                    messageReviewHandler: {
                        shape: "Sf"
                    },
                    name: {},
                    tags: {
                        shape: "Sj"
                    },
                    updateTime: {
                        shape: "Sa"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sf: {
            type: "structure",
            members: {
                fallbackResult: {},
                uri: {}
            }
        },
        Sj: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListRooms: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        }
    }
};

AWS.apiLoader.services["chimesdkmediapipelines"] = {};

AWS.ChimeSDKMediaPipelines = AWS.Service.defineService("chimesdkmediapipelines", [ "2021-07-15" ]);

AWS.apiLoader.services["chimesdkmediapipelines"]["2021-07-15"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-07-15",
        endpointPrefix: "media-pipelines-chime",
        protocol: "rest-json",
        serviceFullName: "Amazon Chime SDK Media Pipelines",
        serviceId: "Chime SDK Media Pipelines",
        signatureVersion: "v4",
        signingName: "chime",
        uid: "chime-sdk-media-pipelines-2021-07-15"
    },
    operations: {
        CreateMediaCapturePipeline: {
            http: {
                requestUri: "/sdk-media-capture-pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "SourceType", "SourceArn", "SinkType", "SinkArn" ],
                members: {
                    SourceType: {},
                    SourceArn: {
                        shape: "S3"
                    },
                    SinkType: {},
                    SinkArn: {
                        shape: "S3"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    },
                    ChimeSdkMeetingConfiguration: {
                        shape: "S6"
                    },
                    Tags: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaCapturePipeline: {
                        shape: "Sx"
                    }
                }
            }
        },
        CreateMediaConcatenationPipeline: {
            http: {
                requestUri: "/sdk-media-concatenation-pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Sources", "Sinks" ],
                members: {
                    Sources: {
                        shape: "S12"
                    },
                    Sinks: {
                        shape: "S1h"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaConcatenationPipeline: {
                        shape: "S1m"
                    }
                }
            }
        },
        CreateMediaLiveConnectorPipeline: {
            http: {
                requestUri: "/sdk-media-live-connector-pipelines",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "Sources", "Sinks" ],
                members: {
                    Sources: {
                        shape: "S1o"
                    },
                    Sinks: {
                        shape: "S1t"
                    },
                    ClientRequestToken: {
                        shape: "S5",
                        idempotencyToken: true
                    },
                    Tags: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaLiveConnectorPipeline: {
                        shape: "S21"
                    }
                }
            }
        },
        DeleteMediaCapturePipeline: {
            http: {
                method: "DELETE",
                requestUri: "/sdk-media-capture-pipelines/{mediaPipelineId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            }
        },
        DeleteMediaPipeline: {
            http: {
                method: "DELETE",
                requestUri: "/sdk-media-pipelines/{mediaPipelineId}",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            }
        },
        GetMediaCapturePipeline: {
            http: {
                method: "GET",
                requestUri: "/sdk-media-capture-pipelines/{mediaPipelineId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaCapturePipeline: {
                        shape: "Sx"
                    }
                }
            }
        },
        GetMediaPipeline: {
            http: {
                method: "GET",
                requestUri: "/sdk-media-pipelines/{mediaPipelineId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "MediaPipelineId" ],
                members: {
                    MediaPipelineId: {
                        location: "uri",
                        locationName: "mediaPipelineId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaPipeline: {
                        type: "structure",
                        members: {
                            MediaCapturePipeline: {
                                shape: "Sx"
                            },
                            MediaLiveConnectorPipeline: {
                                shape: "S21"
                            },
                            MediaConcatenationPipeline: {
                                shape: "S1m"
                            }
                        }
                    }
                }
            }
        },
        ListMediaCapturePipelines: {
            http: {
                method: "GET",
                requestUri: "/sdk-media-capture-pipelines",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaCapturePipelines: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MediaPipelineId: {},
                                MediaPipelineArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListMediaPipelines: {
            http: {
                method: "GET",
                requestUri: "/sdk-media-pipelines",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MediaPipelines: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                MediaPipelineId: {},
                                MediaPipelineArn: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {
                        location: "querystring",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Ss"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags?operation=tag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Ss"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/tags?operation=untag-resource",
                responseCode: 204
            },
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        }
    },
    shapes: {
        S3: {
            type: "string",
            sensitive: true
        },
        S5: {
            type: "string",
            sensitive: true
        },
        S6: {
            type: "structure",
            members: {
                SourceConfiguration: {
                    shape: "S7"
                },
                ArtifactsConfiguration: {
                    type: "structure",
                    required: [ "Audio", "Video", "Content" ],
                    members: {
                        Audio: {
                            type: "structure",
                            required: [ "MuxType" ],
                            members: {
                                MuxType: {}
                            }
                        },
                        Video: {
                            type: "structure",
                            required: [ "State" ],
                            members: {
                                State: {},
                                MuxType: {}
                            }
                        },
                        Content: {
                            type: "structure",
                            required: [ "State" ],
                            members: {
                                State: {},
                                MuxType: {}
                            }
                        },
                        CompositedVideo: {
                            shape: "Sl"
                        }
                    }
                }
            }
        },
        S7: {
            type: "structure",
            members: {
                SelectedVideoStreams: {
                    type: "structure",
                    members: {
                        AttendeeIds: {
                            type: "list",
                            member: {}
                        },
                        ExternalUserIds: {
                            type: "list",
                            member: {
                                type: "string",
                                sensitive: true
                            }
                        }
                    }
                }
            }
        },
        Sl: {
            type: "structure",
            required: [ "GridViewConfiguration" ],
            members: {
                Layout: {},
                Resolution: {},
                GridViewConfiguration: {
                    type: "structure",
                    required: [ "ContentShareLayout" ],
                    members: {
                        ContentShareLayout: {},
                        PresenterOnlyConfiguration: {
                            type: "structure",
                            members: {
                                PresenterPosition: {}
                            }
                        }
                    }
                }
            }
        },
        Ss: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        Sx: {
            type: "structure",
            members: {
                MediaPipelineId: {},
                MediaPipelineArn: {},
                SourceType: {},
                SourceArn: {
                    shape: "S3"
                },
                Status: {},
                SinkType: {},
                SinkArn: {
                    shape: "S3"
                },
                CreatedTimestamp: {
                    shape: "S10"
                },
                UpdatedTimestamp: {
                    shape: "S10"
                },
                ChimeSdkMeetingConfiguration: {
                    shape: "S6"
                }
            }
        },
        S10: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S12: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "MediaCapturePipelineSourceConfiguration" ],
                members: {
                    Type: {},
                    MediaCapturePipelineSourceConfiguration: {
                        type: "structure",
                        required: [ "MediaPipelineArn", "ChimeSdkMeetingConfiguration" ],
                        members: {
                            MediaPipelineArn: {
                                shape: "S3"
                            },
                            ChimeSdkMeetingConfiguration: {
                                type: "structure",
                                required: [ "ArtifactsConfiguration" ],
                                members: {
                                    ArtifactsConfiguration: {
                                        type: "structure",
                                        required: [ "Audio", "Video", "Content", "DataChannel", "TranscriptionMessages", "MeetingEvents", "CompositedVideo" ],
                                        members: {
                                            Audio: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            Video: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            Content: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            DataChannel: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            TranscriptionMessages: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            MeetingEvents: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            },
                                            CompositedVideo: {
                                                type: "structure",
                                                required: [ "State" ],
                                                members: {
                                                    State: {}
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        S1h: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Type", "S3BucketSinkConfiguration" ],
                members: {
                    Type: {},
                    S3BucketSinkConfiguration: {
                        type: "structure",
                        required: [ "Destination" ],
                        members: {
                            Destination: {
                                shape: "S3"
                            }
                        }
                    }
                }
            }
        },
        S1m: {
            type: "structure",
            members: {
                MediaPipelineId: {},
                MediaPipelineArn: {},
                Sources: {
                    shape: "S12"
                },
                Sinks: {
                    shape: "S1h"
                },
                Status: {},
                CreatedTimestamp: {
                    shape: "S10"
                },
                UpdatedTimestamp: {
                    shape: "S10"
                }
            }
        },
        S1o: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SourceType", "ChimeSdkMeetingLiveConnectorConfiguration" ],
                members: {
                    SourceType: {},
                    ChimeSdkMeetingLiveConnectorConfiguration: {
                        type: "structure",
                        required: [ "Arn", "MuxType" ],
                        members: {
                            Arn: {
                                shape: "S3"
                            },
                            MuxType: {},
                            CompositedVideo: {
                                shape: "Sl"
                            },
                            SourceConfiguration: {
                                shape: "S7"
                            }
                        }
                    }
                }
            }
        },
        S1t: {
            type: "list",
            member: {
                type: "structure",
                required: [ "SinkType", "RTMPConfiguration" ],
                members: {
                    SinkType: {},
                    RTMPConfiguration: {
                        type: "structure",
                        required: [ "Url" ],
                        members: {
                            Url: {
                                type: "string",
                                sensitive: true
                            },
                            AudioChannels: {},
                            AudioSampleRate: {}
                        }
                    }
                }
            }
        },
        S21: {
            type: "structure",
            members: {
                Sources: {
                    shape: "S1o"
                },
                Sinks: {
                    shape: "S1t"
                },
                MediaPipelineId: {},
                MediaPipelineArn: {},
                Status: {},
                CreatedTimestamp: {
                    shape: "S10"
                },
                UpdatedTimestamp: {
                    shape: "S10"
                }
            }
        }
    },
    paginators: {
        ListMediaCapturePipelines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListMediaPipelines: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["emrserverless"] = {};

AWS.EMRServerless = AWS.Service.defineService("emrserverless", [ "2021-07-13" ]);

AWS.apiLoader.services["emrserverless"]["2021-07-13"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-07-13",
        endpointPrefix: "emr-serverless",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "EMR Serverless",
        serviceId: "EMR Serverless",
        signatureVersion: "v4",
        signingName: "emr-serverless",
        uid: "emr-serverless-2021-07-13"
    },
    operations: {
        CancelJobRun: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/jobruns/{jobRunId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "jobRunId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    jobRunId: {
                        location: "uri",
                        locationName: "jobRunId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "jobRunId" ],
                members: {
                    applicationId: {},
                    jobRunId: {}
                }
            },
            idempotent: true
        },
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "releaseLabel", "type", "clientToken" ],
                members: {
                    name: {},
                    releaseLabel: {},
                    type: {},
                    clientToken: {
                        idempotencyToken: true
                    },
                    initialCapacity: {
                        shape: "Sa"
                    },
                    maximumCapacity: {
                        shape: "Si"
                    },
                    tags: {
                        shape: "Sj"
                    },
                    autoStartConfiguration: {
                        shape: "Sm"
                    },
                    autoStopConfiguration: {
                        shape: "So"
                    },
                    networkConfiguration: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "arn" ],
                members: {
                    applicationId: {},
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        shape: "S11"
                    }
                }
            }
        },
        GetDashboardForJobRun: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/jobruns/{jobRunId}/dashboard",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "jobRunId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    jobRunId: {
                        location: "uri",
                        locationName: "jobRunId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    url: {}
                }
            }
        },
        GetJobRun: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/jobruns/{jobRunId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "jobRunId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    jobRunId: {
                        location: "uri",
                        locationName: "jobRunId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobRun" ],
                members: {
                    jobRun: {
                        type: "structure",
                        required: [ "applicationId", "jobRunId", "arn", "createdBy", "createdAt", "updatedAt", "executionRole", "state", "stateDetails", "releaseLabel", "jobDriver" ],
                        members: {
                            applicationId: {},
                            jobRunId: {},
                            name: {},
                            arn: {},
                            createdBy: {},
                            createdAt: {
                                type: "timestamp"
                            },
                            updatedAt: {
                                type: "timestamp"
                            },
                            executionRole: {},
                            state: {},
                            stateDetails: {},
                            releaseLabel: {},
                            configurationOverrides: {
                                shape: "S1f"
                            },
                            jobDriver: {
                                shape: "S1p"
                            },
                            tags: {
                                shape: "Sj"
                            },
                            totalResourceUtilization: {
                                type: "structure",
                                members: {
                                    vCPUHour: {
                                        type: "double"
                                    },
                                    memoryGBHour: {
                                        type: "double"
                                    },
                                    storageGBHour: {
                                        type: "double"
                                    }
                                }
                            },
                            networkConfiguration: {
                                shape: "Sq"
                            },
                            totalExecutionDurationSeconds: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applications" ],
                members: {
                    applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "releaseLabel", "type", "state", "createdAt", "updatedAt" ],
                            members: {
                                id: {},
                                name: {},
                                arn: {},
                                releaseLabel: {},
                                type: {},
                                state: {},
                                stateDetails: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListJobRuns: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/jobruns",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    createdAtAfter: {
                        location: "querystring",
                        locationName: "createdAtAfter",
                        type: "timestamp"
                    },
                    createdAtBefore: {
                        location: "querystring",
                        locationName: "createdAtBefore",
                        type: "timestamp"
                    },
                    states: {
                        location: "querystring",
                        locationName: "states",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "jobRuns" ],
                members: {
                    jobRuns: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationId", "id", "arn", "createdBy", "createdAt", "updatedAt", "executionRole", "state", "stateDetails", "releaseLabel" ],
                            members: {
                                applicationId: {},
                                id: {},
                                name: {},
                                arn: {},
                                createdBy: {},
                                createdAt: {
                                    type: "timestamp"
                                },
                                updatedAt: {
                                    type: "timestamp"
                                },
                                executionRole: {},
                                state: {},
                                stateDetails: {},
                                releaseLabel: {},
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sj"
                    }
                }
            }
        },
        StartApplication: {
            http: {
                requestUri: "/applications/{applicationId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        StartJobRun: {
            http: {
                requestUri: "/applications/{applicationId}/jobruns",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "clientToken", "executionRoleArn" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    executionRoleArn: {},
                    jobDriver: {
                        shape: "S1p"
                    },
                    configurationOverrides: {
                        shape: "S1f"
                    },
                    tags: {
                        shape: "Sj"
                    },
                    executionTimeoutMinutes: {
                        type: "long"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "jobRunId", "arn" ],
                members: {
                    applicationId: {},
                    jobRunId: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        StopApplication: {
            http: {
                requestUri: "/applications/{applicationId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sj"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "clientToken" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    initialCapacity: {
                        shape: "Sa"
                    },
                    maximumCapacity: {
                        shape: "Si"
                    },
                    autoStartConfiguration: {
                        shape: "Sm"
                    },
                    autoStopConfiguration: {
                        shape: "So"
                    },
                    networkConfiguration: {
                        shape: "Sq"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "application" ],
                members: {
                    application: {
                        shape: "S11"
                    }
                }
            }
        }
    },
    shapes: {
        Sa: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                required: [ "workerCount" ],
                members: {
                    workerCount: {
                        type: "long"
                    },
                    workerConfiguration: {
                        type: "structure",
                        required: [ "cpu", "memory" ],
                        members: {
                            cpu: {},
                            memory: {},
                            disk: {}
                        }
                    }
                }
            }
        },
        Si: {
            type: "structure",
            required: [ "cpu", "memory" ],
            members: {
                cpu: {},
                memory: {},
                disk: {}
            }
        },
        Sj: {
            type: "map",
            key: {},
            value: {}
        },
        Sm: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                }
            }
        },
        So: {
            type: "structure",
            members: {
                enabled: {
                    type: "boolean"
                },
                idleTimeoutMinutes: {
                    type: "integer"
                }
            }
        },
        Sq: {
            type: "structure",
            members: {
                subnetIds: {
                    type: "list",
                    member: {}
                },
                securityGroupIds: {
                    type: "list",
                    member: {}
                }
            }
        },
        S11: {
            type: "structure",
            required: [ "applicationId", "arn", "releaseLabel", "type", "state", "createdAt", "updatedAt" ],
            members: {
                applicationId: {},
                name: {},
                arn: {},
                releaseLabel: {},
                type: {},
                state: {},
                stateDetails: {},
                initialCapacity: {
                    shape: "Sa"
                },
                maximumCapacity: {
                    shape: "Si"
                },
                createdAt: {
                    type: "timestamp"
                },
                updatedAt: {
                    type: "timestamp"
                },
                tags: {
                    shape: "Sj"
                },
                autoStartConfiguration: {
                    shape: "Sm"
                },
                autoStopConfiguration: {
                    shape: "So"
                },
                networkConfiguration: {
                    shape: "Sq"
                }
            }
        },
        S1f: {
            type: "structure",
            members: {
                applicationConfiguration: {
                    shape: "S1g"
                },
                monitoringConfiguration: {
                    type: "structure",
                    members: {
                        s3MonitoringConfiguration: {
                            type: "structure",
                            members: {
                                logUri: {},
                                encryptionKeyArn: {}
                            }
                        },
                        managedPersistenceMonitoringConfiguration: {
                            type: "structure",
                            members: {
                                enabled: {
                                    type: "boolean"
                                },
                                encryptionKeyArn: {}
                            }
                        }
                    }
                }
            }
        },
        S1g: {
            type: "list",
            member: {
                type: "structure",
                required: [ "classification" ],
                members: {
                    classification: {},
                    properties: {
                        type: "map",
                        key: {},
                        value: {},
                        sensitive: true
                    },
                    configurations: {
                        shape: "S1g"
                    }
                }
            }
        },
        S1p: {
            type: "structure",
            members: {
                sparkSubmit: {
                    type: "structure",
                    required: [ "entryPoint" ],
                    members: {
                        entryPoint: {
                            type: "string",
                            sensitive: true
                        },
                        entryPointArguments: {
                            type: "list",
                            member: {
                                type: "string",
                                sensitive: true
                            }
                        },
                        sparkSubmitParameters: {
                            type: "string",
                            sensitive: true
                        }
                    }
                },
                hive: {
                    type: "structure",
                    required: [ "query" ],
                    members: {
                        query: {
                            type: "string",
                            sensitive: true
                        },
                        initQueryFile: {
                            type: "string",
                            sensitive: true
                        },
                        parameters: {
                            type: "string",
                            sensitive: true
                        }
                    }
                }
            },
            union: true
        }
    },
    paginators: {
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applications"
        },
        ListJobRuns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "jobRuns"
        }
    }
};

AWS.apiLoader.services["m2"] = {};

AWS.M2 = AWS.Service.defineService("m2", [ "2021-04-28" ]);

AWS.apiLoader.services["m2"]["2021-04-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-04-28",
        endpointPrefix: "m2",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWSMainframeModernization",
        serviceId: "m2",
        signatureVersion: "v4",
        signingName: "m2",
        uid: "m2-2021-04-28"
    },
    operations: {
        CancelBatchJobExecution: {
            http: {
                requestUri: "/applications/{applicationId}/batch-job-executions/{executionId}/cancel",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "executionId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    executionId: {
                        location: "uri",
                        locationName: "executionId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        CreateApplication: {
            http: {
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "definition", "engineType", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    definition: {
                        shape: "S6"
                    },
                    description: {},
                    engineType: {},
                    name: {},
                    tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationArn", "applicationId", "applicationVersion" ],
                members: {
                    applicationArn: {},
                    applicationId: {},
                    applicationVersion: {
                        type: "integer"
                    }
                }
            },
            idempotent: true
        },
        CreateDataSetImportTask: {
            http: {
                requestUri: "/applications/{applicationId}/dataset-import-task",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "importConfig" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    importConfig: {
                        type: "structure",
                        members: {
                            dataSets: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    required: [ "dataSet", "externalLocation" ],
                                    members: {
                                        dataSet: {
                                            type: "structure",
                                            required: [ "datasetName", "datasetOrg", "recordLength" ],
                                            members: {
                                                datasetName: {},
                                                datasetOrg: {
                                                    type: "structure",
                                                    members: {
                                                        gdg: {
                                                            type: "structure",
                                                            members: {
                                                                limit: {
                                                                    type: "integer"
                                                                },
                                                                rollDisposition: {}
                                                            }
                                                        },
                                                        vsam: {
                                                            type: "structure",
                                                            required: [ "format" ],
                                                            members: {
                                                                alternateKeys: {
                                                                    shape: "Sr"
                                                                },
                                                                compressed: {
                                                                    type: "boolean"
                                                                },
                                                                encoding: {},
                                                                format: {},
                                                                primaryKey: {
                                                                    shape: "Su"
                                                                }
                                                            }
                                                        }
                                                    },
                                                    union: true
                                                },
                                                recordLength: {
                                                    type: "structure",
                                                    required: [ "max", "min" ],
                                                    members: {
                                                        max: {
                                                            type: "integer"
                                                        },
                                                        min: {
                                                            type: "integer"
                                                        }
                                                    }
                                                },
                                                relativePath: {},
                                                storageType: {}
                                            }
                                        },
                                        externalLocation: {
                                            type: "structure",
                                            members: {
                                                s3Location: {}
                                            },
                                            union: true
                                        }
                                    }
                                }
                            },
                            s3Location: {}
                        },
                        union: true
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "taskId" ],
                members: {
                    taskId: {}
                }
            },
            idempotent: true
        },
        CreateDeployment: {
            http: {
                requestUri: "/applications/{applicationId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "applicationVersion", "environmentId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    applicationVersion: {
                        type: "integer"
                    },
                    clientToken: {
                        idempotencyToken: true
                    },
                    environmentId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "deploymentId" ],
                members: {
                    deploymentId: {}
                }
            },
            idempotent: true
        },
        CreateEnvironment: {
            http: {
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "engineType", "instanceType", "name" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    description: {},
                    engineType: {},
                    engineVersion: {},
                    highAvailabilityConfig: {
                        shape: "S12"
                    },
                    instanceType: {},
                    name: {},
                    preferredMaintenanceWindow: {},
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    securityGroupIds: {
                        shape: "S16"
                    },
                    storageConfigurations: {
                        shape: "S17"
                    },
                    subnetIds: {
                        shape: "S16"
                    },
                    tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {}
                }
            },
            idempotent: true
        },
        DeleteApplication: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteApplicationFromEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/applications/{applicationId}/environment/{environmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "environmentId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteEnvironment: {
            http: {
                method: "DELETE",
                requestUri: "/environments/{environmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetApplication: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationArn", "applicationId", "creationTime", "engineType", "latestVersion", "name", "status" ],
                members: {
                    applicationArn: {},
                    applicationId: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    deployedVersion: {
                        type: "structure",
                        required: [ "applicationVersion", "status" ],
                        members: {
                            applicationVersion: {
                                type: "integer"
                            },
                            status: {},
                            statusReason: {}
                        }
                    },
                    description: {},
                    engineType: {},
                    environmentId: {},
                    lastStartTime: {
                        type: "timestamp"
                    },
                    latestVersion: {
                        shape: "S1o"
                    },
                    listenerArns: {
                        shape: "S1q"
                    },
                    listenerPorts: {
                        type: "list",
                        member: {
                            type: "integer"
                        }
                    },
                    loadBalancerDnsName: {},
                    logGroups: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "logGroupName", "logType" ],
                            members: {
                                logGroupName: {},
                                logType: {}
                            }
                        }
                    },
                    name: {},
                    status: {},
                    statusReason: {},
                    tags: {
                        shape: "Sc"
                    },
                    targetGroupArns: {
                        shape: "S1q"
                    }
                }
            }
        },
        GetApplicationVersion: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/versions/{applicationVersion}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "applicationVersion" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    applicationVersion: {
                        location: "uri",
                        locationName: "applicationVersion",
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationVersion", "creationTime", "definitionContent", "name", "status" ],
                members: {
                    applicationVersion: {
                        type: "integer"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    definitionContent: {},
                    description: {},
                    name: {},
                    status: {},
                    statusReason: {}
                }
            }
        },
        GetBatchJobExecution: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/batch-job-executions/{executionId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "executionId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    executionId: {
                        location: "uri",
                        locationName: "executionId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "executionId", "startTime", "status" ],
                members: {
                    applicationId: {},
                    endTime: {
                        type: "timestamp"
                    },
                    executionId: {},
                    jobId: {},
                    jobName: {},
                    jobType: {},
                    jobUser: {},
                    startTime: {
                        type: "timestamp"
                    },
                    status: {},
                    statusReason: {}
                }
            }
        },
        GetDataSetDetails: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/datasets/{dataSetName}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "dataSetName" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    dataSetName: {
                        location: "uri",
                        locationName: "dataSetName"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dataSetName" ],
                members: {
                    blocksize: {
                        type: "integer"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    dataSetName: {},
                    dataSetOrg: {
                        type: "structure",
                        members: {
                            gdg: {
                                type: "structure",
                                members: {
                                    limit: {
                                        type: "integer"
                                    },
                                    rollDisposition: {}
                                }
                            },
                            vsam: {
                                type: "structure",
                                members: {
                                    alternateKeys: {
                                        shape: "Sr"
                                    },
                                    cacheAtStartup: {
                                        type: "boolean"
                                    },
                                    compressed: {
                                        type: "boolean"
                                    },
                                    encoding: {},
                                    primaryKey: {
                                        shape: "Su"
                                    },
                                    recordFormat: {}
                                }
                            }
                        },
                        union: true
                    },
                    lastReferencedTime: {
                        type: "timestamp"
                    },
                    lastUpdatedTime: {
                        type: "timestamp"
                    },
                    location: {},
                    recordLength: {
                        type: "integer"
                    }
                }
            }
        },
        GetDataSetImportTask: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/dataset-import-tasks/{taskId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "taskId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    taskId: {
                        location: "uri",
                        locationName: "taskId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "status", "taskId" ],
                members: {
                    status: {},
                    summary: {
                        shape: "S2b"
                    },
                    taskId: {}
                }
            }
        },
        GetDeployment: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/deployments/{deploymentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "deploymentId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    deploymentId: {
                        location: "uri",
                        locationName: "deploymentId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationId", "applicationVersion", "creationTime", "deploymentId", "environmentId", "status" ],
                members: {
                    applicationId: {},
                    applicationVersion: {
                        type: "integer"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    deploymentId: {},
                    environmentId: {},
                    status: {},
                    statusReason: {}
                }
            }
        },
        GetEnvironment: {
            http: {
                method: "GET",
                requestUri: "/environments/{environmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "creationTime", "engineType", "engineVersion", "environmentArn", "environmentId", "instanceType", "name", "securityGroupIds", "status", "subnetIds", "vpcId" ],
                members: {
                    actualCapacity: {
                        type: "integer"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    description: {},
                    engineType: {},
                    engineVersion: {},
                    environmentArn: {},
                    environmentId: {},
                    highAvailabilityConfig: {
                        shape: "S12"
                    },
                    instanceType: {},
                    loadBalancerArn: {},
                    name: {},
                    pendingMaintenance: {
                        type: "structure",
                        members: {
                            engineVersion: {},
                            schedule: {
                                type: "structure",
                                members: {
                                    endTime: {
                                        type: "timestamp"
                                    },
                                    startTime: {
                                        type: "timestamp"
                                    }
                                }
                            }
                        }
                    },
                    preferredMaintenanceWindow: {},
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    securityGroupIds: {
                        shape: "S16"
                    },
                    status: {},
                    statusReason: {},
                    storageConfigurations: {
                        shape: "S17"
                    },
                    subnetIds: {
                        shape: "S16"
                    },
                    tags: {
                        shape: "Sc"
                    },
                    vpcId: {}
                }
            }
        },
        ListApplicationVersions: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applicationVersions" ],
                members: {
                    applicationVersions: {
                        type: "list",
                        member: {
                            shape: "S1o"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListApplications: {
            http: {
                method: "GET",
                requestUri: "/applications",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    environmentId: {
                        location: "querystring",
                        locationName: "environmentId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    names: {
                        shape: "S2p",
                        location: "querystring",
                        locationName: "names"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "applications" ],
                members: {
                    applications: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationArn", "applicationId", "applicationVersion", "creationTime", "engineType", "name", "status" ],
                            members: {
                                applicationArn: {},
                                applicationId: {},
                                applicationVersion: {
                                    type: "integer"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                deploymentStatus: {},
                                description: {},
                                engineType: {},
                                environmentId: {},
                                lastStartTime: {
                                    type: "timestamp"
                                },
                                name: {},
                                status: {},
                                versionStatus: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBatchJobDefinitions: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/batch-job-definitions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    prefix: {
                        location: "querystring",
                        locationName: "prefix"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "batchJobDefinitions" ],
                members: {
                    batchJobDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                fileBatchJobDefinition: {
                                    type: "structure",
                                    required: [ "fileName" ],
                                    members: {
                                        fileName: {},
                                        folderPath: {}
                                    }
                                },
                                scriptBatchJobDefinition: {
                                    type: "structure",
                                    required: [ "scriptName" ],
                                    members: {
                                        scriptName: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListBatchJobExecutions: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/batch-job-executions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    executionIds: {
                        location: "querystring",
                        locationName: "executionIds",
                        type: "list",
                        member: {}
                    },
                    jobName: {
                        location: "querystring",
                        locationName: "jobName"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    startedAfter: {
                        location: "querystring",
                        locationName: "startedAfter",
                        type: "timestamp"
                    },
                    startedBefore: {
                        location: "querystring",
                        locationName: "startedBefore",
                        type: "timestamp"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "batchJobExecutions" ],
                members: {
                    batchJobExecutions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationId", "executionId", "startTime", "status" ],
                            members: {
                                applicationId: {},
                                endTime: {
                                    type: "timestamp"
                                },
                                executionId: {},
                                jobId: {},
                                jobName: {},
                                jobType: {},
                                startTime: {
                                    type: "timestamp"
                                },
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSetImportHistory: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/dataset-import-tasks",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dataSetImportTasks" ],
                members: {
                    dataSetImportTasks: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "status", "summary", "taskId" ],
                            members: {
                                status: {},
                                summary: {
                                    shape: "S2b"
                                },
                                taskId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDataSets: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/datasets",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    prefix: {
                        location: "querystring",
                        locationName: "prefix"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "dataSets" ],
                members: {
                    dataSets: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "dataSetName" ],
                            members: {
                                creationTime: {
                                    type: "timestamp"
                                },
                                dataSetName: {},
                                dataSetOrg: {},
                                format: {},
                                lastReferencedTime: {
                                    type: "timestamp"
                                },
                                lastUpdatedTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDeployments: {
            http: {
                method: "GET",
                requestUri: "/applications/{applicationId}/deployments",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "deployments" ],
                members: {
                    deployments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "applicationId", "applicationVersion", "creationTime", "deploymentId", "environmentId", "status" ],
                            members: {
                                applicationId: {},
                                applicationVersion: {
                                    type: "integer"
                                },
                                creationTime: {
                                    type: "timestamp"
                                },
                                deploymentId: {},
                                environmentId: {},
                                status: {},
                                statusReason: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEngineVersions: {
            http: {
                method: "GET",
                requestUri: "/engine-versions",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    engineType: {
                        location: "querystring",
                        locationName: "engineType"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "engineVersions" ],
                members: {
                    engineVersions: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "engineType", "engineVersion" ],
                            members: {
                                engineType: {},
                                engineVersion: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListEnvironments: {
            http: {
                method: "GET",
                requestUri: "/environments",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    engineType: {
                        location: "querystring",
                        locationName: "engineType"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    names: {
                        shape: "S2p",
                        location: "querystring",
                        locationName: "names"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "environments" ],
                members: {
                    environments: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "creationTime", "engineType", "engineVersion", "environmentArn", "environmentId", "instanceType", "name", "status" ],
                            members: {
                                creationTime: {
                                    type: "timestamp"
                                },
                                engineType: {},
                                engineVersion: {},
                                environmentArn: {},
                                environmentId: {},
                                instanceType: {},
                                name: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "tags" ],
                members: {
                    tags: {
                        shape: "Sc"
                    }
                }
            }
        },
        StartApplication: {
            http: {
                requestUri: "/applications/{applicationId}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        StartBatchJob: {
            http: {
                requestUri: "/applications/{applicationId}/batch-job",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "batchJobIdentifier" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    batchJobIdentifier: {
                        type: "structure",
                        members: {
                            fileBatchJobIdentifier: {
                                type: "structure",
                                required: [ "fileName" ],
                                members: {
                                    fileName: {},
                                    folderPath: {}
                                }
                            },
                            scriptBatchJobIdentifier: {
                                type: "structure",
                                required: [ "scriptName" ],
                                members: {
                                    scriptName: {}
                                }
                            }
                        },
                        union: true
                    },
                    jobParams: {
                        type: "map",
                        key: {},
                        value: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "executionId" ],
                members: {
                    executionId: {}
                }
            }
        },
        StopApplication: {
            http: {
                requestUri: "/applications/{applicationId}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    forceStop: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Sc"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateApplication: {
            http: {
                method: "PATCH",
                requestUri: "/applications/{applicationId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "applicationId", "currentApplicationVersion" ],
                members: {
                    applicationId: {
                        location: "uri",
                        locationName: "applicationId"
                    },
                    currentApplicationVersion: {
                        type: "integer"
                    },
                    definition: {
                        shape: "S6"
                    },
                    description: {}
                }
            },
            output: {
                type: "structure",
                required: [ "applicationVersion" ],
                members: {
                    applicationVersion: {
                        type: "integer"
                    }
                }
            }
        },
        UpdateEnvironment: {
            http: {
                method: "PATCH",
                requestUri: "/environments/{environmentId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    applyDuringMaintenanceWindow: {
                        type: "boolean"
                    },
                    desiredCapacity: {
                        type: "integer"
                    },
                    engineVersion: {},
                    environmentId: {
                        location: "uri",
                        locationName: "environmentId"
                    },
                    instanceType: {},
                    preferredMaintenanceWindow: {}
                }
            },
            output: {
                type: "structure",
                required: [ "environmentId" ],
                members: {
                    environmentId: {}
                }
            }
        }
    },
    shapes: {
        S6: {
            type: "structure",
            members: {
                content: {},
                s3Location: {}
            },
            union: true
        },
        Sc: {
            type: "map",
            key: {},
            value: {}
        },
        Sr: {
            type: "list",
            member: {
                type: "structure",
                required: [ "length", "offset" ],
                members: {
                    allowDuplicates: {
                        type: "boolean"
                    },
                    length: {
                        type: "integer"
                    },
                    name: {},
                    offset: {
                        type: "integer"
                    }
                }
            }
        },
        Su: {
            type: "structure",
            required: [ "length", "offset" ],
            members: {
                length: {
                    type: "integer"
                },
                name: {},
                offset: {
                    type: "integer"
                }
            }
        },
        S12: {
            type: "structure",
            required: [ "desiredCapacity" ],
            members: {
                desiredCapacity: {
                    type: "integer"
                }
            }
        },
        S16: {
            type: "list",
            member: {}
        },
        S17: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    efs: {
                        type: "structure",
                        required: [ "fileSystemId", "mountPoint" ],
                        members: {
                            fileSystemId: {
                                locationName: "file-system-id"
                            },
                            mountPoint: {
                                locationName: "mount-point"
                            }
                        }
                    },
                    fsx: {
                        type: "structure",
                        required: [ "fileSystemId", "mountPoint" ],
                        members: {
                            fileSystemId: {
                                locationName: "file-system-id"
                            },
                            mountPoint: {
                                locationName: "mount-point"
                            }
                        }
                    }
                },
                union: true
            }
        },
        S1o: {
            type: "structure",
            required: [ "applicationVersion", "creationTime", "status" ],
            members: {
                applicationVersion: {
                    type: "integer"
                },
                creationTime: {
                    type: "timestamp"
                },
                status: {},
                statusReason: {}
            }
        },
        S1q: {
            type: "list",
            member: {}
        },
        S2b: {
            type: "structure",
            required: [ "failed", "inProgress", "pending", "succeeded", "total" ],
            members: {
                failed: {
                    type: "integer"
                },
                inProgress: {
                    type: "integer"
                },
                pending: {
                    type: "integer"
                },
                succeeded: {
                    type: "integer"
                },
                total: {
                    type: "integer"
                }
            }
        },
        S2p: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        ListApplicationVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applicationVersions"
        },
        ListApplications: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "applications"
        },
        ListBatchJobDefinitions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "batchJobDefinitions"
        },
        ListBatchJobExecutions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "batchJobExecutions"
        },
        ListDataSetImportHistory: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataSetImportTasks"
        },
        ListDataSets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "dataSets"
        },
        ListDeployments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deployments"
        },
        ListEngineVersions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "engineVersions"
        },
        ListEnvironments: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "environments"
        }
    }
};

AWS.apiLoader.services["connectcampaigns"] = {};

AWS.ConnectCampaigns = AWS.Service.defineService("connectcampaigns", [ "2021-01-30" ]);

AWS.apiLoader.services["connectcampaigns"]["2021-01-30"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-01-30",
        endpointPrefix: "connect-campaigns",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AmazonConnectCampaignService",
        serviceId: "ConnectCampaigns",
        signatureVersion: "v4",
        signingName: "connect-campaigns",
        uid: "connectcampaigns-2021-01-30"
    },
    operations: {
        CreateCampaign: {
            http: {
                method: "PUT",
                requestUri: "/campaigns",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId", "dialerConfig", "name", "outboundCallConfig" ],
                members: {
                    connectInstanceId: {},
                    dialerConfig: {
                        shape: "S3"
                    },
                    name: {},
                    outboundCallConfig: {
                        shape: "S8"
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    id: {},
                    tags: {
                        shape: "Se"
                    }
                }
            },
            idempotent: true
        },
        DeleteCampaign: {
            http: {
                method: "DELETE",
                requestUri: "/campaigns/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        },
        DeleteConnectInstanceConfig: {
            http: {
                method: "DELETE",
                requestUri: "/connect-instance/{connectInstanceId}/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    }
                }
            },
            idempotent: true
        },
        DeleteInstanceOnboardingJob: {
            http: {
                method: "DELETE",
                requestUri: "/connect-instance/{connectInstanceId}/onboarding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    }
                }
            },
            idempotent: true
        },
        DescribeCampaign: {
            http: {
                method: "GET",
                requestUri: "/campaigns/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    campaign: {
                        type: "structure",
                        required: [ "arn", "connectInstanceId", "dialerConfig", "id", "name", "outboundCallConfig" ],
                        members: {
                            arn: {},
                            connectInstanceId: {},
                            dialerConfig: {
                                shape: "S3"
                            },
                            id: {},
                            name: {},
                            outboundCallConfig: {
                                shape: "S8"
                            },
                            tags: {
                                shape: "Se"
                            }
                        }
                    }
                }
            }
        },
        GetCampaignState: {
            http: {
                method: "GET",
                requestUri: "/campaigns/{id}/state",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    state: {}
                }
            }
        },
        GetCampaignStateBatch: {
            http: {
                requestUri: "/campaigns-state",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "campaignIds" ],
                members: {
                    campaignIds: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    failedRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                campaignId: {},
                                failureCode: {}
                            }
                        }
                    },
                    successfulRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                campaignId: {},
                                state: {}
                            }
                        }
                    }
                }
            }
        },
        GetConnectInstanceConfig: {
            http: {
                method: "GET",
                requestUri: "/connect-instance/{connectInstanceId}/config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectInstanceConfig: {
                        type: "structure",
                        required: [ "connectInstanceId", "encryptionConfig", "serviceLinkedRoleArn" ],
                        members: {
                            connectInstanceId: {},
                            encryptionConfig: {
                                shape: "S14"
                            },
                            serviceLinkedRoleArn: {}
                        }
                    }
                }
            }
        },
        GetInstanceOnboardingJobStatus: {
            http: {
                method: "GET",
                requestUri: "/connect-instance/{connectInstanceId}/onboarding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectInstanceOnboardingJobStatus: {
                        shape: "S1b"
                    }
                }
            }
        },
        ListCampaigns: {
            http: {
                requestUri: "/campaigns-summary",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "structure",
                        members: {
                            instanceIdFilter: {
                                type: "structure",
                                required: [ "operator", "value" ],
                                members: {
                                    operator: {},
                                    value: {}
                                }
                            }
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    campaignSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "arn", "connectInstanceId", "id", "name" ],
                            members: {
                                arn: {},
                                connectInstanceId: {},
                                id: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Se"
                    }
                }
            },
            idempotent: true
        },
        PauseCampaign: {
            http: {
                requestUri: "/campaigns/{id}/pause",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            }
        },
        PutDialRequestBatch: {
            http: {
                method: "PUT",
                requestUri: "/campaigns/{id}/dial-requests",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dialRequests", "id" ],
                members: {
                    dialRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "attributes", "clientToken", "expirationTime", "phoneNumber" ],
                            members: {
                                attributes: {
                                    type: "map",
                                    key: {},
                                    value: {},
                                    sensitive: true
                                },
                                clientToken: {},
                                expirationTime: {
                                    type: "timestamp",
                                    timestampFormat: "iso8601"
                                },
                                phoneNumber: {
                                    type: "string",
                                    sensitive: true
                                }
                            }
                        }
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    failedRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                clientToken: {},
                                failureCode: {},
                                id: {}
                            }
                        }
                    },
                    successfulRequests: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                clientToken: {},
                                id: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        ResumeCampaign: {
            http: {
                requestUri: "/campaigns/{id}/resume",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            }
        },
        StartCampaign: {
            http: {
                requestUri: "/campaigns/{id}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            }
        },
        StartInstanceOnboardingJob: {
            http: {
                method: "PUT",
                requestUri: "/connect-instance/{connectInstanceId}/onboarding",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "connectInstanceId", "encryptionConfig" ],
                members: {
                    connectInstanceId: {
                        location: "uri",
                        locationName: "connectInstanceId"
                    },
                    encryptionConfig: {
                        shape: "S14"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    connectInstanceOnboardingJobStatus: {
                        shape: "S1b"
                    }
                }
            },
            idempotent: true
        },
        StopCampaign: {
            http: {
                requestUri: "/campaigns/{id}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn", "tags" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    tags: {
                        shape: "Se"
                    }
                }
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn", "tagKeys" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            idempotent: true
        },
        UpdateCampaignDialerConfig: {
            http: {
                requestUri: "/campaigns/{id}/dialer-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "dialerConfig", "id" ],
                members: {
                    dialerConfig: {
                        shape: "S3"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        },
        UpdateCampaignName: {
            http: {
                requestUri: "/campaigns/{id}/name",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "name" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {}
                }
            },
            idempotent: true
        },
        UpdateCampaignOutboundCallConfig: {
            http: {
                requestUri: "/campaigns/{id}/outbound-call-config",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    answerMachineDetectionConfig: {
                        shape: "S9"
                    },
                    connectContactFlowId: {},
                    connectSourcePhoneNumber: {},
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                predictiveDialerConfig: {
                    type: "structure",
                    required: [ "bandwidthAllocation" ],
                    members: {
                        bandwidthAllocation: {
                            type: "double"
                        }
                    }
                },
                progressiveDialerConfig: {
                    type: "structure",
                    required: [ "bandwidthAllocation" ],
                    members: {
                        bandwidthAllocation: {
                            type: "double"
                        }
                    }
                }
            },
            union: true
        },
        S8: {
            type: "structure",
            required: [ "connectContactFlowId", "connectQueueId" ],
            members: {
                answerMachineDetectionConfig: {
                    shape: "S9"
                },
                connectContactFlowId: {},
                connectQueueId: {},
                connectSourcePhoneNumber: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "enableAnswerMachineDetection" ],
            members: {
                enableAnswerMachineDetection: {
                    type: "boolean"
                }
            }
        },
        Se: {
            type: "map",
            key: {},
            value: {}
        },
        S14: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                },
                encryptionType: {},
                keyArn: {}
            }
        },
        S1b: {
            type: "structure",
            required: [ "connectInstanceId", "status" ],
            members: {
                connectInstanceId: {},
                failureCode: {},
                status: {}
            }
        }
    },
    paginators: {
        ListCampaigns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "campaignSummaryList"
        }
    }
};

AWS.apiLoader.services["redshiftserverless"] = {};

AWS.RedshiftServerless = AWS.Service.defineService("redshiftserverless", [ "2021-04-21" ]);

AWS.apiLoader.services["redshiftserverless"]["2021-04-21"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-04-21",
        endpointPrefix: "redshift-serverless",
        jsonVersion: "1.1",
        protocol: "json",
        serviceFullName: "Redshift Serverless",
        serviceId: "Redshift Serverless",
        signatureVersion: "v4",
        signingName: "redshift-serverless",
        targetPrefix: "RedshiftServerless",
        uid: "redshift-serverless-2021-04-21"
    },
    operations: {
        ConvertRecoveryPointToSnapshot: {
            input: {
                type: "structure",
                required: [ "recoveryPointId", "snapshotName" ],
                members: {
                    recoveryPointId: {},
                    retentionPeriod: {
                        type: "integer"
                    },
                    snapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S5"
                    }
                }
            }
        },
        CreateEndpointAccess: {
            input: {
                type: "structure",
                required: [ "endpointName", "subnetIds", "workgroupName" ],
                members: {
                    endpointName: {},
                    subnetIds: {
                        shape: "Sd"
                    },
                    vpcSecurityGroupIds: {
                        shape: "Sf"
                    },
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "Si"
                    }
                }
            },
            idempotent: true
        },
        CreateNamespace: {
            input: {
                type: "structure",
                required: [ "namespaceName" ],
                members: {
                    adminUserPassword: {
                        shape: "Sp"
                    },
                    adminUsername: {
                        shape: "Sq"
                    },
                    dbName: {},
                    defaultIamRoleArn: {},
                    iamRoles: {
                        shape: "Sr"
                    },
                    kmsKeyId: {},
                    logExports: {
                        shape: "St"
                    },
                    namespaceName: {},
                    tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    namespace: {
                        shape: "S11"
                    }
                }
            },
            idempotent: true
        },
        CreateSnapshot: {
            input: {
                type: "structure",
                required: [ "namespaceName", "snapshotName" ],
                members: {
                    namespaceName: {},
                    retentionPeriod: {
                        type: "integer"
                    },
                    snapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        CreateUsageLimit: {
            input: {
                type: "structure",
                required: [ "amount", "resourceArn", "usageType" ],
                members: {
                    amount: {
                        type: "long"
                    },
                    breachAction: {},
                    period: {},
                    resourceArn: {},
                    usageType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    usageLimit: {
                        shape: "S1a"
                    }
                }
            },
            idempotent: true
        },
        CreateWorkgroup: {
            input: {
                type: "structure",
                required: [ "namespaceName", "workgroupName" ],
                members: {
                    baseCapacity: {
                        type: "integer"
                    },
                    configParameters: {
                        shape: "S1c"
                    },
                    enhancedVpcRouting: {
                        type: "boolean"
                    },
                    namespaceName: {},
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    securityGroupIds: {
                        shape: "S1h"
                    },
                    subnetIds: {
                        shape: "Sd"
                    },
                    tags: {
                        shape: "Sw"
                    },
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    workgroup: {
                        shape: "S1l"
                    }
                }
            },
            idempotent: true
        },
        DeleteEndpointAccess: {
            input: {
                type: "structure",
                required: [ "endpointName" ],
                members: {
                    endpointName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "Si"
                    }
                }
            },
            idempotent: true
        },
        DeleteNamespace: {
            input: {
                type: "structure",
                required: [ "namespaceName" ],
                members: {
                    finalSnapshotName: {},
                    finalSnapshotRetentionPeriod: {
                        type: "integer"
                    },
                    namespaceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "namespace" ],
                members: {
                    namespace: {
                        shape: "S11"
                    }
                }
            },
            idempotent: true
        },
        DeleteResourcePolicy: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSnapshot: {
            input: {
                type: "structure",
                required: [ "snapshotName" ],
                members: {
                    snapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S5"
                    }
                }
            },
            idempotent: true
        },
        DeleteUsageLimit: {
            input: {
                type: "structure",
                required: [ "usageLimitId" ],
                members: {
                    usageLimitId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    usageLimit: {
                        shape: "S1a"
                    }
                }
            },
            idempotent: true
        },
        DeleteWorkgroup: {
            input: {
                type: "structure",
                required: [ "workgroupName" ],
                members: {
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workgroup" ],
                members: {
                    workgroup: {
                        shape: "S1l"
                    }
                }
            },
            idempotent: true
        },
        GetCredentials: {
            input: {
                type: "structure",
                required: [ "workgroupName" ],
                members: {
                    dbName: {},
                    durationSeconds: {
                        type: "integer"
                    },
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    dbPassword: {
                        shape: "Sp"
                    },
                    dbUser: {
                        shape: "Sq"
                    },
                    expiration: {
                        type: "timestamp"
                    },
                    nextRefreshTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetEndpointAccess: {
            input: {
                type: "structure",
                required: [ "endpointName" ],
                members: {
                    endpointName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "Si"
                    }
                }
            }
        },
        GetNamespace: {
            input: {
                type: "structure",
                required: [ "namespaceName" ],
                members: {
                    namespaceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "namespace" ],
                members: {
                    namespace: {
                        shape: "S11"
                    }
                }
            }
        },
        GetRecoveryPoint: {
            input: {
                type: "structure",
                required: [ "recoveryPointId" ],
                members: {
                    recoveryPointId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    recoveryPoint: {
                        shape: "S2b"
                    }
                }
            }
        },
        GetResourcePolicy: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourcePolicy: {
                        shape: "S2e"
                    }
                }
            }
        },
        GetSnapshot: {
            input: {
                type: "structure",
                members: {
                    ownerAccount: {},
                    snapshotArn: {},
                    snapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S5"
                    }
                }
            }
        },
        GetUsageLimit: {
            input: {
                type: "structure",
                required: [ "usageLimitId" ],
                members: {
                    usageLimitId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    usageLimit: {
                        shape: "S1a"
                    }
                }
            }
        },
        GetWorkgroup: {
            input: {
                type: "structure",
                required: [ "workgroupName" ],
                members: {
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workgroup" ],
                members: {
                    workgroup: {
                        shape: "S1l"
                    }
                }
            }
        },
        ListEndpointAccess: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    vpcId: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "endpoints" ],
                members: {
                    endpoints: {
                        type: "list",
                        member: {
                            shape: "Si"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNamespaces: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "namespaces" ],
                members: {
                    namespaces: {
                        type: "list",
                        member: {
                            shape: "S11"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListRecoveryPoints: {
            input: {
                type: "structure",
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    namespaceName: {},
                    nextToken: {},
                    startTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    recoveryPoints: {
                        type: "list",
                        member: {
                            shape: "S2b"
                        }
                    }
                }
            }
        },
        ListSnapshots: {
            input: {
                type: "structure",
                members: {
                    endTime: {
                        type: "timestamp"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    namespaceArn: {},
                    namespaceName: {},
                    nextToken: {},
                    ownerAccount: {},
                    startTime: {
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    snapshots: {
                        type: "list",
                        member: {
                            shape: "S5"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sw"
                    }
                }
            }
        },
        ListUsageLimits: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    resourceArn: {},
                    usageType: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    usageLimits: {
                        type: "list",
                        member: {
                            shape: "S1a"
                        }
                    }
                }
            }
        },
        ListWorkgroups: {
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workgroups" ],
                members: {
                    nextToken: {},
                    workgroups: {
                        type: "list",
                        member: {
                            shape: "S1l"
                        }
                    }
                }
            }
        },
        PutResourcePolicy: {
            input: {
                type: "structure",
                required: [ "policy", "resourceArn" ],
                members: {
                    policy: {},
                    resourceArn: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    resourcePolicy: {
                        shape: "S2e"
                    }
                }
            }
        },
        RestoreFromRecoveryPoint: {
            input: {
                type: "structure",
                required: [ "namespaceName", "recoveryPointId", "workgroupName" ],
                members: {
                    namespaceName: {},
                    recoveryPointId: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    namespace: {
                        shape: "S11"
                    },
                    recoveryPointId: {}
                }
            }
        },
        RestoreFromSnapshot: {
            input: {
                type: "structure",
                required: [ "namespaceName", "workgroupName" ],
                members: {
                    namespaceName: {},
                    ownerAccount: {},
                    snapshotArn: {},
                    snapshotName: {},
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    namespace: {
                        shape: "S11"
                    },
                    ownerAccount: {},
                    snapshotName: {}
                }
            },
            idempotent: true
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sw"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateEndpointAccess: {
            input: {
                type: "structure",
                required: [ "endpointName" ],
                members: {
                    endpointName: {},
                    vpcSecurityGroupIds: {
                        shape: "Sf"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    endpoint: {
                        shape: "Si"
                    }
                }
            }
        },
        UpdateNamespace: {
            input: {
                type: "structure",
                required: [ "namespaceName" ],
                members: {
                    adminUserPassword: {
                        shape: "Sp"
                    },
                    adminUsername: {
                        shape: "Sq"
                    },
                    defaultIamRoleArn: {},
                    iamRoles: {
                        shape: "Sr"
                    },
                    kmsKeyId: {},
                    logExports: {
                        shape: "St"
                    },
                    namespaceName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "namespace" ],
                members: {
                    namespace: {
                        shape: "S11"
                    }
                }
            }
        },
        UpdateSnapshot: {
            input: {
                type: "structure",
                required: [ "snapshotName" ],
                members: {
                    retentionPeriod: {
                        type: "integer"
                    },
                    snapshotName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    snapshot: {
                        shape: "S5"
                    }
                }
            }
        },
        UpdateUsageLimit: {
            input: {
                type: "structure",
                required: [ "usageLimitId" ],
                members: {
                    amount: {
                        type: "long"
                    },
                    breachAction: {},
                    usageLimitId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    usageLimit: {
                        shape: "S1a"
                    }
                }
            }
        },
        UpdateWorkgroup: {
            input: {
                type: "structure",
                required: [ "workgroupName" ],
                members: {
                    baseCapacity: {
                        type: "integer"
                    },
                    configParameters: {
                        shape: "S1c"
                    },
                    enhancedVpcRouting: {
                        type: "boolean"
                    },
                    publiclyAccessible: {
                        type: "boolean"
                    },
                    securityGroupIds: {
                        shape: "S1h"
                    },
                    subnetIds: {
                        shape: "Sd"
                    },
                    workgroupName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "workgroup" ],
                members: {
                    workgroup: {
                        shape: "S1l"
                    }
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "structure",
            members: {
                accountsWithProvisionedRestoreAccess: {
                    shape: "S6"
                },
                accountsWithRestoreAccess: {
                    shape: "S6"
                },
                actualIncrementalBackupSizeInMegaBytes: {
                    type: "double"
                },
                adminUsername: {},
                backupProgressInMegaBytes: {
                    type: "double"
                },
                currentBackupRateInMegaBytesPerSecond: {
                    type: "double"
                },
                elapsedTimeInSeconds: {
                    type: "long"
                },
                estimatedSecondsToCompletion: {
                    type: "long"
                },
                kmsKeyId: {},
                namespaceArn: {},
                namespaceName: {},
                ownerAccount: {},
                snapshotArn: {},
                snapshotCreateTime: {
                    shape: "Sa"
                },
                snapshotName: {},
                snapshotRemainingDays: {
                    type: "integer"
                },
                snapshotRetentionPeriod: {
                    type: "integer"
                },
                snapshotRetentionStartTime: {
                    shape: "Sa"
                },
                status: {},
                totalBackupSizeInMegaBytes: {
                    type: "double"
                }
            }
        },
        S6: {
            type: "list",
            member: {}
        },
        Sa: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sd: {
            type: "list",
            member: {}
        },
        Sf: {
            type: "list",
            member: {}
        },
        Si: {
            type: "structure",
            members: {
                address: {},
                endpointArn: {},
                endpointCreateTime: {
                    shape: "Sa"
                },
                endpointName: {},
                endpointStatus: {},
                port: {
                    type: "integer"
                },
                subnetIds: {
                    shape: "Sd"
                },
                vpcEndpoint: {
                    shape: "Sj"
                },
                vpcSecurityGroups: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            status: {},
                            vpcSecurityGroupId: {}
                        }
                    }
                },
                workgroupName: {}
            }
        },
        Sj: {
            type: "structure",
            members: {
                networkInterfaces: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            availabilityZone: {},
                            networkInterfaceId: {},
                            privateIpAddress: {},
                            subnetId: {}
                        }
                    }
                },
                vpcEndpointId: {},
                vpcId: {}
            }
        },
        Sp: {
            type: "string",
            sensitive: true
        },
        Sq: {
            type: "string",
            sensitive: true
        },
        Sr: {
            type: "list",
            member: {}
        },
        St: {
            type: "list",
            member: {}
        },
        Sw: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {},
                    value: {}
                }
            }
        },
        S11: {
            type: "structure",
            members: {
                adminUsername: {
                    shape: "Sq"
                },
                creationDate: {
                    shape: "Sa"
                },
                dbName: {},
                defaultIamRoleArn: {},
                iamRoles: {
                    shape: "Sr"
                },
                kmsKeyId: {},
                logExports: {
                    shape: "St"
                },
                namespaceArn: {},
                namespaceId: {},
                namespaceName: {},
                status: {}
            }
        },
        S1a: {
            type: "structure",
            members: {
                amount: {
                    type: "long"
                },
                breachAction: {},
                period: {},
                resourceArn: {},
                usageLimitArn: {},
                usageLimitId: {},
                usageType: {}
            }
        },
        S1c: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    parameterKey: {},
                    parameterValue: {}
                }
            }
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1l: {
            type: "structure",
            members: {
                baseCapacity: {
                    type: "integer"
                },
                configParameters: {
                    shape: "S1c"
                },
                creationDate: {
                    shape: "Sa"
                },
                endpoint: {
                    type: "structure",
                    members: {
                        address: {},
                        port: {
                            type: "integer"
                        },
                        vpcEndpoints: {
                            type: "list",
                            member: {
                                shape: "Sj"
                            }
                        }
                    }
                },
                enhancedVpcRouting: {
                    type: "boolean"
                },
                namespaceName: {},
                publiclyAccessible: {
                    type: "boolean"
                },
                securityGroupIds: {
                    shape: "S1h"
                },
                status: {},
                subnetIds: {
                    shape: "Sd"
                },
                workgroupArn: {},
                workgroupId: {},
                workgroupName: {}
            }
        },
        S2b: {
            type: "structure",
            members: {
                namespaceName: {},
                recoveryPointCreateTime: {
                    shape: "Sa"
                },
                recoveryPointId: {},
                totalSizeInMegaBytes: {
                    type: "double"
                },
                workgroupName: {}
            }
        },
        S2e: {
            type: "structure",
            members: {
                policy: {},
                resourceArn: {}
            }
        }
    },
    paginators: {
        ListEndpointAccess: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "endpoints"
        },
        ListNamespaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "namespaces"
        },
        ListRecoveryPoints: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "recoveryPoints"
        },
        ListSnapshots: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "snapshots"
        },
        ListUsageLimits: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "usageLimits"
        },
        ListWorkgroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workgroups"
        }
    }
};

AWS.apiLoader.services["rolesanywhere"] = {};

AWS.RolesAnywhere = AWS.Service.defineService("rolesanywhere", [ "2018-05-10" ]);

AWS.apiLoader.services["rolesanywhere"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "rolesanywhere",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "IAM Roles Anywhere",
        serviceId: "RolesAnywhere",
        signatureVersion: "v4",
        signingName: "rolesanywhere",
        uid: "rolesanywhere-2018-05-10"
    },
    operations: {
        CreateProfile: {
            http: {
                requestUri: "/profiles",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "roleArns" ],
                members: {
                    durationSeconds: {
                        type: "integer"
                    },
                    enabled: {
                        type: "boolean"
                    },
                    managedPolicyArns: {
                        shape: "S4"
                    },
                    name: {},
                    requireInstanceProperties: {
                        type: "boolean"
                    },
                    roleArns: {
                        shape: "S7"
                    },
                    sessionPolicy: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                shape: "Se"
            }
        },
        CreateTrustAnchor: {
            http: {
                requestUri: "/trustanchors",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "name", "source" ],
                members: {
                    enabled: {
                        type: "boolean"
                    },
                    name: {},
                    source: {
                        shape: "Sl"
                    },
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                shape: "So"
            }
        },
        DeleteCrl: {
            http: {
                method: "DELETE",
                requestUri: "/crl/{crlId}",
                responseCode: 200
            },
            input: {
                shape: "Sq"
            },
            output: {
                shape: "Sr"
            },
            idempotent: true
        },
        DeleteProfile: {
            http: {
                method: "DELETE",
                requestUri: "/profile/{profileId}",
                responseCode: 200
            },
            input: {
                shape: "Su"
            },
            output: {
                shape: "Se"
            },
            idempotent: true
        },
        DeleteTrustAnchor: {
            http: {
                method: "DELETE",
                requestUri: "/trustanchor/{trustAnchorId}",
                responseCode: 200
            },
            input: {
                shape: "Sv"
            },
            output: {
                shape: "So"
            },
            idempotent: true
        },
        DisableCrl: {
            http: {
                requestUri: "/crl/{crlId}/disable",
                responseCode: 200
            },
            input: {
                shape: "Sq"
            },
            output: {
                shape: "Sr"
            }
        },
        DisableProfile: {
            http: {
                requestUri: "/profile/{profileId}/disable",
                responseCode: 200
            },
            input: {
                shape: "Su"
            },
            output: {
                shape: "Se"
            }
        },
        DisableTrustAnchor: {
            http: {
                requestUri: "/trustanchor/{trustAnchorId}/disable",
                responseCode: 200
            },
            input: {
                shape: "Sv"
            },
            output: {
                shape: "So"
            }
        },
        EnableCrl: {
            http: {
                requestUri: "/crl/{crlId}/enable",
                responseCode: 200
            },
            input: {
                shape: "Sq"
            },
            output: {
                shape: "Sr"
            }
        },
        EnableProfile: {
            http: {
                requestUri: "/profile/{profileId}/enable",
                responseCode: 200
            },
            input: {
                shape: "Su"
            },
            output: {
                shape: "Se"
            }
        },
        EnableTrustAnchor: {
            http: {
                requestUri: "/trustanchor/{trustAnchorId}/enable",
                responseCode: 200
            },
            input: {
                shape: "Sv"
            },
            output: {
                shape: "So"
            }
        },
        GetCrl: {
            http: {
                method: "GET",
                requestUri: "/crl/{crlId}",
                responseCode: 200
            },
            input: {
                shape: "Sq"
            },
            output: {
                shape: "Sr"
            }
        },
        GetProfile: {
            http: {
                method: "GET",
                requestUri: "/profile/{profileId}",
                responseCode: 200
            },
            input: {
                shape: "Su"
            },
            output: {
                shape: "Se"
            }
        },
        GetSubject: {
            http: {
                method: "GET",
                requestUri: "/subject/{subjectId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "subjectId" ],
                members: {
                    subjectId: {
                        location: "uri",
                        locationName: "subjectId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    subject: {
                        type: "structure",
                        members: {
                            createdAt: {
                                shape: "Sg"
                            },
                            credentials: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        enabled: {
                                            type: "boolean"
                                        },
                                        failed: {
                                            type: "boolean"
                                        },
                                        issuer: {},
                                        seenAt: {
                                            shape: "Sg"
                                        },
                                        serialNumber: {},
                                        x509CertificateData: {}
                                    }
                                }
                            },
                            enabled: {
                                type: "boolean"
                            },
                            instanceProperties: {
                                type: "list",
                                member: {
                                    type: "structure",
                                    members: {
                                        failed: {
                                            type: "boolean"
                                        },
                                        properties: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        },
                                        seenAt: {
                                            shape: "Sg"
                                        }
                                    }
                                }
                            },
                            lastSeenAt: {
                                shape: "Sg"
                            },
                            subjectArn: {},
                            subjectId: {},
                            updatedAt: {
                                shape: "Sg"
                            },
                            x509Subject: {}
                        }
                    }
                }
            }
        },
        GetTrustAnchor: {
            http: {
                method: "GET",
                requestUri: "/trustanchor/{trustAnchorId}",
                responseCode: 200
            },
            input: {
                shape: "Sv"
            },
            output: {
                shape: "So"
            }
        },
        ImportCrl: {
            http: {
                requestUri: "/crls",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "crlData", "name", "trustAnchorArn" ],
                members: {
                    crlData: {
                        type: "blob"
                    },
                    enabled: {
                        type: "boolean"
                    },
                    name: {},
                    tags: {
                        shape: "Sa"
                    },
                    trustAnchorArn: {}
                }
            },
            output: {
                shape: "Sr"
            }
        },
        ListCrls: {
            http: {
                method: "GET",
                requestUri: "/crls",
                responseCode: 200
            },
            input: {
                shape: "S19"
            },
            output: {
                type: "structure",
                members: {
                    crls: {
                        type: "list",
                        member: {
                            shape: "Ss"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListProfiles: {
            http: {
                method: "GET",
                requestUri: "/profiles",
                responseCode: 200
            },
            input: {
                shape: "S19"
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    profiles: {
                        type: "list",
                        member: {
                            shape: "Sf"
                        }
                    }
                }
            }
        },
        ListSubjects: {
            http: {
                method: "GET",
                requestUri: "/subjects",
                responseCode: 200
            },
            input: {
                shape: "S19"
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    subjects: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                createdAt: {
                                    shape: "Sg"
                                },
                                enabled: {
                                    type: "boolean"
                                },
                                lastSeenAt: {
                                    shape: "Sg"
                                },
                                subjectArn: {},
                                subjectId: {},
                                updatedAt: {
                                    shape: "Sg"
                                },
                                x509Subject: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/ListTagsForResource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "querystring",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sa"
                    }
                }
            }
        },
        ListTrustAnchors: {
            http: {
                method: "GET",
                requestUri: "/trustanchors",
                responseCode: 200
            },
            input: {
                shape: "S19"
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    trustAnchors: {
                        type: "list",
                        member: {
                            shape: "Sp"
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/TagResource",
                responseCode: 201
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {},
                    tags: {
                        shape: "Sa"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                requestUri: "/UntagResource",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {},
                    tagKeys: {
                        type: "list",
                        member: {
                            shape: "Sc"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateCrl: {
            http: {
                method: "PATCH",
                requestUri: "/crl/{crlId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "crlId" ],
                members: {
                    crlData: {
                        type: "blob"
                    },
                    crlId: {
                        location: "uri",
                        locationName: "crlId"
                    },
                    name: {}
                }
            },
            output: {
                shape: "Sr"
            }
        },
        UpdateProfile: {
            http: {
                method: "PATCH",
                requestUri: "/profile/{profileId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "profileId" ],
                members: {
                    durationSeconds: {
                        type: "integer"
                    },
                    managedPolicyArns: {
                        shape: "S4"
                    },
                    name: {},
                    profileId: {
                        location: "uri",
                        locationName: "profileId"
                    },
                    roleArns: {
                        shape: "S7"
                    },
                    sessionPolicy: {}
                }
            },
            output: {
                shape: "Se"
            },
            idempotent: true
        },
        UpdateTrustAnchor: {
            http: {
                method: "PATCH",
                requestUri: "/trustanchor/{trustAnchorId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "trustAnchorId" ],
                members: {
                    name: {},
                    source: {
                        shape: "Sl"
                    },
                    trustAnchorId: {
                        location: "uri",
                        locationName: "trustAnchorId"
                    }
                }
            },
            output: {
                shape: "So"
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "list",
            member: {}
        },
        S7: {
            type: "list",
            member: {}
        },
        Sa: {
            type: "list",
            member: {
                type: "structure",
                required: [ "key", "value" ],
                members: {
                    key: {
                        shape: "Sc"
                    },
                    value: {
                        type: "string",
                        sensitive: true
                    }
                }
            }
        },
        Sc: {
            type: "string",
            sensitive: true
        },
        Se: {
            type: "structure",
            members: {
                profile: {
                    shape: "Sf"
                }
            }
        },
        Sf: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "Sg"
                },
                createdBy: {},
                durationSeconds: {
                    type: "integer"
                },
                enabled: {
                    type: "boolean"
                },
                managedPolicyArns: {
                    shape: "S4"
                },
                name: {},
                profileArn: {},
                profileId: {},
                requireInstanceProperties: {
                    type: "boolean"
                },
                roleArns: {
                    shape: "S7"
                },
                sessionPolicy: {},
                updatedAt: {
                    shape: "Sg"
                }
            }
        },
        Sg: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        Sl: {
            type: "structure",
            members: {
                sourceData: {
                    type: "structure",
                    members: {
                        acmPcaArn: {},
                        x509CertificateData: {}
                    },
                    union: true
                },
                sourceType: {}
            }
        },
        So: {
            type: "structure",
            required: [ "trustAnchor" ],
            members: {
                trustAnchor: {
                    shape: "Sp"
                }
            }
        },
        Sp: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "Sg"
                },
                enabled: {
                    type: "boolean"
                },
                name: {},
                source: {
                    shape: "Sl"
                },
                trustAnchorArn: {},
                trustAnchorId: {},
                updatedAt: {
                    shape: "Sg"
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "crlId" ],
            members: {
                crlId: {
                    location: "uri",
                    locationName: "crlId"
                }
            }
        },
        Sr: {
            type: "structure",
            required: [ "crl" ],
            members: {
                crl: {
                    shape: "Ss"
                }
            }
        },
        Ss: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "Sg"
                },
                crlArn: {},
                crlData: {
                    type: "blob"
                },
                crlId: {},
                enabled: {
                    type: "boolean"
                },
                name: {},
                trustAnchorArn: {},
                updatedAt: {
                    shape: "Sg"
                }
            }
        },
        Su: {
            type: "structure",
            required: [ "profileId" ],
            members: {
                profileId: {
                    location: "uri",
                    locationName: "profileId"
                }
            }
        },
        Sv: {
            type: "structure",
            required: [ "trustAnchorId" ],
            members: {
                trustAnchorId: {
                    location: "uri",
                    locationName: "trustAnchorId"
                }
            }
        },
        S19: {
            type: "structure",
            members: {
                nextToken: {
                    location: "querystring",
                    locationName: "nextToken"
                },
                pageSize: {
                    location: "querystring",
                    locationName: "pageSize",
                    type: "integer"
                }
            }
        }
    },
    paginators: {
        ListCrls: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "crls"
        },
        ListProfiles: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "profiles"
        },
        ListSubjects: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "subjects"
        },
        ListTrustAnchors: {
            input_token: "nextToken",
            output_token: "nextToken",
            result_key: "trustAnchors"
        }
    }
};

AWS.apiLoader.services["licensemanagerusersubscriptions"] = {};

AWS.LicenseManagerUserSubscriptions = AWS.Service.defineService("licensemanagerusersubscriptions", [ "2018-05-10" ]);

AWS.apiLoader.services["licensemanagerusersubscriptions"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "license-manager-user-subscriptions",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS License Manager User Subscriptions",
        serviceId: "License Manager User Subscriptions",
        signatureVersion: "v4",
        signingName: "license-manager-user-subscriptions",
        uid: "license-manager-user-subscriptions-2018-05-10"
    },
    operations: {
        AssociateUser: {
            http: {
                requestUri: "/user/AssociateUser",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "InstanceId", "Username" ],
                members: {
                    Domain: {},
                    IdentityProvider: {
                        shape: "S3"
                    },
                    InstanceId: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InstanceUserSummary" ],
                members: {
                    InstanceUserSummary: {
                        shape: "S6"
                    }
                }
            },
            idempotent: true
        },
        DeregisterIdentityProvider: {
            http: {
                requestUri: "/identity-provider/DeregisterIdentityProvider",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product" ],
                members: {
                    IdentityProvider: {
                        shape: "S3"
                    },
                    Product: {}
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProviderSummary" ],
                members: {
                    IdentityProviderSummary: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        },
        DisassociateUser: {
            http: {
                requestUri: "/user/DisassociateUser",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "InstanceId", "Username" ],
                members: {
                    Domain: {},
                    IdentityProvider: {
                        shape: "S3"
                    },
                    InstanceId: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                required: [ "InstanceUserSummary" ],
                members: {
                    InstanceUserSummary: {
                        shape: "S6"
                    }
                }
            },
            idempotent: true
        },
        ListIdentityProviders: {
            http: {
                requestUri: "/identity-provider/ListIdentityProviders",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProviderSummaries" ],
                members: {
                    IdentityProviderSummaries: {
                        type: "list",
                        member: {
                            shape: "S9"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListInstances: {
            http: {
                requestUri: "/instance/ListInstances",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    Filters: {
                        shape: "Sh"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "InstanceId", "Products", "Status" ],
                            members: {
                                InstanceId: {},
                                LastStatusCheckDate: {},
                                Products: {
                                    type: "list",
                                    member: {}
                                },
                                Status: {},
                                StatusMessage: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListProductSubscriptions: {
            http: {
                requestUri: "/user/ListProductSubscriptions",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product" ],
                members: {
                    Filters: {
                        shape: "Sh"
                    },
                    IdentityProvider: {
                        shape: "S3"
                    },
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {},
                    Product: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    NextToken: {},
                    ProductUserSummaries: {
                        type: "list",
                        member: {
                            shape: "Sq"
                        }
                    }
                }
            }
        },
        ListUserAssociations: {
            http: {
                requestUri: "/user/ListUserAssociations",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "InstanceId" ],
                members: {
                    Filters: {
                        shape: "Sh"
                    },
                    IdentityProvider: {
                        shape: "S3"
                    },
                    InstanceId: {},
                    MaxResults: {
                        type: "integer"
                    },
                    NextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    InstanceUserSummaries: {
                        type: "list",
                        member: {
                            shape: "S6"
                        }
                    },
                    NextToken: {}
                }
            }
        },
        RegisterIdentityProvider: {
            http: {
                requestUri: "/identity-provider/RegisterIdentityProvider",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product" ],
                members: {
                    IdentityProvider: {
                        shape: "S3"
                    },
                    Product: {}
                }
            },
            output: {
                type: "structure",
                required: [ "IdentityProviderSummary" ],
                members: {
                    IdentityProviderSummary: {
                        shape: "S9"
                    }
                }
            },
            idempotent: true
        },
        StartProductSubscription: {
            http: {
                requestUri: "/user/StartProductSubscription",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product", "Username" ],
                members: {
                    Domain: {},
                    IdentityProvider: {
                        shape: "S3"
                    },
                    Product: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProductUserSummary" ],
                members: {
                    ProductUserSummary: {
                        shape: "Sq"
                    }
                }
            }
        },
        StopProductSubscription: {
            http: {
                requestUri: "/user/StopProductSubscription",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "IdentityProvider", "Product", "Username" ],
                members: {
                    Domain: {},
                    IdentityProvider: {
                        shape: "S3"
                    },
                    Product: {},
                    Username: {}
                }
            },
            output: {
                type: "structure",
                required: [ "ProductUserSummary" ],
                members: {
                    ProductUserSummary: {
                        shape: "Sq"
                    }
                }
            }
        }
    },
    shapes: {
        S3: {
            type: "structure",
            members: {
                ActiveDirectoryIdentityProvider: {
                    type: "structure",
                    members: {
                        DirectoryId: {}
                    }
                }
            },
            union: true
        },
        S6: {
            type: "structure",
            required: [ "IdentityProvider", "InstanceId", "Status", "Username" ],
            members: {
                AssociationDate: {},
                DisassociationDate: {},
                Domain: {},
                IdentityProvider: {
                    shape: "S3"
                },
                InstanceId: {},
                Status: {},
                StatusMessage: {},
                Username: {}
            }
        },
        S9: {
            type: "structure",
            required: [ "IdentityProvider", "Product", "Status" ],
            members: {
                FailureMessage: {},
                IdentityProvider: {
                    shape: "S3"
                },
                Product: {},
                Status: {}
            }
        },
        Sh: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    Attribute: {},
                    Operation: {},
                    Value: {}
                }
            }
        },
        Sq: {
            type: "structure",
            required: [ "IdentityProvider", "Product", "Status", "Username" ],
            members: {
                Domain: {},
                IdentityProvider: {
                    shape: "S3"
                },
                Product: {},
                Status: {},
                StatusMessage: {},
                SubscriptionEndDate: {},
                SubscriptionStartDate: {},
                Username: {}
            }
        }
    },
    paginators: {
        ListIdentityProviders: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "IdentityProviderSummaries"
        },
        ListInstances: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InstanceSummaries"
        },
        ListProductSubscriptions: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "ProductUserSummaries"
        },
        ListUserAssociations: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults",
            result_key: "InstanceUserSummaries"
        }
    }
};

AWS.apiLoader.services["backupstorage"] = {};

AWS.BackupStorage = AWS.Service.defineService("backupstorage", [ "2018-04-10" ]);

AWS.apiLoader.services["backupstorage"]["2018-04-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-04-10",
        endpointPrefix: "backupstorage",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Backup Storage",
        serviceId: "BackupStorage",
        signatureVersion: "v4",
        signingName: "backup-storage",
        uid: "backupstorage-2018-04-10"
    },
    operations: {
        DeleteObject: {
            http: {
                method: "DELETE",
                requestUri: "/backup-jobs/{jobId}/object/{objectName}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "ObjectName" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectName: {
                        location: "uri",
                        locationName: "objectName"
                    }
                }
            }
        },
        GetChunk: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{jobId}/chunk/{chunkToken}"
            },
            input: {
                type: "structure",
                required: [ "StorageJobId", "ChunkToken" ],
                members: {
                    StorageJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ChunkToken: {
                        location: "uri",
                        locationName: "chunkToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "Data", "Length", "Checksum", "ChecksumAlgorithm" ],
                members: {
                    Data: {
                        shape: "S5"
                    },
                    Length: {
                        location: "header",
                        locationName: "x-amz-data-length",
                        type: "long"
                    },
                    Checksum: {
                        location: "header",
                        locationName: "x-amz-checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-checksum-algorithm"
                    }
                },
                payload: "Data"
            }
        },
        GetObjectMetadata: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{jobId}/object/{objectToken}/metadata"
            },
            input: {
                type: "structure",
                required: [ "StorageJobId", "ObjectToken" ],
                members: {
                    StorageJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectToken: {
                        location: "uri",
                        locationName: "objectToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    MetadataString: {
                        location: "header",
                        locationName: "x-amz-metadata-string"
                    },
                    MetadataBlob: {
                        shape: "S5"
                    },
                    MetadataBlobLength: {
                        location: "header",
                        locationName: "x-amz-data-length",
                        type: "long"
                    },
                    MetadataBlobChecksum: {
                        location: "header",
                        locationName: "x-amz-checksum"
                    },
                    MetadataBlobChecksumAlgorithm: {
                        location: "header",
                        locationName: "x-amz-checksum-algorithm"
                    }
                },
                payload: "MetadataBlob"
            }
        },
        ListChunks: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{jobId}/chunks/{objectToken}/list"
            },
            input: {
                type: "structure",
                required: [ "StorageJobId", "ObjectToken" ],
                members: {
                    StorageJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectToken: {
                        location: "uri",
                        locationName: "objectToken"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ChunkList" ],
                members: {
                    ChunkList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Index", "Length", "Checksum", "ChecksumAlgorithm", "ChunkToken" ],
                            members: {
                                Index: {
                                    type: "long"
                                },
                                Length: {
                                    type: "long"
                                },
                                Checksum: {},
                                ChecksumAlgorithm: {},
                                ChunkToken: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        ListObjects: {
            http: {
                method: "GET",
                requestUri: "/restore-jobs/{jobId}/objects/list"
            },
            input: {
                type: "structure",
                required: [ "StorageJobId" ],
                members: {
                    StorageJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    StartingObjectName: {
                        location: "querystring",
                        locationName: "starting-object-name"
                    },
                    StartingObjectPrefix: {
                        location: "querystring",
                        locationName: "starting-object-prefix"
                    },
                    MaxResults: {
                        location: "querystring",
                        locationName: "max-results",
                        type: "integer"
                    },
                    NextToken: {
                        location: "querystring",
                        locationName: "next-token"
                    },
                    CreatedBefore: {
                        location: "querystring",
                        locationName: "created-before",
                        type: "timestamp"
                    },
                    CreatedAfter: {
                        location: "querystring",
                        locationName: "created-after",
                        type: "timestamp"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "ObjectList" ],
                members: {
                    ObjectList: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "Name", "ObjectChecksum", "ObjectChecksumAlgorithm", "ObjectToken" ],
                            members: {
                                Name: {},
                                ChunksCount: {
                                    type: "long"
                                },
                                MetadataString: {},
                                ObjectChecksum: {},
                                ObjectChecksumAlgorithm: {},
                                ObjectToken: {}
                            }
                        }
                    },
                    NextToken: {}
                }
            }
        },
        NotifyObjectComplete: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs/{jobId}/object/{uploadId}/complete"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "UploadId", "ObjectChecksum", "ObjectChecksumAlgorithm" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    UploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    ObjectChecksum: {
                        location: "querystring",
                        locationName: "checksum"
                    },
                    ObjectChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "checksum-algorithm"
                    },
                    MetadataString: {
                        location: "querystring",
                        locationName: "metadata-string"
                    },
                    MetadataBlob: {
                        shape: "S5"
                    },
                    MetadataBlobLength: {
                        location: "querystring",
                        locationName: "metadata-blob-length",
                        type: "long"
                    },
                    MetadataBlobChecksum: {
                        location: "querystring",
                        locationName: "metadata-checksum"
                    },
                    MetadataBlobChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "metadata-checksum-algorithm"
                    }
                },
                payload: "MetadataBlob"
            },
            output: {
                type: "structure",
                required: [ "ObjectChecksum", "ObjectChecksumAlgorithm" ],
                members: {
                    ObjectChecksum: {},
                    ObjectChecksumAlgorithm: {}
                }
            },
            authtype: "v4-unsigned-body"
        },
        PutChunk: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs/{jobId}/chunk/{uploadId}/{chunkIndex}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "UploadId", "ChunkIndex", "Data", "Length", "Checksum", "ChecksumAlgorithm" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    UploadId: {
                        location: "uri",
                        locationName: "uploadId"
                    },
                    ChunkIndex: {
                        location: "uri",
                        locationName: "chunkIndex",
                        type: "long"
                    },
                    Data: {
                        shape: "S5"
                    },
                    Length: {
                        location: "querystring",
                        locationName: "length",
                        type: "long"
                    },
                    Checksum: {
                        location: "querystring",
                        locationName: "checksum"
                    },
                    ChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "checksum-algorithm"
                    }
                },
                payload: "Data"
            },
            output: {
                type: "structure",
                required: [ "ChunkChecksum", "ChunkChecksumAlgorithm" ],
                members: {
                    ChunkChecksum: {},
                    ChunkChecksumAlgorithm: {}
                }
            },
            authtype: "v4-unsigned-body"
        },
        PutObject: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs/{jobId}/object/{objectName}/put-object"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "ObjectName" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectName: {
                        location: "uri",
                        locationName: "objectName"
                    },
                    MetadataString: {
                        location: "querystring",
                        locationName: "metadata-string"
                    },
                    InlineChunk: {
                        shape: "S5"
                    },
                    InlineChunkLength: {
                        location: "querystring",
                        locationName: "length",
                        type: "long"
                    },
                    InlineChunkChecksum: {
                        location: "querystring",
                        locationName: "checksum"
                    },
                    InlineChunkChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "checksum-algorithm"
                    },
                    ObjectChecksum: {
                        location: "querystring",
                        locationName: "object-checksum"
                    },
                    ObjectChecksumAlgorithm: {
                        location: "querystring",
                        locationName: "object-checksum-algorithm"
                    },
                    ThrowOnDuplicate: {
                        location: "querystring",
                        locationName: "throwOnDuplicate",
                        type: "boolean"
                    }
                },
                payload: "InlineChunk"
            },
            output: {
                type: "structure",
                required: [ "InlineChunkChecksum", "InlineChunkChecksumAlgorithm", "ObjectChecksum", "ObjectChecksumAlgorithm" ],
                members: {
                    InlineChunkChecksum: {},
                    InlineChunkChecksumAlgorithm: {},
                    ObjectChecksum: {},
                    ObjectChecksumAlgorithm: {}
                }
            },
            authtype: "v4-unsigned-body"
        },
        StartObject: {
            http: {
                method: "PUT",
                requestUri: "/backup-jobs/{jobId}/object/{objectName}"
            },
            input: {
                type: "structure",
                required: [ "BackupJobId", "ObjectName" ],
                members: {
                    BackupJobId: {
                        location: "uri",
                        locationName: "jobId"
                    },
                    ObjectName: {
                        location: "uri",
                        locationName: "objectName"
                    },
                    ThrowOnDuplicate: {
                        type: "boolean"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "UploadId" ],
                members: {
                    UploadId: {}
                }
            }
        }
    },
    shapes: {
        S5: {
            type: "blob",
            streaming: true
        }
    },
    paginators: {
        ListChunks: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        },
        ListObjects: {
            input_token: "NextToken",
            output_token: "NextToken",
            limit_key: "MaxResults"
        }
    }
};

AWS.apiLoader.services["privatenetworks"] = {};

AWS.PrivateNetworks = AWS.Service.defineService("privatenetworks", [ "2021-12-03" ]);

AWS.apiLoader.services["privatenetworks"]["2021-12-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-12-03",
        endpointPrefix: "private-networks",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Private 5G",
        serviceId: "PrivateNetworks",
        signatureVersion: "v4",
        signingName: "private-networks",
        uid: "privatenetworks-2021-12-03"
    },
    operations: {
        AcknowledgeOrderReceipt: {
            http: {
                requestUri: "/v1/orders/acknowledge",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "orderArn" ],
                members: {
                    orderArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "order" ],
                members: {
                    order: {
                        shape: "S4"
                    }
                }
            }
        },
        ActivateDeviceIdentifier: {
            http: {
                requestUri: "/v1/device-identifiers/activate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deviceIdentifierArn" ],
                members: {
                    clientToken: {},
                    deviceIdentifierArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "deviceIdentifier" ],
                members: {
                    deviceIdentifier: {
                        shape: "Sf"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            idempotent: true
        },
        ActivateNetworkSite: {
            http: {
                requestUri: "/v1/network-sites/activate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn", "shippingAddress" ],
                members: {
                    clientToken: {},
                    networkSiteArn: {},
                    shippingAddress: {
                        shape: "S7"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSite: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        ConfigureAccessPoint: {
            http: {
                requestUri: "/v1/network-resources/configure",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accessPointArn" ],
                members: {
                    accessPointArn: {},
                    cpiSecretKey: {
                        type: "string",
                        sensitive: true
                    },
                    cpiUserId: {
                        type: "string",
                        sensitive: true
                    },
                    cpiUserPassword: {
                        type: "string",
                        sensitive: true
                    },
                    cpiUsername: {
                        type: "string",
                        sensitive: true
                    },
                    position: {
                        shape: "S13"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "accessPoint" ],
                members: {
                    accessPoint: {
                        shape: "S18"
                    }
                }
            },
            idempotent: true
        },
        CreateNetwork: {
            http: {
                requestUri: "/v1/networks",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkName" ],
                members: {
                    clientToken: {},
                    description: {},
                    networkName: {},
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "network" ],
                members: {
                    network: {
                        shape: "S1f"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            idempotent: true
        },
        CreateNetworkSite: {
            http: {
                requestUri: "/v1/network-sites",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn", "networkSiteName" ],
                members: {
                    availabilityZone: {},
                    availabilityZoneId: {},
                    clientToken: {},
                    description: {},
                    networkArn: {},
                    networkSiteName: {},
                    pendingPlan: {
                        shape: "So"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSite: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            idempotent: true
        },
        DeactivateDeviceIdentifier: {
            http: {
                requestUri: "/v1/device-identifiers/deactivate",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deviceIdentifierArn" ],
                members: {
                    clientToken: {},
                    deviceIdentifierArn: {}
                }
            },
            output: {
                type: "structure",
                required: [ "deviceIdentifier" ],
                members: {
                    deviceIdentifier: {
                        shape: "Sf"
                    }
                }
            },
            idempotent: true
        },
        DeleteNetwork: {
            http: {
                method: "DELETE",
                requestUri: "/v1/networks/{networkArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    clientToken: {
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    networkArn: {
                        location: "uri",
                        locationName: "networkArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "network" ],
                members: {
                    network: {
                        shape: "S1f"
                    }
                }
            },
            idempotent: true
        },
        DeleteNetworkSite: {
            http: {
                method: "DELETE",
                requestUri: "/v1/network-sites/{networkSiteArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn" ],
                members: {
                    clientToken: {
                        location: "querystring",
                        locationName: "clientToken"
                    },
                    networkSiteArn: {
                        location: "uri",
                        locationName: "networkSiteArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSite: {
                        shape: "Sn"
                    }
                }
            },
            idempotent: true
        },
        GetDeviceIdentifier: {
            http: {
                method: "GET",
                requestUri: "/v1/device-identifiers/{deviceIdentifierArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "deviceIdentifierArn" ],
                members: {
                    deviceIdentifierArn: {
                        location: "uri",
                        locationName: "deviceIdentifierArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    deviceIdentifier: {
                        shape: "Sf"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        GetNetwork: {
            http: {
                method: "GET",
                requestUri: "/v1/networks/{networkArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    networkArn: {
                        location: "uri",
                        locationName: "networkArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "network" ],
                members: {
                    network: {
                        shape: "S1f"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        GetNetworkResource: {
            http: {
                method: "GET",
                requestUri: "/v1/network-resources/{networkResourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkResourceArn" ],
                members: {
                    networkResourceArn: {
                        location: "uri",
                        locationName: "networkResourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "networkResource" ],
                members: {
                    networkResource: {
                        shape: "S18"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        GetNetworkSite: {
            http: {
                method: "GET",
                requestUri: "/v1/network-sites/{networkSiteArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn" ],
                members: {
                    networkSiteArn: {
                        location: "uri",
                        locationName: "networkSiteArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSite: {
                        shape: "Sn"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        GetOrder: {
            http: {
                method: "GET",
                requestUri: "/v1/orders/{orderArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "orderArn" ],
                members: {
                    orderArn: {
                        location: "uri",
                        locationName: "orderArn"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "order" ],
                members: {
                    order: {
                        shape: "S4"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        ListDeviceIdentifiers: {
            http: {
                requestUri: "/v1/device-identifiers/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    networkArn: {},
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    deviceIdentifiers: {
                        type: "list",
                        member: {
                            shape: "Sf"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNetworkResources: {
            http: {
                requestUri: "/v1/network-resources",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    networkArn: {},
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    networkResources: {
                        type: "list",
                        member: {
                            shape: "S18"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNetworkSites: {
            http: {
                requestUri: "/v1/network-sites/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    networkArn: {},
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    networkSites: {
                        type: "list",
                        member: {
                            shape: "Sn"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListNetworks: {
            http: {
                requestUri: "/v1/networks/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    networks: {
                        type: "list",
                        member: {
                            shape: "S1f"
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListOrders: {
            http: {
                requestUri: "/v1/orders/list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkArn" ],
                members: {
                    filters: {
                        type: "map",
                        key: {},
                        value: {
                            type: "list",
                            member: {}
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    networkArn: {},
                    startToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    orders: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Si"
                    }
                }
            }
        },
        Ping: {
            http: {
                method: "GET",
                requestUri: "/ping",
                responseCode: 200
            },
            output: {
                type: "structure",
                members: {
                    status: {}
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "Si"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {},
                        sensitive: true
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateNetworkSite: {
            http: {
                method: "PUT",
                requestUri: "/v1/network-sites/site",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn" ],
                members: {
                    clientToken: {},
                    description: {},
                    networkSiteArn: {}
                }
            },
            output: {
                shape: "S38"
            },
            idempotent: true
        },
        UpdateNetworkSitePlan: {
            http: {
                method: "PUT",
                requestUri: "/v1/network-sites/plan",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "networkSiteArn", "pendingPlan" ],
                members: {
                    clientToken: {},
                    networkSiteArn: {},
                    pendingPlan: {
                        shape: "So"
                    }
                }
            },
            output: {
                shape: "S38"
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "structure",
            members: {
                acknowledgmentStatus: {},
                createdAt: {
                    shape: "S6"
                },
                networkArn: {},
                networkSiteArn: {},
                orderArn: {},
                shippingAddress: {
                    shape: "S7"
                },
                trackingInformation: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            trackingNumber: {}
                        }
                    }
                }
            }
        },
        S6: {
            type: "timestamp",
            timestampFormat: "iso8601"
        },
        S7: {
            type: "structure",
            required: [ "city", "country", "name", "postalCode", "stateOrProvince", "street1" ],
            members: {
                city: {
                    shape: "S8"
                },
                company: {
                    shape: "S8"
                },
                country: {
                    shape: "S8"
                },
                name: {
                    shape: "S8"
                },
                phoneNumber: {
                    shape: "S8"
                },
                postalCode: {
                    shape: "S8"
                },
                stateOrProvince: {
                    shape: "S8"
                },
                street1: {
                    shape: "S8"
                },
                street2: {
                    shape: "S8"
                },
                street3: {
                    shape: "S8"
                }
            }
        },
        S8: {
            type: "string",
            sensitive: true
        },
        Sf: {
            type: "structure",
            members: {
                createdAt: {
                    shape: "S6"
                },
                deviceIdentifierArn: {},
                iccid: {},
                imsi: {
                    type: "string",
                    sensitive: true
                },
                networkArn: {},
                orderArn: {},
                status: {},
                trafficGroupArn: {},
                vendor: {}
            }
        },
        Si: {
            type: "map",
            key: {},
            value: {},
            sensitive: true
        },
        Sn: {
            type: "structure",
            required: [ "networkArn", "networkSiteArn", "networkSiteName", "status" ],
            members: {
                availabilityZone: {},
                availabilityZoneId: {},
                createdAt: {
                    shape: "S6"
                },
                currentPlan: {
                    shape: "So"
                },
                description: {},
                networkArn: {},
                networkSiteArn: {},
                networkSiteName: {},
                pendingPlan: {
                    shape: "So"
                },
                status: {},
                statusReason: {}
            }
        },
        So: {
            type: "structure",
            members: {
                options: {
                    shape: "Sp"
                },
                resourceDefinitions: {
                    type: "list",
                    member: {
                        type: "structure",
                        required: [ "count", "type" ],
                        members: {
                            count: {
                                type: "integer"
                            },
                            options: {
                                shape: "Sp"
                            },
                            type: {}
                        }
                    }
                }
            }
        },
        Sp: {
            type: "list",
            member: {
                shape: "Sq"
            }
        },
        Sq: {
            type: "structure",
            required: [ "name" ],
            members: {
                name: {},
                value: {}
            }
        },
        S13: {
            type: "structure",
            members: {
                elevation: {
                    type: "double"
                },
                elevationReference: {},
                elevationUnit: {},
                latitude: {
                    type: "double"
                },
                longitude: {
                    type: "double"
                }
            }
        },
        S18: {
            type: "structure",
            members: {
                attributes: {
                    type: "list",
                    member: {
                        shape: "Sq"
                    }
                },
                createdAt: {
                    shape: "S6"
                },
                description: {},
                health: {},
                model: {},
                networkArn: {},
                networkResourceArn: {},
                networkSiteArn: {},
                orderArn: {},
                position: {
                    shape: "S13"
                },
                serialNumber: {},
                status: {},
                statusReason: {},
                type: {},
                vendor: {}
            }
        },
        S1f: {
            type: "structure",
            required: [ "networkArn", "networkName", "status" ],
            members: {
                createdAt: {
                    shape: "S6"
                },
                description: {},
                networkArn: {},
                networkName: {},
                status: {},
                statusReason: {}
            }
        },
        S38: {
            type: "structure",
            members: {
                networkSite: {
                    shape: "Sn"
                },
                tags: {
                    shape: "Si"
                }
            }
        }
    },
    paginators: {
        ListDeviceIdentifiers: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "deviceIdentifiers"
        },
        ListNetworkResources: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networkResources"
        },
        ListNetworkSites: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networkSites"
        },
        ListNetworks: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networks"
        },
        ListOrders: {
            input_token: "startToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "orders"
        }
    }
};

AWS.apiLoader.services["supportapp"] = {};

AWS.SupportApp = AWS.Service.defineService("supportapp", [ "2021-08-20" ]);

AWS.apiLoader.services["supportapp"]["2021-08-20"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-20",
        endpointPrefix: "supportapp",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "SupportApp",
        serviceFullName: "AWS Support App",
        serviceId: "Support App",
        signatureVersion: "v4",
        signingName: "supportapp",
        uid: "support-app-2021-08-20"
    },
    operations: {
        CreateSlackChannelConfiguration: {
            http: {
                requestUri: "/control/create-slack-channel-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelId", "channelRoleArn", "notifyOnCaseSeverity", "teamId" ],
                members: {
                    channelId: {},
                    channelName: {},
                    channelRoleArn: {},
                    notifyOnAddCorrespondenceToCase: {
                        type: "boolean"
                    },
                    notifyOnCaseSeverity: {},
                    notifyOnCreateOrReopenCase: {
                        type: "boolean"
                    },
                    notifyOnResolveCase: {
                        type: "boolean"
                    },
                    teamId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteAccountAlias: {
            http: {
                requestUri: "/control/delete-account-alias",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSlackChannelConfiguration: {
            http: {
                requestUri: "/control/delete-slack-channel-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelId", "teamId" ],
                members: {
                    channelId: {},
                    teamId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        DeleteSlackWorkspaceConfiguration: {
            http: {
                requestUri: "/control/delete-slack-workspace-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "teamId" ],
                members: {
                    teamId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetAccountAlias: {
            http: {
                requestUri: "/control/get-account-alias",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                members: {
                    accountAlias: {}
                }
            }
        },
        ListSlackChannelConfigurations: {
            http: {
                requestUri: "/control/list-slack-channel-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "slackChannelConfigurations" ],
                members: {
                    nextToken: {},
                    slackChannelConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "channelId", "teamId" ],
                            members: {
                                channelId: {},
                                channelName: {},
                                channelRoleArn: {},
                                notifyOnAddCorrespondenceToCase: {
                                    type: "boolean"
                                },
                                notifyOnCaseSeverity: {},
                                notifyOnCreateOrReopenCase: {
                                    type: "boolean"
                                },
                                notifyOnResolveCase: {
                                    type: "boolean"
                                },
                                teamId: {}
                            }
                        }
                    }
                }
            }
        },
        ListSlackWorkspaceConfigurations: {
            http: {
                requestUri: "/control/list-slack-workspace-configurations",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    slackWorkspaceConfigurations: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "teamId" ],
                            members: {
                                teamId: {}
                            }
                        }
                    }
                }
            }
        },
        PutAccountAlias: {
            http: {
                requestUri: "/control/put-account-alias",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "accountAlias" ],
                members: {
                    accountAlias: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateSlackChannelConfiguration: {
            http: {
                requestUri: "/control/update-slack-channel-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "channelId", "teamId" ],
                members: {
                    channelId: {},
                    channelName: {},
                    channelRoleArn: {},
                    notifyOnAddCorrespondenceToCase: {
                        type: "boolean"
                    },
                    notifyOnCaseSeverity: {},
                    notifyOnCreateOrReopenCase: {
                        type: "boolean"
                    },
                    notifyOnResolveCase: {
                        type: "boolean"
                    },
                    teamId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    channelId: {},
                    channelName: {},
                    channelRoleArn: {},
                    notifyOnAddCorrespondenceToCase: {
                        type: "boolean"
                    },
                    notifyOnCaseSeverity: {},
                    notifyOnCreateOrReopenCase: {
                        type: "boolean"
                    },
                    notifyOnResolveCase: {
                        type: "boolean"
                    },
                    teamId: {}
                }
            }
        }
    },
    shapes: {},
    paginators: {
        ListSlackChannelConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken"
        },
        ListSlackWorkspaceConfigurations: {
            input_token: "nextToken",
            output_token: "nextToken"
        }
    }
};

AWS.apiLoader.services["controltower"] = {};

AWS.ControlTower = AWS.Service.defineService("controltower", [ "2018-05-10" ]);

AWS.apiLoader.services["controltower"]["2018-05-10"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2018-05-10",
        endpointPrefix: "controltower",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Control Tower",
        serviceId: "ControlTower",
        signatureVersion: "v4",
        signingName: "controltower",
        uid: "controltower-2018-05-10"
    },
    operations: {
        DisableControl: {
            http: {
                requestUri: "/disable-control",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "controlIdentifier", "targetIdentifier" ],
                members: {
                    controlIdentifier: {},
                    targetIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            }
        },
        EnableControl: {
            http: {
                requestUri: "/enable-control",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "controlIdentifier", "targetIdentifier" ],
                members: {
                    controlIdentifier: {},
                    targetIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            }
        },
        GetControlOperation: {
            http: {
                requestUri: "/get-control-operation",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "operationIdentifier" ],
                members: {
                    operationIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "controlOperation" ],
                members: {
                    controlOperation: {
                        type: "structure",
                        members: {
                            endTime: {
                                shape: "Sb"
                            },
                            operationType: {},
                            startTime: {
                                shape: "Sb"
                            },
                            status: {},
                            statusMessage: {}
                        }
                    }
                }
            }
        },
        ListEnabledControls: {
            http: {
                requestUri: "/list-enabled-controls",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "targetIdentifier" ],
                members: {
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    targetIdentifier: {}
                }
            },
            output: {
                type: "structure",
                required: [ "enabledControls" ],
                members: {
                    enabledControls: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                controlIdentifier: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        }
    },
    shapes: {
        Sb: {
            type: "timestamp",
            timestampFormat: "iso8601"
        }
    },
    paginators: {
        ListEnabledControls: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "enabledControls"
        }
    }
};

AWS.apiLoader.services["iotfleetwise"] = {};

AWS.IoTFleetWise = AWS.Service.defineService("iotfleetwise", [ "2021-06-17" ]);

AWS.apiLoader.services["iotfleetwise"]["2021-06-17"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-06-17",
        endpointPrefix: "iotfleetwise",
        jsonVersion: "1.0",
        protocol: "json",
        serviceFullName: "AWS IoT FleetWise",
        serviceId: "IoTFleetWise",
        signatureVersion: "v4",
        signingName: "iotfleetwise",
        targetPrefix: "IoTAutobahnControlPlane",
        uid: "iotfleetwise-2021-06-17"
    },
    operations: {
        AssociateVehicleFleet: {
            input: {
                type: "structure",
                required: [ "vehicleName", "fleetId" ],
                members: {
                    vehicleName: {},
                    fleetId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        BatchCreateVehicle: {
            input: {
                type: "structure",
                required: [ "vehicles" ],
                members: {
                    vehicles: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "vehicleName", "modelManifestArn", "decoderManifestArn" ],
                            members: {
                                vehicleName: {},
                                modelManifestArn: {},
                                decoderManifestArn: {},
                                attributes: {
                                    shape: "S9"
                                },
                                associationBehavior: {},
                                tags: {
                                    shape: "Sd"
                                }
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                vehicleName: {},
                                arn: {},
                                thingArn: {}
                            }
                        }
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                vehicleName: {},
                                code: {},
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        BatchUpdateVehicle: {
            input: {
                type: "structure",
                required: [ "vehicles" ],
                members: {
                    vehicles: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "vehicleName" ],
                            members: {
                                vehicleName: {},
                                modelManifestArn: {},
                                decoderManifestArn: {},
                                attributes: {
                                    shape: "S9"
                                },
                                attributeUpdateMode: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicles: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                vehicleName: {},
                                arn: {}
                            }
                        }
                    },
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                vehicleName: {},
                                code: {
                                    type: "integer"
                                },
                                message: {}
                            }
                        }
                    }
                }
            }
        },
        CreateCampaign: {
            input: {
                type: "structure",
                required: [ "name", "signalCatalogArn", "targetArn", "collectionScheme" ],
                members: {
                    name: {},
                    description: {},
                    signalCatalogArn: {},
                    targetArn: {},
                    startTime: {
                        type: "timestamp"
                    },
                    expiryTime: {
                        type: "timestamp"
                    },
                    postTriggerCollectionDuration: {
                        type: "long"
                    },
                    diagnosticsMode: {},
                    spoolingMode: {},
                    compression: {},
                    priority: {
                        type: "integer"
                    },
                    signalsToCollect: {
                        shape: "S16"
                    },
                    collectionScheme: {
                        shape: "S1a"
                    },
                    dataExtraDimensions: {
                        shape: "S1h"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name", "modelManifestArn" ],
                members: {
                    name: {},
                    description: {},
                    modelManifestArn: {},
                    signalDecoders: {
                        shape: "S1m"
                    },
                    networkInterfaces: {
                        shape: "S20"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateFleet: {
            input: {
                type: "structure",
                required: [ "fleetId", "signalCatalogArn" ],
                members: {
                    fleetId: {},
                    description: {},
                    signalCatalogArn: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn" ],
                members: {
                    id: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateModelManifest: {
            input: {
                type: "structure",
                required: [ "name", "nodes", "signalCatalogArn" ],
                members: {
                    name: {},
                    description: {},
                    nodes: {
                        shape: "S2e"
                    },
                    signalCatalogArn: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    nodes: {
                        shape: "S2h"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        CreateVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName", "modelManifestArn", "decoderManifestArn" ],
                members: {
                    vehicleName: {},
                    modelManifestArn: {},
                    decoderManifestArn: {},
                    attributes: {
                        shape: "S9"
                    },
                    associationBehavior: {},
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicleName: {},
                    arn: {},
                    thingArn: {}
                }
            },
            idempotent: true
        },
        DeleteCampaign: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteFleet: {
            input: {
                type: "structure",
                required: [ "fleetId" ],
                members: {
                    fleetId: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteModelManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DeleteVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    vehicleName: {}
                }
            },
            output: {
                type: "structure",
                required: [ "vehicleName", "arn" ],
                members: {
                    vehicleName: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        DisassociateVehicleFleet: {
            input: {
                type: "structure",
                required: [ "vehicleName", "fleetId" ],
                members: {
                    vehicleName: {},
                    fleetId: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        GetCampaign: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    arn: {},
                    description: {},
                    signalCatalogArn: {},
                    targetArn: {},
                    status: {},
                    startTime: {
                        type: "timestamp"
                    },
                    expiryTime: {
                        type: "timestamp"
                    },
                    postTriggerCollectionDuration: {
                        type: "long"
                    },
                    diagnosticsMode: {},
                    spoolingMode: {},
                    compression: {},
                    priority: {
                        type: "integer"
                    },
                    signalsToCollect: {
                        shape: "S16"
                    },
                    collectionScheme: {
                        shape: "S1a"
                    },
                    dataExtraDimensions: {
                        shape: "S1h"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn", "creationTime", "lastModificationTime" ],
                members: {
                    name: {},
                    arn: {},
                    description: {},
                    modelManifestArn: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetFleet: {
            input: {
                type: "structure",
                required: [ "fleetId" ],
                members: {
                    fleetId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "id", "arn", "signalCatalogArn", "creationTime", "lastModificationTime" ],
                members: {
                    id: {},
                    arn: {},
                    description: {},
                    signalCatalogArn: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetLoggingOptions: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "cloudWatchLogDelivery" ],
                members: {
                    cloudWatchLogDelivery: {
                        shape: "S3f"
                    }
                }
            }
        },
        GetModelManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn", "creationTime", "lastModificationTime" ],
                members: {
                    name: {},
                    arn: {},
                    description: {},
                    signalCatalogArn: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetRegisterAccountStatus: {
            input: {
                type: "structure",
                members: {}
            },
            output: {
                type: "structure",
                required: [ "customerAccountId", "accountStatus", "timestreamRegistrationResponse", "iamRegistrationResponse", "creationTime", "lastModificationTime" ],
                members: {
                    customerAccountId: {},
                    accountStatus: {},
                    timestreamRegistrationResponse: {
                        type: "structure",
                        required: [ "timestreamDatabaseName", "timestreamTableName", "registrationStatus" ],
                        members: {
                            timestreamDatabaseName: {},
                            timestreamTableName: {},
                            timestreamDatabaseArn: {},
                            timestreamTableArn: {},
                            registrationStatus: {},
                            errorMessage: {}
                        }
                    },
                    iamRegistrationResponse: {
                        type: "structure",
                        required: [ "roleArn", "registrationStatus" ],
                        members: {
                            roleArn: {},
                            registrationStatus: {},
                            errorMessage: {}
                        }
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn", "creationTime", "lastModificationTime" ],
                members: {
                    name: {},
                    arn: {},
                    description: {},
                    nodeCounts: {
                        type: "structure",
                        members: {
                            totalNodes: {
                                type: "integer"
                            },
                            totalBranches: {
                                type: "integer"
                            },
                            totalSensors: {
                                type: "integer"
                            },
                            totalAttributes: {
                                type: "integer"
                            },
                            totalActuators: {
                                type: "integer"
                            }
                        }
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    vehicleName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicleName: {},
                    arn: {},
                    modelManifestArn: {},
                    decoderManifestArn: {},
                    attributes: {
                        shape: "S9"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetVehicleStatus: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    vehicleName: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    campaigns: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                campaignName: {},
                                vehicleName: {},
                                status: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ImportDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name", "networkFileDefinitions" ],
                members: {
                    name: {},
                    networkFileDefinitions: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                canDbc: {
                                    type: "structure",
                                    required: [ "networkInterface", "canDbcFiles" ],
                                    members: {
                                        networkInterface: {},
                                        canDbcFiles: {
                                            type: "list",
                                            member: {
                                                type: "blob"
                                            }
                                        },
                                        signalsMap: {
                                            type: "map",
                                            key: {},
                                            value: {}
                                        }
                                    }
                                }
                            },
                            union: true
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            }
        },
        ImportSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    vss: {
                        type: "structure",
                        members: {
                            vssJson: {}
                        },
                        union: true
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        ListCampaigns: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    campaignSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "creationTime", "lastModificationTime" ],
                            members: {
                                arn: {},
                                name: {},
                                description: {},
                                signalCatalogArn: {},
                                targetArn: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDecoderManifestNetworkInterfaces: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    networkInterfaces: {
                        shape: "S20"
                    },
                    nextToken: {}
                }
            }
        },
        ListDecoderManifestSignals: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    signalDecoders: {
                        shape: "S1m"
                    },
                    nextToken: {}
                }
            }
        },
        ListDecoderManifests: {
            input: {
                type: "structure",
                members: {
                    modelManifestArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "creationTime", "lastModificationTime" ],
                            members: {
                                name: {},
                                arn: {},
                                modelManifestArn: {},
                                description: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFleets: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fleetSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "id", "arn", "signalCatalogArn", "creationTime" ],
                            members: {
                                id: {},
                                arn: {},
                                description: {},
                                signalCatalogArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFleetsForVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    vehicleName: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    fleets: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        ListModelManifestNodes: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodes: {
                        shape: "S2h"
                    },
                    nextToken: {}
                }
            }
        },
        ListModelManifests: {
            input: {
                type: "structure",
                members: {
                    signalCatalogArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "creationTime", "lastModificationTime" ],
                            members: {
                                name: {},
                                arn: {},
                                signalCatalogArn: {},
                                description: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListSignalCatalogNodes: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nodes: {
                        shape: "S2h"
                    },
                    nextToken: {}
                }
            }
        },
        ListSignalCatalogs: {
            input: {
                type: "structure",
                members: {
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    summaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                arn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN" ],
                members: {
                    ResourceARN: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    Tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        ListVehicles: {
            input: {
                type: "structure",
                members: {
                    modelManifestArn: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicleSummaries: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "vehicleName", "arn", "modelManifestArn", "decoderManifestArn", "creationTime", "lastModificationTime" ],
                            members: {
                                vehicleName: {},
                                arn: {},
                                modelManifestArn: {},
                                decoderManifestArn: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                lastModificationTime: {
                                    type: "timestamp"
                                }
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListVehiclesInFleet: {
            input: {
                type: "structure",
                required: [ "fleetId" ],
                members: {
                    fleetId: {},
                    nextToken: {},
                    maxResults: {
                        type: "integer"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicles: {
                        type: "list",
                        member: {}
                    },
                    nextToken: {}
                }
            }
        },
        PutLoggingOptions: {
            input: {
                type: "structure",
                required: [ "cloudWatchLogDelivery" ],
                members: {
                    cloudWatchLogDelivery: {
                        shape: "S3f"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        RegisterAccount: {
            input: {
                type: "structure",
                required: [ "timestreamResources" ],
                members: {
                    timestreamResources: {
                        shape: "S5r"
                    },
                    iamResources: {
                        shape: "S5s",
                        deprecated: true,
                        deprecatedMessage: "iamResources is no longer used or needed as input"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "registerAccountStatus", "timestreamResources", "iamResources", "creationTime", "lastModificationTime" ],
                members: {
                    registerAccountStatus: {},
                    timestreamResources: {
                        shape: "S5r"
                    },
                    iamResources: {
                        shape: "S5s"
                    },
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModificationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "Tags" ],
                members: {
                    ResourceARN: {},
                    Tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            input: {
                type: "structure",
                required: [ "ResourceARN", "TagKeys" ],
                members: {
                    ResourceARN: {},
                    TagKeys: {
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateCampaign: {
            input: {
                type: "structure",
                required: [ "name", "action" ],
                members: {
                    name: {},
                    description: {},
                    dataExtraDimensions: {
                        shape: "S1h"
                    },
                    action: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    arn: {},
                    name: {},
                    status: {}
                }
            }
        },
        UpdateDecoderManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    signalDecodersToAdd: {
                        shape: "S1m"
                    },
                    signalDecodersToUpdate: {
                        shape: "S1m"
                    },
                    signalDecodersToRemove: {
                        type: "list",
                        member: {}
                    },
                    networkInterfacesToAdd: {
                        shape: "S20"
                    },
                    networkInterfacesToUpdate: {
                        shape: "S20"
                    },
                    networkInterfacesToRemove: {
                        type: "list",
                        member: {}
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        UpdateFleet: {
            input: {
                type: "structure",
                required: [ "fleetId" ],
                members: {
                    fleetId: {},
                    description: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {}
                }
            }
        },
        UpdateModelManifest: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    nodesToAdd: {
                        shape: "S6a"
                    },
                    nodesToRemove: {
                        shape: "S6a"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        UpdateSignalCatalog: {
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    description: {},
                    nodesToAdd: {
                        shape: "S2h"
                    },
                    nodesToUpdate: {
                        shape: "S2h"
                    },
                    nodesToRemove: {
                        shape: "S6a"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "arn" ],
                members: {
                    name: {},
                    arn: {}
                }
            },
            idempotent: true
        },
        UpdateVehicle: {
            input: {
                type: "structure",
                required: [ "vehicleName" ],
                members: {
                    vehicleName: {},
                    modelManifestArn: {},
                    decoderManifestArn: {},
                    attributes: {
                        shape: "S9"
                    },
                    attributeUpdateMode: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    vehicleName: {},
                    arn: {}
                }
            }
        }
    },
    shapes: {
        S9: {
            type: "map",
            key: {},
            value: {}
        },
        Sd: {
            type: "list",
            member: {
                type: "structure",
                required: [ "Key", "Value" ],
                members: {
                    Key: {},
                    Value: {}
                }
            }
        },
        S16: {
            type: "list",
            member: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {},
                    maxSampleCount: {
                        type: "long"
                    },
                    minimumSamplingIntervalMs: {
                        type: "long"
                    }
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                timeBasedCollectionScheme: {
                    type: "structure",
                    required: [ "periodMs" ],
                    members: {
                        periodMs: {
                            type: "long"
                        }
                    }
                },
                conditionBasedCollectionScheme: {
                    type: "structure",
                    required: [ "expression" ],
                    members: {
                        expression: {},
                        minimumTriggerIntervalMs: {
                            type: "long"
                        },
                        triggerMode: {},
                        conditionLanguageVersion: {
                            type: "integer"
                        }
                    }
                }
            },
            union: true
        },
        S1h: {
            type: "list",
            member: {}
        },
        S1m: {
            type: "list",
            member: {
                type: "structure",
                required: [ "fullyQualifiedName", "type", "interfaceId" ],
                members: {
                    fullyQualifiedName: {},
                    type: {},
                    interfaceId: {},
                    canSignal: {
                        type: "structure",
                        required: [ "messageId", "isBigEndian", "isSigned", "startBit", "offset", "factor", "length" ],
                        members: {
                            messageId: {
                                type: "integer"
                            },
                            isBigEndian: {
                                type: "boolean"
                            },
                            isSigned: {
                                type: "boolean"
                            },
                            startBit: {
                                type: "integer"
                            },
                            offset: {
                                type: "double"
                            },
                            factor: {
                                type: "double"
                            },
                            length: {
                                type: "integer"
                            },
                            name: {}
                        }
                    },
                    obdSignal: {
                        type: "structure",
                        required: [ "pidResponseLength", "serviceMode", "pid", "scaling", "offset", "startByte", "byteLength" ],
                        members: {
                            pidResponseLength: {
                                type: "integer"
                            },
                            serviceMode: {
                                type: "integer"
                            },
                            pid: {
                                type: "integer"
                            },
                            scaling: {
                                type: "double"
                            },
                            offset: {
                                type: "double"
                            },
                            startByte: {
                                type: "integer"
                            },
                            byteLength: {
                                type: "integer"
                            },
                            bitRightShift: {
                                type: "integer"
                            },
                            bitMaskLength: {
                                type: "integer"
                            }
                        }
                    }
                }
            }
        },
        S20: {
            type: "list",
            member: {
                type: "structure",
                required: [ "interfaceId", "type" ],
                members: {
                    interfaceId: {},
                    type: {},
                    canInterface: {
                        type: "structure",
                        required: [ "name" ],
                        members: {
                            name: {},
                            protocolName: {},
                            protocolVersion: {}
                        }
                    },
                    obdInterface: {
                        type: "structure",
                        required: [ "name", "requestMessageId" ],
                        members: {
                            name: {},
                            requestMessageId: {
                                type: "integer"
                            },
                            obdStandard: {},
                            pidRequestIntervalSeconds: {
                                type: "integer"
                            },
                            dtcRequestIntervalSeconds: {
                                type: "integer"
                            },
                            useExtendedIds: {
                                type: "boolean"
                            },
                            hasTransmissionEcu: {
                                type: "boolean"
                            }
                        }
                    }
                }
            }
        },
        S2e: {
            type: "list",
            member: {}
        },
        S2h: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    branch: {
                        type: "structure",
                        required: [ "fullyQualifiedName" ],
                        members: {
                            fullyQualifiedName: {},
                            description: {}
                        }
                    },
                    sensor: {
                        type: "structure",
                        required: [ "fullyQualifiedName", "dataType" ],
                        members: {
                            fullyQualifiedName: {},
                            dataType: {},
                            description: {},
                            unit: {},
                            allowedValues: {
                                shape: "S2e"
                            },
                            min: {
                                type: "double"
                            },
                            max: {
                                type: "double"
                            }
                        }
                    },
                    actuator: {
                        type: "structure",
                        required: [ "fullyQualifiedName", "dataType" ],
                        members: {
                            fullyQualifiedName: {},
                            dataType: {},
                            description: {},
                            unit: {},
                            allowedValues: {
                                shape: "S2e"
                            },
                            min: {
                                type: "double"
                            },
                            max: {
                                type: "double"
                            },
                            assignedValue: {}
                        }
                    },
                    attribute: {
                        type: "structure",
                        required: [ "fullyQualifiedName", "dataType" ],
                        members: {
                            fullyQualifiedName: {},
                            dataType: {},
                            description: {},
                            unit: {},
                            allowedValues: {
                                shape: "S2e"
                            },
                            min: {
                                type: "double"
                            },
                            max: {
                                type: "double"
                            },
                            assignedValue: {},
                            defaultValue: {}
                        }
                    }
                },
                union: true
            }
        },
        S3f: {
            type: "structure",
            required: [ "logType" ],
            members: {
                logType: {},
                logGroupName: {}
            }
        },
        S5r: {
            type: "structure",
            required: [ "timestreamDatabaseName", "timestreamTableName" ],
            members: {
                timestreamDatabaseName: {},
                timestreamTableName: {}
            }
        },
        S5s: {
            type: "structure",
            required: [ "roleArn" ],
            members: {
                roleArn: {}
            }
        },
        S6a: {
            type: "list",
            member: {}
        }
    },
    paginators: {
        GetVehicleStatus: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "campaigns"
        },
        ListCampaigns: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "campaignSummaries"
        },
        ListDecoderManifestNetworkInterfaces: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "networkInterfaces"
        },
        ListDecoderManifestSignals: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "signalDecoders"
        },
        ListDecoderManifests: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "summaries"
        },
        ListFleets: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "fleetSummaries"
        },
        ListFleetsForVehicle: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "fleets"
        },
        ListModelManifestNodes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "nodes"
        },
        ListModelManifests: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "summaries"
        },
        ListSignalCatalogNodes: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "nodes"
        },
        ListSignalCatalogs: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "summaries"
        },
        ListVehicles: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "vehicleSummaries"
        },
        ListVehiclesInFleet: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "vehicles"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["migrationhuborchestrator"] = {};

AWS.MigrationHubOrchestrator = AWS.Service.defineService("migrationhuborchestrator", [ "2021-08-28" ]);

AWS.apiLoader.services["migrationhuborchestrator"]["2021-08-28"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2021-08-28",
        endpointPrefix: "migrationhub-orchestrator",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceFullName: "AWS Migration Hub Orchestrator",
        serviceId: "MigrationHubOrchestrator",
        signatureVersion: "v4",
        signingName: "migrationhub-orchestrator",
        uid: "migrationhuborchestrator-2021-08-28"
    },
    operations: {
        CreateWorkflow: {
            http: {
                requestUri: "/migrationworkflow/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "templateId", "applicationConfigurationId", "inputParameters" ],
                members: {
                    name: {},
                    description: {},
                    templateId: {},
                    applicationConfigurationId: {},
                    inputParameters: {
                        shape: "S6"
                    },
                    stepTargets: {
                        shape: "Sb"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    templateId: {},
                    adsApplicationConfigurationId: {},
                    workflowInputs: {
                        shape: "S6"
                    },
                    stepTargets: {
                        shape: "Sb"
                    },
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        CreateWorkflowStep: {
            http: {
                requestUri: "/workflowstep",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name", "stepGroupId", "workflowId", "stepActionType" ],
                members: {
                    name: {},
                    stepGroupId: {},
                    workflowId: {},
                    stepActionType: {},
                    description: {},
                    workflowStepAutomationConfiguration: {
                        shape: "Sq"
                    },
                    stepTarget: {
                        shape: "Sb"
                    },
                    outputs: {
                        shape: "Sx"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    stepGroupId: {},
                    workflowId: {},
                    name: {}
                }
            }
        },
        CreateWorkflowStepGroup: {
            http: {
                requestUri: "/workflowstepgroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId", "name" ],
                members: {
                    workflowId: {},
                    name: {},
                    description: {},
                    next: {
                        shape: "Sb"
                    },
                    previous: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    workflowId: {},
                    name: {},
                    id: {},
                    description: {},
                    tools: {
                        shape: "S18"
                    },
                    next: {
                        shape: "Sb"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    creationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        DeleteWorkflow: {
            http: {
                method: "DELETE",
                requestUri: "/migrationworkflow/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    status: {}
                }
            },
            idempotent: true
        },
        DeleteWorkflowStep: {
            http: {
                method: "DELETE",
                requestUri: "/workflowstep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "stepGroupId", "workflowId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    },
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        DeleteWorkflowStepGroup: {
            http: {
                method: "DELETE",
                requestUri: "/workflowstepgroup/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workflowId", "id" ],
                members: {
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        GetTemplate: {
            http: {
                method: "GET",
                requestUri: "/migrationworkflowtemplate/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    name: {},
                    description: {},
                    inputs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                inputName: {},
                                dataType: {},
                                required: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    tools: {
                        shape: "S18"
                    },
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        GetTemplateStep: {
            http: {
                method: "GET",
                requestUri: "/templatestep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "templateId", "stepGroupId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    templateId: {
                        location: "querystring",
                        locationName: "templateId"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    stepGroupId: {},
                    templateId: {},
                    name: {},
                    description: {},
                    stepActionType: {},
                    creationTime: {},
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    },
                    outputs: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                name: {},
                                dataType: {},
                                required: {
                                    type: "boolean"
                                }
                            }
                        }
                    },
                    stepAutomationConfiguration: {
                        type: "structure",
                        members: {
                            scriptLocationS3Bucket: {},
                            scriptLocationS3Key: {
                                shape: "Ss"
                            },
                            command: {
                                shape: "Su"
                            },
                            runEnvironment: {},
                            targetType: {}
                        }
                    }
                }
            }
        },
        GetTemplateStepGroup: {
            http: {
                method: "GET",
                requestUri: "/templates/{templateId}/stepgroups/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "templateId", "id" ],
                members: {
                    templateId: {
                        location: "uri",
                        locationName: "templateId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    templateId: {},
                    id: {},
                    name: {},
                    description: {},
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    },
                    tools: {
                        shape: "S18"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    }
                }
            }
        },
        GetWorkflow: {
            http: {
                method: "GET",
                requestUri: "/migrationworkflow/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    templateId: {},
                    adsApplicationConfigurationId: {},
                    adsApplicationName: {},
                    status: {},
                    statusMessage: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastStartTime: {
                        type: "timestamp"
                    },
                    lastStopTime: {
                        type: "timestamp"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    tools: {
                        shape: "S18"
                    },
                    totalSteps: {
                        type: "integer"
                    },
                    completedSteps: {
                        type: "integer"
                    },
                    workflowInputs: {
                        shape: "S6"
                    },
                    tags: {
                        shape: "Sd"
                    },
                    workflowBucket: {}
                }
            }
        },
        GetWorkflowStep: {
            http: {
                method: "GET",
                requestUri: "/workflowstep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId", "stepGroupId", "id" ],
                members: {
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    name: {},
                    stepGroupId: {},
                    workflowId: {},
                    stepId: {},
                    description: {},
                    stepActionType: {},
                    owner: {},
                    workflowStepAutomationConfiguration: {
                        shape: "Sq"
                    },
                    stepTarget: {
                        shape: "Sb"
                    },
                    outputs: {
                        type: "list",
                        member: {
                            shape: "Sy"
                        }
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    },
                    status: {},
                    statusMessage: {},
                    scriptOutputLocation: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastStartTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    noOfSrvCompleted: {
                        type: "integer"
                    },
                    noOfSrvFailed: {
                        type: "integer"
                    },
                    totalNoOfSrv: {
                        type: "integer"
                    }
                }
            }
        },
        GetWorkflowStepGroup: {
            http: {
                method: "GET",
                requestUri: "/workflowstepgroup/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "workflowId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    workflowId: {},
                    name: {},
                    description: {},
                    status: {},
                    owner: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    },
                    endTime: {
                        type: "timestamp"
                    },
                    tools: {
                        shape: "S18"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    }
                }
            }
        },
        ListPlugins: {
            http: {
                method: "GET",
                requestUri: "/plugins",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    plugins: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                pluginId: {},
                                hostname: {},
                                status: {},
                                ipAddress: {},
                                version: {},
                                registeredTime: {}
                            }
                        }
                    }
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "S2i"
                    }
                }
            }
        },
        ListTemplateStepGroups: {
            http: {
                method: "GET",
                requestUri: "/templatestepgroups/{templateId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "templateId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    templateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "templateStepGroupSummary" ],
                members: {
                    nextToken: {},
                    templateStepGroupSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                previous: {
                                    shape: "Sb"
                                },
                                next: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTemplateSteps: {
            http: {
                method: "GET",
                requestUri: "/templatesteps",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "templateId", "stepGroupId" ],
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    templateId: {
                        location: "querystring",
                        locationName: "templateId"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    nextToken: {},
                    templateStepSummaryList: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                stepGroupId: {},
                                templateId: {},
                                name: {},
                                stepActionType: {},
                                targetType: {},
                                owner: {},
                                previous: {
                                    shape: "Sb"
                                },
                                next: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListTemplates: {
            http: {
                method: "GET",
                requestUri: "/migrationworkflowtemplates",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "templateSummary" ],
                members: {
                    nextToken: {},
                    templateSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                arn: {},
                                description: {}
                            }
                        }
                    }
                }
            }
        },
        ListWorkflowStepGroups: {
            http: {
                method: "GET",
                requestUri: "/workflowstepgroups",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workflowStepGroupsSummary" ],
                members: {
                    nextToken: {},
                    workflowStepGroupsSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                owner: {},
                                status: {},
                                previous: {
                                    shape: "Sb"
                                },
                                next: {
                                    shape: "Sb"
                                }
                            }
                        }
                    }
                }
            }
        },
        ListWorkflowSteps: {
            http: {
                method: "GET",
                requestUri: "/workflow/{workflowId}/workflowstepgroups/{stepGroupId}/workflowsteps",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId", "stepGroupId" ],
                members: {
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    workflowId: {
                        location: "uri",
                        locationName: "workflowId"
                    },
                    stepGroupId: {
                        location: "uri",
                        locationName: "stepGroupId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "workflowStepsSummary" ],
                members: {
                    nextToken: {},
                    workflowStepsSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                stepId: {},
                                name: {},
                                stepActionType: {},
                                owner: {},
                                previous: {
                                    shape: "Sb"
                                },
                                next: {
                                    shape: "Sb"
                                },
                                status: {},
                                statusMessage: {},
                                noOfSrvCompleted: {
                                    type: "integer"
                                },
                                noOfSrvFailed: {
                                    type: "integer"
                                },
                                totalNoOfSrv: {
                                    type: "integer"
                                },
                                description: {},
                                scriptLocation: {}
                            }
                        }
                    }
                }
            }
        },
        ListWorkflows: {
            http: {
                method: "GET",
                requestUri: "/migrationworkflows",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    templateId: {
                        location: "querystring",
                        locationName: "templateId"
                    },
                    adsApplicationConfigurationName: {
                        location: "querystring",
                        locationName: "adsApplicationConfigurationName"
                    },
                    status: {
                        location: "querystring",
                        locationName: "status"
                    },
                    name: {
                        location: "querystring",
                        locationName: "name"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "migrationWorkflowSummary" ],
                members: {
                    nextToken: {},
                    migrationWorkflowSummary: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                id: {},
                                name: {},
                                templateId: {},
                                adsApplicationConfigurationName: {},
                                status: {},
                                creationTime: {
                                    type: "timestamp"
                                },
                                endTime: {
                                    type: "timestamp"
                                },
                                statusMessage: {},
                                completedSteps: {
                                    type: "integer"
                                },
                                totalSteps: {
                                    type: "integer"
                                }
                            }
                        }
                    }
                }
            }
        },
        RetryWorkflowStep: {
            http: {
                requestUri: "/retryworkflowstep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "workflowId", "stepGroupId", "id" ],
                members: {
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    stepGroupId: {
                        location: "querystring",
                        locationName: "stepGroupId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    stepGroupId: {},
                    workflowId: {},
                    id: {},
                    status: {}
                }
            }
        },
        StartWorkflow: {
            http: {
                requestUri: "/migrationworkflow/{id}/start",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    status: {},
                    statusMessage: {},
                    lastStartTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        StopWorkflow: {
            http: {
                requestUri: "/migrationworkflow/{id}/stop",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    status: {},
                    statusMessage: {},
                    lastStopTime: {
                        type: "timestamp"
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tags" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tags: {
                        shape: "S2i"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{resourceArn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "resourceArn", "tagKeys" ],
                members: {
                    resourceArn: {
                        location: "uri",
                        locationName: "resourceArn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateWorkflow: {
            http: {
                requestUri: "/migrationworkflow/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {},
                    description: {},
                    inputParameters: {
                        shape: "S6"
                    },
                    stepTargets: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    arn: {},
                    name: {},
                    description: {},
                    templateId: {},
                    adsApplicationConfigurationId: {},
                    workflowInputs: {
                        shape: "S6"
                    },
                    stepTargets: {
                        shape: "Sb"
                    },
                    status: {},
                    creationTime: {
                        type: "timestamp"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    },
                    tags: {
                        shape: "Sd"
                    }
                }
            }
        },
        UpdateWorkflowStep: {
            http: {
                requestUri: "/workflowstep/{id}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "id", "stepGroupId", "workflowId" ],
                members: {
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    stepGroupId: {},
                    workflowId: {},
                    name: {},
                    description: {},
                    stepActionType: {},
                    workflowStepAutomationConfiguration: {
                        shape: "Sq"
                    },
                    stepTarget: {
                        shape: "Sb"
                    },
                    outputs: {
                        shape: "Sx"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    next: {
                        shape: "Sb"
                    },
                    status: {}
                }
            },
            output: {
                type: "structure",
                members: {
                    id: {},
                    stepGroupId: {},
                    workflowId: {},
                    name: {}
                }
            }
        },
        UpdateWorkflowStepGroup: {
            http: {
                requestUri: "/workflowstepgroup/{id}",
                responseCode: 202
            },
            input: {
                type: "structure",
                required: [ "workflowId", "id" ],
                members: {
                    workflowId: {
                        location: "querystring",
                        locationName: "workflowId"
                    },
                    id: {
                        location: "uri",
                        locationName: "id"
                    },
                    name: {},
                    description: {},
                    next: {
                        shape: "Sb"
                    },
                    previous: {
                        shape: "Sb"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    workflowId: {},
                    name: {},
                    id: {},
                    description: {},
                    tools: {
                        shape: "S18"
                    },
                    next: {
                        shape: "Sb"
                    },
                    previous: {
                        shape: "Sb"
                    },
                    lastModifiedTime: {
                        type: "timestamp"
                    }
                }
            },
            idempotent: true
        }
    },
    shapes: {
        S6: {
            type: "map",
            key: {},
            value: {
                type: "structure",
                members: {
                    integerValue: {
                        type: "integer"
                    },
                    stringValue: {},
                    listOfStringsValue: {
                        shape: "Sb"
                    },
                    mapOfStringValue: {
                        shape: "Sd"
                    }
                },
                union: true
            },
            sensitive: true
        },
        Sb: {
            type: "list",
            member: {}
        },
        Sd: {
            type: "map",
            key: {},
            value: {}
        },
        Sq: {
            type: "structure",
            members: {
                scriptLocationS3Bucket: {},
                scriptLocationS3Key: {
                    shape: "Ss"
                },
                command: {
                    shape: "Su"
                },
                runEnvironment: {},
                targetType: {}
            }
        },
        Ss: {
            type: "structure",
            members: {
                linux: {},
                windows: {}
            }
        },
        Su: {
            type: "structure",
            members: {
                linux: {},
                windows: {}
            }
        },
        Sx: {
            type: "list",
            member: {
                shape: "Sy"
            }
        },
        Sy: {
            type: "structure",
            members: {
                name: {},
                dataType: {},
                required: {
                    type: "boolean"
                },
                value: {
                    type: "structure",
                    members: {
                        integerValue: {
                            type: "integer"
                        },
                        stringValue: {},
                        listOfStringValue: {
                            shape: "Sb"
                        }
                    },
                    union: true
                }
            }
        },
        S18: {
            type: "list",
            member: {
                type: "structure",
                members: {
                    name: {},
                    url: {}
                }
            }
        },
        S2i: {
            type: "map",
            key: {},
            value: {}
        }
    },
    paginators: {
        ListPlugins: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "plugins"
        },
        ListTemplateStepGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateStepGroupSummary"
        },
        ListTemplateSteps: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateStepSummaryList"
        },
        ListTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "templateSummary"
        },
        ListWorkflowStepGroups: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workflowStepGroupsSummary"
        },
        ListWorkflowSteps: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "workflowStepsSummary"
        },
        ListWorkflows: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "migrationWorkflowSummary"
        }
    },
    waiters: {}
};

AWS.apiLoader.services["connectcases"] = {};

AWS.ConnectCases = AWS.Service.defineService("connectcases", [ "2022-10-03" ]);

AWS.apiLoader.services["connectcases"]["2022-10-03"] = {
    version: "2.0",
    metadata: {
        apiVersion: "2022-10-03",
        endpointPrefix: "cases",
        jsonVersion: "1.1",
        protocol: "rest-json",
        serviceAbbreviation: "ConnectCases",
        serviceFullName: "Amazon Connect Cases",
        serviceId: "ConnectCases",
        signatureVersion: "v4",
        signingName: "cases",
        uid: "connectcases-2022-10-03"
    },
    operations: {
        BatchGetField: {
            http: {
                requestUri: "/domains/{domainId}/fields-batch",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fields" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "errors", "fields" ],
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "id" ],
                            members: {
                                errorCode: {},
                                id: {},
                                message: {}
                            }
                        }
                    },
                    fields: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "fieldArn", "fieldId", "name", "namespace", "type" ],
                            members: {
                                description: {},
                                fieldArn: {},
                                fieldId: {},
                                name: {},
                                namespace: {},
                                tags: {
                                    shape: "Sg"
                                },
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        BatchPutFieldOptions: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/fields/{fieldId}/options",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fieldId", "options" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fieldId: {
                        location: "uri",
                        locationName: "fieldId"
                    },
                    options: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    errors: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "errorCode", "message", "value" ],
                            members: {
                                errorCode: {},
                                message: {},
                                value: {}
                            }
                        }
                    }
                }
            },
            idempotent: true
        },
        CreateCase: {
            http: {
                requestUri: "/domains/{domainId}/cases",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fields", "templateId" ],
                members: {
                    clientToken: {
                        idempotencyToken: true
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    templateId: {}
                }
            },
            output: {
                type: "structure",
                required: [ "caseArn", "caseId" ],
                members: {
                    caseArn: {},
                    caseId: {}
                }
            },
            idempotent: true
        },
        CreateDomain: {
            http: {
                requestUri: "/domains",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "name" ],
                members: {
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "domainArn", "domainId", "domainStatus" ],
                members: {
                    domainArn: {},
                    domainId: {},
                    domainStatus: {}
                }
            },
            idempotent: true
        },
        CreateField: {
            http: {
                requestUri: "/domains/{domainId}/fields",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "name", "type" ],
                members: {
                    description: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    name: {},
                    type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "fieldArn", "fieldId" ],
                members: {
                    fieldArn: {},
                    fieldId: {}
                }
            },
            idempotent: true
        },
        CreateLayout: {
            http: {
                requestUri: "/domains/{domainId}/layouts",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "content", "domainId", "name" ],
                members: {
                    content: {
                        shape: "S1a"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                required: [ "layoutArn", "layoutId" ],
                members: {
                    layoutArn: {},
                    layoutId: {}
                }
            }
        },
        CreateRelatedItem: {
            http: {
                requestUri: "/domains/{domainId}/cases/{caseId}/related-items/",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "caseId", "content", "domainId", "type" ],
                members: {
                    caseId: {
                        location: "uri",
                        locationName: "caseId"
                    },
                    content: {
                        type: "structure",
                        members: {
                            comment: {
                                shape: "S1p"
                            },
                            contact: {
                                type: "structure",
                                required: [ "contactArn" ],
                                members: {
                                    contactArn: {}
                                }
                            }
                        },
                        union: true
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    type: {}
                }
            },
            output: {
                type: "structure",
                required: [ "relatedItemArn", "relatedItemId" ],
                members: {
                    relatedItemArn: {},
                    relatedItemId: {}
                }
            },
            idempotent: true
        },
        CreateTemplate: {
            http: {
                requestUri: "/domains/{domainId}/templates",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "name" ],
                members: {
                    description: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    layoutConfiguration: {
                        shape: "S20"
                    },
                    name: {},
                    requiredFields: {
                        shape: "S22"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "templateArn", "templateId" ],
                members: {
                    templateArn: {},
                    templateId: {}
                }
            },
            idempotent: true
        },
        GetCase: {
            http: {
                requestUri: "/domains/{domainId}/cases/{caseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "caseId", "domainId", "fields" ],
                members: {
                    caseId: {
                        location: "uri",
                        locationName: "caseId"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "fields", "templateId" ],
                members: {
                    fields: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    },
                    nextToken: {},
                    tags: {
                        shape: "Sg"
                    },
                    templateId: {}
                }
            }
        },
        GetCaseEventConfiguration: {
            http: {
                requestUri: "/domains/{domainId}/case-event-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "eventBridge" ],
                members: {
                    eventBridge: {
                        shape: "S2d"
                    }
                }
            }
        },
        GetDomain: {
            http: {
                requestUri: "/domains/{domainId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "createdTime", "domainArn", "domainId", "domainStatus", "name" ],
                members: {
                    createdTime: {
                        type: "timestamp",
                        timestampFormat: "iso8601"
                    },
                    domainArn: {},
                    domainId: {},
                    domainStatus: {},
                    name: {},
                    tags: {
                        shape: "Sg"
                    }
                }
            }
        },
        GetLayout: {
            http: {
                requestUri: "/domains/{domainId}/layouts/{layoutId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "layoutId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    layoutId: {
                        location: "uri",
                        locationName: "layoutId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "content", "layoutArn", "layoutId", "name" ],
                members: {
                    content: {
                        shape: "S1a"
                    },
                    layoutArn: {},
                    layoutId: {},
                    name: {},
                    tags: {
                        shape: "Sg"
                    }
                }
            }
        },
        GetTemplate: {
            http: {
                requestUri: "/domains/{domainId}/templates/{templateId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "templateId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    templateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "name", "templateArn", "templateId" ],
                members: {
                    description: {},
                    layoutConfiguration: {
                        shape: "S20"
                    },
                    name: {},
                    requiredFields: {
                        shape: "S22"
                    },
                    tags: {
                        shape: "Sg"
                    },
                    templateArn: {},
                    templateId: {}
                }
            }
        },
        ListCasesForContact: {
            http: {
                requestUri: "/domains/{domainId}/list-cases-for-contact",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "contactArn", "domainId" ],
                members: {
                    contactArn: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "cases" ],
                members: {
                    cases: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "caseId", "templateId" ],
                            members: {
                                caseId: {},
                                templateId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListDomains: {
            http: {
                requestUri: "/domains-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                members: {
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "domains" ],
                members: {
                    domains: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "domainArn", "domainId", "name" ],
                            members: {
                                domainArn: {},
                                domainId: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListFieldOptions: {
            http: {
                requestUri: "/domains/{domainId}/fields/{fieldId}/options-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fieldId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fieldId: {
                        location: "uri",
                        locationName: "fieldId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    },
                    values: {
                        location: "querystring",
                        locationName: "values",
                        type: "list",
                        member: {}
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "options" ],
                members: {
                    nextToken: {},
                    options: {
                        type: "list",
                        member: {
                            shape: "Sk"
                        }
                    }
                }
            }
        },
        ListFields: {
            http: {
                requestUri: "/domains/{domainId}/fields-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "fields" ],
                members: {
                    fields: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "fieldArn", "fieldId", "name", "namespace", "type" ],
                            members: {
                                fieldArn: {},
                                fieldId: {},
                                name: {},
                                namespace: {},
                                type: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListLayouts: {
            http: {
                requestUri: "/domains/{domainId}/layouts-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "layouts" ],
                members: {
                    layouts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "layoutArn", "layoutId", "name" ],
                            members: {
                                layoutArn: {},
                                layoutId: {},
                                name: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        ListTagsForResource: {
            http: {
                method: "GET",
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    }
                }
            },
            output: {
                type: "structure",
                members: {
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        ListTemplates: {
            http: {
                requestUri: "/domains/{domainId}/templates-list",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    maxResults: {
                        location: "querystring",
                        locationName: "maxResults",
                        type: "integer"
                    },
                    nextToken: {
                        location: "querystring",
                        locationName: "nextToken"
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "templates" ],
                members: {
                    nextToken: {},
                    templates: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "name", "templateArn", "templateId" ],
                            members: {
                                name: {},
                                templateArn: {},
                                templateId: {}
                            }
                        }
                    }
                }
            }
        },
        PutCaseEventConfiguration: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/case-event-configuration",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "eventBridge" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    eventBridge: {
                        shape: "S2d"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        SearchCases: {
            http: {
                requestUri: "/domains/{domainId}/cases-search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId" ],
                members: {
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "S4"
                        }
                    },
                    filter: {
                        shape: "S3o"
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {},
                    searchTerm: {},
                    sorts: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "fieldId", "sortOrder" ],
                            members: {
                                fieldId: {},
                                sortOrder: {}
                            }
                        }
                    }
                }
            },
            output: {
                type: "structure",
                required: [ "cases" ],
                members: {
                    cases: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "caseId", "fields", "templateId" ],
                            members: {
                                caseId: {},
                                fields: {
                                    type: "list",
                                    member: {
                                        shape: "Su"
                                    }
                                },
                                tags: {
                                    shape: "Sg"
                                },
                                templateId: {}
                            }
                        }
                    },
                    nextToken: {}
                }
            }
        },
        SearchRelatedItems: {
            http: {
                requestUri: "/domains/{domainId}/cases/{caseId}/related-items-search",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "caseId", "domainId" ],
                members: {
                    caseId: {
                        location: "uri",
                        locationName: "caseId"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    filters: {
                        type: "list",
                        member: {
                            type: "structure",
                            members: {
                                comment: {
                                    type: "structure",
                                    members: {}
                                },
                                contact: {
                                    type: "structure",
                                    members: {
                                        channel: {
                                            type: "list",
                                            member: {}
                                        },
                                        contactArn: {}
                                    }
                                }
                            },
                            union: true
                        }
                    },
                    maxResults: {
                        type: "integer"
                    },
                    nextToken: {}
                }
            },
            output: {
                type: "structure",
                required: [ "relatedItems" ],
                members: {
                    nextToken: {},
                    relatedItems: {
                        type: "list",
                        member: {
                            type: "structure",
                            required: [ "associationTime", "content", "relatedItemId", "type" ],
                            members: {
                                associationTime: {
                                    type: "timestamp",
                                    timestampFormat: "iso8601"
                                },
                                content: {
                                    type: "structure",
                                    members: {
                                        comment: {
                                            shape: "S1p"
                                        },
                                        contact: {
                                            type: "structure",
                                            required: [ "channel", "connectedToSystemTime", "contactArn" ],
                                            members: {
                                                channel: {},
                                                connectedToSystemTime: {
                                                    type: "timestamp",
                                                    timestampFormat: "iso8601"
                                                },
                                                contactArn: {}
                                            }
                                        }
                                    },
                                    union: true
                                },
                                relatedItemId: {},
                                tags: {
                                    shape: "Sg"
                                },
                                type: {}
                            }
                        }
                    }
                }
            }
        },
        TagResource: {
            http: {
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn", "tags" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    tags: {
                        shape: "Sg"
                    }
                }
            },
            idempotent: true
        },
        UntagResource: {
            http: {
                method: "DELETE",
                requestUri: "/tags/{arn}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "arn", "tagKeys" ],
                members: {
                    arn: {
                        location: "uri",
                        locationName: "arn"
                    },
                    tagKeys: {
                        location: "querystring",
                        locationName: "tagKeys",
                        type: "list",
                        member: {}
                    }
                }
            },
            idempotent: true
        },
        UpdateCase: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/cases/{caseId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "caseId", "domainId", "fields" ],
                members: {
                    caseId: {
                        location: "uri",
                        locationName: "caseId"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fields: {
                        type: "list",
                        member: {
                            shape: "Su"
                        }
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            }
        },
        UpdateField: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/fields/{fieldId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "fieldId" ],
                members: {
                    description: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    fieldId: {
                        location: "uri",
                        locationName: "fieldId"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateLayout: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/layouts/{layoutId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "layoutId" ],
                members: {
                    content: {
                        shape: "S1a"
                    },
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    layoutId: {
                        location: "uri",
                        locationName: "layoutId"
                    },
                    name: {}
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        },
        UpdateTemplate: {
            http: {
                method: "PUT",
                requestUri: "/domains/{domainId}/templates/{templateId}",
                responseCode: 200
            },
            input: {
                type: "structure",
                required: [ "domainId", "templateId" ],
                members: {
                    description: {},
                    domainId: {
                        location: "uri",
                        locationName: "domainId"
                    },
                    layoutConfiguration: {
                        shape: "S20"
                    },
                    name: {},
                    requiredFields: {
                        shape: "S22"
                    },
                    templateId: {
                        location: "uri",
                        locationName: "templateId"
                    }
                }
            },
            output: {
                type: "structure",
                members: {}
            },
            idempotent: true
        }
    },
    shapes: {
        S4: {
            type: "structure",
            required: [ "id" ],
            members: {
                id: {}
            }
        },
        Sg: {
            type: "map",
            key: {},
            value: {}
        },
        Sk: {
            type: "structure",
            required: [ "active", "name", "value" ],
            members: {
                active: {
                    type: "boolean"
                },
                name: {},
                value: {}
            }
        },
        Su: {
            type: "structure",
            required: [ "id", "value" ],
            members: {
                id: {},
                value: {
                    type: "structure",
                    members: {
                        booleanValue: {
                            type: "boolean"
                        },
                        doubleValue: {
                            type: "double"
                        },
                        stringValue: {}
                    },
                    union: true
                }
            }
        },
        S1a: {
            type: "structure",
            members: {
                basic: {
                    type: "structure",
                    members: {
                        moreInfo: {
                            shape: "S1c"
                        },
                        topPanel: {
                            shape: "S1c"
                        }
                    }
                }
            },
            union: true
        },
        S1c: {
            type: "structure",
            members: {
                sections: {
                    type: "list",
                    member: {
                        type: "structure",
                        members: {
                            fieldGroup: {
                                type: "structure",
                                required: [ "fields" ],
                                members: {
                                    fields: {
                                        type: "list",
                                        member: {
                                            type: "structure",
                                            required: [ "id" ],
                                            members: {
                                                id: {}
                                            }
                                        }
                                    },
                                    name: {}
                                }
                            }
                        },
                        union: true
                    }
                }
            }
        },
        S1p: {
            type: "structure",
            required: [ "body", "contentType" ],
            members: {
                body: {},
                contentType: {}
            }
        },
        S20: {
            type: "structure",
            members: {
                defaultLayout: {}
            }
        },
        S22: {
            type: "list",
            member: {
                type: "structure",
                required: [ "fieldId" ],
                members: {
                    fieldId: {}
                }
            }
        },
        S2d: {
            type: "structure",
            required: [ "enabled" ],
            members: {
                enabled: {
                    type: "boolean"
                },
                includedData: {
                    type: "structure",
                    members: {
                        caseData: {
                            type: "structure",
                            required: [ "fields" ],
                            members: {
                                fields: {
                                    type: "list",
                                    member: {
                                        shape: "S4"
                                    }
                                }
                            }
                        },
                        relatedItemData: {
                            type: "structure",
                            required: [ "includeContent" ],
                            members: {
                                includeContent: {
                                    type: "boolean"
                                }
                            }
                        }
                    }
                }
            }
        },
        S3o: {
            type: "structure",
            members: {
                andAll: {
                    type: "list",
                    member: {
                        shape: "S3o"
                    }
                },
                field: {
                    type: "structure",
                    members: {
                        contains: {
                            shape: "Su"
                        },
                        equalTo: {
                            shape: "Su"
                        },
                        greaterThan: {
                            shape: "Su"
                        },
                        greaterThanOrEqualTo: {
                            shape: "Su"
                        },
                        lessThan: {
                            shape: "Su"
                        },
                        lessThanOrEqualTo: {
                            shape: "Su"
                        }
                    },
                    union: true
                },
                not: {
                    shape: "S3o"
                }
            },
            union: true
        }
    },
    paginators: {
        GetCase: {
            input_token: "nextToken",
            output_token: "nextToken"
        },
        ListCasesForContact: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListDomains: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFieldOptions: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListFields: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListLayouts: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        ListTemplates: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults"
        },
        SearchCases: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "cases"
        },
        SearchRelatedItems: {
            input_token: "nextToken",
            output_token: "nextToken",
            limit_key: "maxResults",
            result_key: "relatedItems"
        }
    }
};